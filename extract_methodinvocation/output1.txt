['buffer.remaining', 'allocate', 'buffer.remaining', 'cloned.mark', 'cloned.put', 'buffer.duplicate', 'cloned.reset']
[None]
[None]
['clustering.copy']
['cell.copy']
[None]
[None]
['holder']
['holder']
['holder', 'holder.deletionInfo.isLive', 'BTree.isEmpty', 'holder.staticRow.isEmpty']
['holder', 'BTree.isEmpty']
[None]
[None]
['holder', '.']
['holder']
['holder']
['searchIterator', '.', 'ColumnFilter.selection', 'columns', 'row.isEmpty']
['current.deletionInfo.getPartitionDeletion', 'columns.fetchedColumns', '.', 'current.staticRow.isEmpty', 'partitionDeletion.isLive', 'current.staticRow.filter']
['holder', 'desc', 'current.deletionInfo.getPartitionDeletion', 'rawIter.hasNext', 'staticRow', 'rawIter.next', 'current.deletionInfo.rangeCovering', 'rt.deletionTime', '.', 'rt.deletionTime', 'activeDeletion.isLive', 'BTreeRow.emptyDeletedRow', 'Row.Deletion.regular', 'row.filter']
['rawIter.hasNext']
['staticRow', 'rawIter.next', 'current.deletionInfo.rangeCovering', 'rt.deletionTime', '.', 'rt.deletionTime', 'activeDeletion.isLive', 'BTreeRow.emptyDeletedRow', 'Row.Deletion.regular', 'row.filter']
['unfilteredIterator', 'ColumnFilter.all', 'metadata']
['unfilteredIterator', 'holder']
['staticRow', 'slices.size', 'current.deletionInfo.getPartitionDeletion', 'UnfilteredRowIterators.noRowsIterator', 'slices.size', 'sliceIterator', 'slices.get']
['slice.start', 'slice.start', 'slice.end', 'slice.end', 'BTree.slice', 'desc', 'current.deletionInfo.rangeIterator', 'merge']
['current.deletionInfo.getPartitionDeletion', 'canHaveShadowedData']
['slices.size', 'endOfData', 'slices.size', 'sliceIterator', 'slices.get', 'currentSlice.hasNext', 'currentSlice.next']
['unfilteredIterator', 'iterator.hasNext', 'endOfData', 'iterator.next']
['sliceIterator']
[None]
['sliceableUnfilteredIterator', 'ColumnFilter.all']
['iterator.metadata', 'iterator.columns', 'iterator.isReverseOrder', 'BTree.builder', 'builder.auto', 'MutableDeletionInfo.builder', 'iterator.partitionLevelDeletion', 'iterator.hasNext', 'iterator.next', 'unfiltered.kind', 'builder.add', 'deletionBuilder.add', 'builder.reverse', 'builder.build', 'deletionBuilder.build', 'iterator.staticRow', 'iterator.stats']
['rows.metadata', 'rows.columns', 'rows.isReverseOrder', 'BTree.builder', 'builder.auto', 'rows.hasNext', 'rows.next', 'builder.add', 'builder.reverse', 'rows.staticRow', 'builder.build', 'EncodingStats.Collector.collect', 'BTree.iterator']
['sb.append', 'String.format', 'metadata.getKeyValidator', '.', 'partitionKey', '.', 'columns', 'staticRow', 'sb.append', '.', 'staticRow', '.', 'sb.append', '.', 'row.toString', 'sb.toString']
['BTree.size', 'holder']
['BTree.<', 'holder']
['holder', 'BTree.isEmpty', 'BTree.findByIndex', 'BTree.size']
[None]
[None]
[None]
[None]
[None]
['size', 'get', 'bb.remaining']
['size', 'get', 'digest.update', 'bb.duplicate', 'FBUtilities.updateWithByte', 'kind', '.']
['ObjectSizes.sizeOnHeapOf']
['ObjectSizes.sizeOnHeapExcludingData']
['size', 'Objects.hashCode', 'get', 'Objects.hashCode', 'kind']
['.', 'that.kind', '.', 'that.size', 'size', 'Objects.equals', '.', 'that.get']
['String.format', 'System.currentTimeMillis', 'commitLog.sync', 'syncComplete.signalAll', 'System.currentTimeMillis', 'NoSpamLogger.log', 'String.format', 'String.format', 'haveWork.tryAcquire', 'haveWork.drainPermits', 'CommitLog.handleCommitError', 'haveWork.tryAcquire', 'thread.start']
['System.currentTimeMillis', 'commitLog.sync', 'syncComplete.signalAll', 'System.currentTimeMillis', 'NoSpamLogger.log', 'String.format', 'String.format', 'haveWork.tryAcquire', 'haveWork.drainPermits', 'CommitLog.handleCommitError', 'haveWork.tryAcquire']
['maybeWaitForSync', 'written.incrementAndGet']
[None]
['syncComplete.register', 'haveWork.release']
['haveWork.release']
['haveWork.availablePermits', 'haveWork.release', 'haveWork.availablePermits', 'haveWork.acquire', 'start']
['thread.join']
['written.get']
['pending.get']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['cfs.getTracker', '.', 'sstables.isEmpty', 'CompactionManager.instance.submitBackground']
['Iterables.filter', 'sstable.isMarkedSuspect']
['sstable.isMarkedSuspect']
['CompactionManager.instance.getRateLimiter', 'scanners.add', 'sstable.getScanner', '.', 't.addSuppressed']
[None]
['getClass', '.']
['removeSSTable', 'addSSTable']
[None]
[None]
['scanner.close', 'JVMStabilityInspector.inspectThrowable', 't.addSuppressed', 'Throwables.propagate']
['getScanners']
['System.currentTimeMillis', 'sstable.getCreationTimeFor', 'sstable.getEstimatedDroppableTombstoneRatio', 'cfs.getOverlappingSSTables', 'Collections.singleton', 'overlaps.isEmpty', 'CompactionController.getFullyExpiredSSTables', '.', 'Collections.singleton', 'sstable.getIndexSummarySize', 'sstable.estimatedKeys', 'overlaps.size', 'ranges.add', 'overlap.first.getToken', 'overlap.last.getToken', 'sstable.estimatedKeysForRanges', 'sstable.getEstimatedColumnCount', '.', 'sstable.getEstimatedColumnCount', '.', 'sstable.getEstimatedColumnCount', '.']
['options.get', 'Float.parseFloat', 'String.format', 'String.format', 'options.get', 'Long.parseLong', 'String.format', 'String.format', 'options.get', 'unchecked.equalsIgnoreCase', 'unchecked.equalsIgnoreCase', 'String.format', 'options.get', 'compactionEnabled.equalsIgnoreCase', 'compactionEnabled.equalsIgnoreCase', 'String.format', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove']
['options.get', 'Boolean.parseBoolean']
['Collections.sort', 'currGroup.add', 'currGroup.size', 'groupedSSTables.add', 'currGroup.size', 'groupedSSTables.add']
['SimpleSSTableMultiWriter.create']
[None]
['sortByProximity']
['Collections.sort', 'compareEndpoints']
['compareEndpoints']
[None]
['hasRemoteNode', 'hasRemoteNode', 'hasRemoteNode']
['DatabaseDescriptor.getLocalDataCenter', 'localDc.equals', 'getDatacenter']
['fun.isAggregate', 'factories.doesAggregation', 'fun.columnName', 'factories.getColumnNames', 'fun.returnType', 'SelectionColumnMapping.newMapping', 'factory.addColumnMapping', 'tmpMapping.getMappings', '.', '.', 'mapping.addMapping', 'mapping.addMapping', 'tmpMapping.getMappings', '.', 'Iterables.concat', 'fun.getFunctions', 'factories.getFunctions', 'fun.isAggregate', 'factories.newInstances', 'factories.newInstances', 'factories.containsWritetimeSelectorFactory', 'factories.containsTTLSelectorFactory', 'fun.isAggregate', 'factories.doesAggregation']
['fun.columnName', 'factories.getColumnNames']
['fun.returnType']
['SelectionColumnMapping.newMapping', 'factory.addColumnMapping', 'tmpMapping.getMappings', '.', '.', 'mapping.addMapping', 'mapping.addMapping', 'tmpMapping.getMappings', '.']
['Iterables.concat', 'fun.getFunctions', 'factories.getFunctions']
['fun.isAggregate', 'factories.newInstances', 'factories.newInstances']
['factories.containsWritetimeSelectorFactory']
['factories.containsTTLSelectorFactory']
['fun.isAggregate', 'factories.doesAggregation']
['fun.returnType']
['.', 'fun.name', '.', '.', '.', '.']
[None]
[None]
['address.equals', 'address.equals', 'address.equals', 'address.equals', 'getDatacenter', 'getDatacenter', 'getDatacenter', 'addressDatacenter.equals', 'addressDatacenter.equals', 'addressDatacenter.equals', 'addressDatacenter.equals', 'getRack', 'getRack', 'getRack', 'addressRack.equals', 'addressRack.equals', 'addressRack.equals', 'addressRack.equals']
['values']
['getColumnDefs', '.']
['getColumnDefs', '.']
[None]
['Slice.Bound.create']
['Slice.Bound.create']
['Slice.Bound.create']
['Slice.Bound.create']
['.', 'cfs.metadata.comparator.make']
[None]
[None]
[None]
['.', 'ColumnIdentifier.getInterned']
[None]
['ct.valueComparator', 'ct.nameComparator']
['ct.nameComparator']
['cfs.metadata.getColumnDefinition', 'ColumnIdentifier.getInterned', 'forValues', 'forKeys', '.', 'bb']
['columns.isEmpty', 'ColumnFilter.all', 'ColumnFilter.selectionBuilder', 'filter.add', 'cfs.metadata.getColumnDefinition', 'filter.build']
['Slice.make', 'Slices.with']
['DataLimits.cqlLimits', 'limits.forPaging']
[None]
['SinglePartitionReadCommand.create', 'makeColumnFilter', 'makeLimits', 'makeFilter']
['sliceBuilder.add']
['sliceBuilder.build']
['SinglePartitionReadCommand.create', 'makeColumnFilter', 'makeLimits', 'makeFilter']
['makeKey']
['makeKey']
['makeKey']
['makeKey']
['cfs.getPartitioner', '.', '.', 'cfs.getPartitioner', '.', '.', 'makeColumnFilter', 'makeLimits', 'makeFilter', 'Optional.empty']
['CFMetaData.serializePartitionKey', 'metadata.getKeyValidatorAsClusteringComparator', '.', 'metadata.decorateKey']
['makeRequests']
['makeRequests', 'command.copy', '.']
['StorageProxy.canDoLocalRequest', 'traceState.trace', 'readCommand.isDigestQuery', 'logger.trace', 'readCommand.isDigestQuery', 'readCommand.createMessage', 'MessagingService.instance', '.', 'MessagingService.instance', '.', 'logger.trace', 'readCommand.isDigestQuery', 'StageManager.getStage', '.']
[None]
[None]
[None]
['handler.get']
['Keyspace.open', 'command.metadata', 'StorageProxy.getLiveSortedEndpoints', 'command.partitionKey', 'command.metadata', '.', 'consistencyLevel.filterForQuery', 'consistencyLevel.assureSufficientLiveNodes', 'Tracing.trace', 'ReadRepairMetrics.attempted.mark', 'keyspace.getColumnFamilyStore', 'command.metadata', 'retry.equals', 'consistencyLevel.blockFor', 'allReplicas.size', 'targetReplicas.size', 'allReplicas.size', 'allReplicas.get', 'targetReplicas.size', 'targetReplicas.contains', 'targetReplicas.contains', 'targetReplicas.add', 'retry.equals']
['makeDataRequests', 'targetReplicas.subList', 'targetReplicas.size', 'makeDigestRequests', 'targetReplicas.subList', 'targetReplicas.size']
[None]
[None]
['targetReplicas.subList', 'targetReplicas.size', 'initialReplicas.size', 'makeDataRequests', 'initialReplicas.subList', 'initialReplicas.size', 'makeDigestRequests', 'initialReplicas.subList', 'initialReplicas.size', 'makeDataRequests', 'initialReplicas.subList', 'initialReplicas.size', 'makeDigestRequests', 'initialReplicas.subList', 'initialReplicas.size']
['TimeUnit.MILLISECONDS.toNanos', 'command.getTimeout', 'handler.await', 'handler.resolver.isDataPresent', 'command.copy', '.', 'Iterables.getLast', 'traceState.trace', 'logger.trace', 'MessagingService.instance', '.', 'MessagingService.instance', '.', 'retryCommand.createMessage', 'cfs.metric.speculativeRetries.inc']
['targetReplicas.subList', 'targetReplicas.size']
[None]
[None]
['makeDataRequests', 'targetReplicas.subList', 'targetReplicas.size', 'targetReplicas.size', 'makeDigestRequests', 'targetReplicas.subList', 'targetReplicas.size', 'cfs.metric.speculativeRetries.inc']
[None]
['primaryKeyLivenessInfo', '.', 'Iterables.any', 'cells', 'cell.isLive']
['clustering']
['FBUtilities.updateWithByte', 'kind', '.', 'clustering', '.', 'deletion', '.', 'primaryKeyLivenessInfo', '.', 'cd.digest']
['clustering', 'clustering.size', 'clustering.get', 'metadata.comparator.subtype', '.', 'primaryKeyLivenessInfo', '.', 'deletion', '.', '.', 'cd.validate']
['toString']
['sb.append', 'sb.append', '.', 'primaryKeyLivenessInfo', 'deletion', '.', 'sb.append', '.', 'deletion', 'sb.append', 'sb.append', '.', 'clustering', '.', '.', 'sb.append', 'cd.column', '.', 'sb.append', 'complexData.complexDeletion', '.', 'sb.append', '.', 'cd.column', '.', '.', 'complexData.complexDeletion', 'sb.append', '.', 'cd.column', '.', 'sb.append', '.', 'cell.column', 'cell.isTombstone', 'sb.append', 'sb.append', 'cell.column', '.', 'cell.value', 'cd.column', 'sb.append', '.', 'cd.column', 'sb.append', 'sb.append', '.', '.', 'ct.valueComparator', '.', 'cell.value', 'ct.nameComparator', '.', 'cell.path', '.', 'sb.append', 'sb.toString']
['.', '.', 'that.clustering', '.', '.', 'that.primaryKeyLivenessInfo', '.', '.', 'that.deletion', 'Iterables.elementsEqual']
['Objects.hash', 'clustering', 'columns', 'primaryKeyLivenessInfo', 'deletion', 'cd.hashCode']
['DatabaseDescriptor.getCounterWriteRpcTimeout', 'DatabaseDescriptor.getWriteRpcTimeout', 'TimeUnit.MILLISECONDS.toNanos', 'System.nanoTime', 'condition.await', 'totalBlockFor', 'ackCount', 'totalBlockFor', 'totalEndpoints', 'ackCount', 'totalBlockFor']
['consistencyLevel.blockFor', 'pendingEndpoints.size']
['naturalEndpoints.size', 'pendingEndpoints.size']
[None]
[None]
[None]
['consistencyLevel.assureSufficientLiveNodes', 'Iterables.filter', 'Iterables.concat']
['condition.signalAll', 'callback.run']
['logger.trace', 'waitingFor', 'failuresUpdater.incrementAndGet', 'totalBlockFor', 'totalEndpoints', 'signal']
['nextIndexUpdater.compareAndSet', 'presentCountUpdater.compareAndSet', 'presentCountUpdater.compareAndSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['endpoints.isEmpty', 'UUIDGen.getTimeUUID', 'sessions.put', 'session.getId', 'gossiper.register', 'failureDetector.registerFailureDetectionEventListener', 'session.addListener', 'failureDetector.unregisterFailureDetectionEventListener', 'gossiper.unregister', 'sessions.remove', 'session.getId', 'MoreExecutors.sameThreadExecutor', 'session.start']
['failureDetector.unregisterFailureDetectionEventListener', 'gossiper.unregister', 'sessions.remove', 'session.getId']
['sessions.values', 'session.forceShutdown', 'parentRepairSessions.clear']
['ss.getRangeToAddressMap', 'ss.getLocalRanges', 'range.contains', 'range.intersects', 'replicaSets.containsKey', 'Collections.emptySet', 'replicaSets.get', 'neighbors.remove', 'FBUtilities.getBroadcastAddress', 'dataCenters.isEmpty', 'ss.getTokenMetadata', '.', '.', 'Sets.newHashSet', 'topology.getDatacenterEndpoints', 'dcEndpointsMap.get', 'dcEndpoints.addAll', 'Sets.intersection', 'hosts.isEmpty', 'InetAddress.getByName', 'host.trim', 'endpoint.equals', 'FBUtilities.getBroadcastAddress', 'neighbors.contains', 'specifiedHost.add', 'specifiedHost.contains', 'FBUtilities.getBroadcastAddress', 'specifiedHost.size', 'String.format', 'specifiedHost.remove', 'FBUtilities.getBroadcastAddress']
['System.currentTimeMillis', 'registerParentRepairSession', 'options.getRanges', 'options.isIncremental', 'options.isGlobal', 'endpoints.size', 'Collections.synchronizedSet', 'prepareLatch.countDown', 'status.set', 'failedNodes.add', 'from.getHostAddress', 'prepareLatch.countDown', 'columnFamilyStores.size', 'cfIds.add', 'FailureDetector.instance.isAlive', 'options.getRanges', 'options.isIncremental', 'options.isGlobal', 'message.createMessage', 'MessagingService.instance', '.', 'TimeUnit.HOURS.toMillis', 'status.set', 'failedNodes.add', 'neighbour.getHostAddress', 'prepareLatch.countDown', 'prepareLatch.await', 'parentRepairSessions.remove', 'failedNodes.toString', 'status.get', 'parentRepairSessions.remove', 'failedNodes.toString']
['prepareLatch.countDown']
[None]
['status.set', 'failedNodes.add', 'from.getHostAddress', 'prepareLatch.countDown']
['parentRepairSessions.put']
['parentRepairSessions.entrySet', 'entry.getValue', '.', 'entry.getKey', '.', 'repairing.addAll']
['neighbors.size', 'tasks.add', 'tasks.add', 'doAntiCompaction', 'Futures.successfulAsList']
['parentRepairSessions.get']
['parentRepairSessions.remove']
['getParentRepairSession', 'logger.info', 'removeParentRepairSession', 'Futures.immediateFuture', 'Collections.emptyList', 'prs.ranges.containsAll', 'successfulRanges.isEmpty', 'prs.columnFamilyStores.entrySet', 'prs.getAndReferenceSSTables', 'columnFamilyStoreEntry.getKey', 'columnFamilyStoreEntry.getValue', 'futures.add', 'CompactionManager.instance.submitAntiCompaction', 'Futures.successfulAsList', 'allAntiCompactionResults.addListener', 'removeParentRepairSession', 'MoreExecutors.sameThreadExecutor']
['removeParentRepairSession']
['sessions.get', 'session.validationComplete', 'session.syncComplete']
['.', 'existingSSTables.addAll', '.']
['sstableMap.get', 'sstables.iterator', 'ImmutableMap.builder', 'sstableIterator.hasNext', 'sstableIterator.next', '.', 'sstable.descriptor.filenameFor', 'sstableIterator.remove', 'sstable.tryRef', 'sstableIterator.remove', 'references.put', 'references.build']
[None]
[None]
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD']
['SchemaLoader.startGossiper', 'FBUtilities.getBroadcastAddress', 'InetAddress.getByName', 'StorageService.instance.getTokenMetadata', 'tmd.clearUnsafe', 'StorageService.instance.setTokens', 'Collections.singleton', 'tmd.partitioner.getRandomToken', 'tmd.updateNormalToken', 'tmd.partitioner.getMinimumToken', 'tmd.isMember']
['addTokens', 'Keyspace.open', '.', '.', 'expected.remove', 'FBUtilities.getBroadcastAddress', 'StorageService.instance.getLocalRanges', 'neighbors.addAll', 'ActiveRepairService.getNeighbors', 'assertEquals']
['StorageService.instance.getTokenMetadata', 'addTokens', 'Keyspace.open', '.', '.', 'Keyspace.open', '.', 'ars.getAddressRanges', '.', 'FBUtilities.getBroadcastAddress', 'expected.addAll', 'ars.getRangeAddresses', '.', 'tmd.cloneOnlyTokenMap', 'expected.remove', 'FBUtilities.getBroadcastAddress', 'StorageService.instance.getLocalRanges', 'neighbors.addAll', 'ActiveRepairService.getNeighbors', 'assertEquals']
['StorageService.instance.getTokenMetadata', 'addTokens', 'Keyspace.open', '.', '.', 'expected.remove', 'FBUtilities.getBroadcastAddress', 'tmd.cloneOnlyTokenMap', '.', 'Sets.newHashSet', 'topology.getDatacenterEndpoints', '.', 'DatabaseDescriptor.getLocalDataCenter', 'Sets.intersection', 'StorageService.instance.getLocalRanges', 'neighbors.addAll', 'ActiveRepairService.getNeighbors', 'Arrays.asList', 'DatabaseDescriptor.getLocalDataCenter', 'assertEquals']
['StorageService.instance.getTokenMetadata', 'addTokens', 'Keyspace.open', '.', '.', 'Keyspace.open', '.', 'ars.getAddressRanges', '.', 'FBUtilities.getBroadcastAddress', 'expected.addAll', 'ars.getRangeAddresses', '.', 'tmd.cloneOnlyTokenMap', 'expected.remove', 'FBUtilities.getBroadcastAddress', 'tmd.cloneOnlyTokenMap', '.', 'Sets.newHashSet', 'topology.getDatacenterEndpoints', '.', 'DatabaseDescriptor.getLocalDataCenter', 'Sets.intersection', 'StorageService.instance.getLocalRanges', 'neighbors.addAll', 'ActiveRepairService.getNeighbors', 'Arrays.asList', 'DatabaseDescriptor.getLocalDataCenter', 'assertEquals']
['StorageService.instance.getTokenMetadata', 'addTokens', 'Keyspace.open', '.', '.', 'Keyspace.open', '.', 'ars.getAddressRanges', '.', 'FBUtilities.getBroadcastAddress', 'expected.addAll', 'ars.getRangeAddresses', '.', 'tmd.cloneOnlyTokenMap', 'expected.remove', 'FBUtilities.getBroadcastAddress', 'Arrays.asList', 'FBUtilities.getBroadcastAddress', '.', 'expected.get', '.', 'assertEquals', 'expected.get', 'ActiveRepairService.getNeighbors', '.', '.', 'StorageService.instance.getLocalRanges', '.', '.']
['addTokens', 'Keyspace.open', '.', '.', 'Arrays.asList', 'ActiveRepairService.getNeighbors', 'StorageService.instance.getLocalRanges', '.', '.']
['StorageService.instance.getTokenMetadata', 'InetAddress.getByName', 'tmd.updateNormalToken', 'tmd.partitioner.getRandomToken', 'endpoints.add']
['assertInvalidThrowMessage', 'assertInvalidThrowMessage', 'assertInvalidThrowMessage', 'assertInvalidThrowMessage', 'execute', 'execute', 'execute', 'execute']
['createTable', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertInvalidSyntaxMessage', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row']
['createType', 'createTable', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertInvalidMessage']
['createTable', 'createFunction', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row']
['createTable', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'System.currentTimeMillis', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'execute', 'assertEquals', 'resultSet.size', 'resultSet.one', 'assertTrue', 'row.getInt', 'assertTrue', 'row.getInt', 'execute', 'assertEquals', 'resultSet.size', 'resultSet.one', 'assertTrue', 'row.getLong', 'assertTrue', 'row.getLong']
['createTable', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'execute', 'execute', 'assertInvalidSyntax', 'assertInvalidMessage', 'assertInvalidSyntax']
['createTable', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row']
['createTable', 'createFunction', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'assertColumnNames', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'format.setTimeZone', 'TimeZone.getTimeZone', 'format.parse', 'DateUtils.truncate', 'assertRows', 'execute', 'row', 'date.getTime', 'assertRows', 'execute', 'row', 'date.getTime', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createFunction', 'createFunctionOverload', 'createAggregate', 'shortFunctionName', 'assertLastSchemaChange', 'parseFunctionName', 'schemaChange', 'shortFunctionName', 'assertLastSchemaChange', 'parseFunctionName', 'createAggregateOverload', 'shortFunctionName', 'assertLastSchemaChange', 'parseFunctionName', 'schemaChange', 'assertLastSchemaChange', 'parseFunctionName']
['createFunction', 'createFunctionOverload', 'assertInvalidMessage', 'assertInvalidMessage', 'createAggregate', 'shortFunctionName', 'createAggregateOverload', 'shortFunctionName', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'execute', 'execute', 'execute', 'execute']
['createFunction', 'createAggregate', 'shortFunctionName', 'assertInvalidMessage', 'execute']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'row', 'execute', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'row', 'execute', 'assertInvalidMessage']
['createFunction', 'createFunction', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName']
['createFunction', 'createFunction', 'createFunction', 'createFunction', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName']
['createFunction', 'createFunction', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName', 'execute', 'shortFunctionName', 'shortFunctionName', 'execute']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertInvalidThrowMessage', 'assertInvalidThrowMessage', 'assertRows', 'execute', 'row']
['assertInvalidMessage', 'createFunction', 'assertInvalidMessage', 'shortFunctionName', 'execute']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'shortFunctionName', 'row', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createAggregate', 'shortFunctionName', 'assertRows', 'execute', 'row', 'execute', 'execute', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'shortFunctionName', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createFunction', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'row', 'execute', 'execute', 'execute', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createAggregate', 'shortFunctionName', 'assertRows', 'execute', 'row', 'execute', 'execute', 'assertInvalidMessage']
['execute', 'execute', 'createFunction', 'createAggregate', 'shortFunctionName', 'QueryProcessor.prepare', 'ClientState.forInternalCalls', 'assertNotNull', 'QueryProcessor.instance.getPrepared', 'execute', 'assertNull', 'QueryProcessor.instance.getPrepared', 'execute', 'shortFunctionName', 'QueryProcessor.prepare', 'ClientState.forInternalCalls', 'assertNotNull', 'QueryProcessor.instance.getPrepared', 'execute', 'assertNull', 'QueryProcessor.instance.getPrepared', 'execute']
['createFunction', 'createAggregate', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName']
['createFunction', 'createFunction', 'createFunction', 'createFunction', 'createFunction', 'assertInvalid', 'shortFunctionName', 'assertInvalid', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'createTable', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'createFunction', 'createAggregate', 'shortFunctionName', 'Schema.instance.getKSMetaData', 'keyspace', 'ksm.functions.get', '.', '.', 'parseFunctionName', 'UDAggregate.createBroken', 'f.name', 'f.argTypes', 'f.returnType', 'Schema.instance.setKeyspaceMetadata', 'ksm.withSwapped', 'ksm.functions.without', '.', 'f.name', 'f.argTypes', 'assertInvalidThrowMessage']
['createTable', 'execute', 'createFunction', 'createFunction', 'assertInvalidMessage', 'shortFunctionName', 'shortFunctionName']
['createTable', 'createIndex', 'execute', 'set', 'execute', 'set', 'execute', 'set', 'execute', 'set', 'createFunction', 'createFunction', 'assertInvalidMessage', 'parseFunctionName', 'parseFunctionName', 'createAggregate', 'parseFunctionName', 'parseFunctionName', 'assertRows', 'execute', 'shortFunctionName', 'row', 'assertRows', 'execute', 'row', 'set', 'assertInvalidMessage']
['createTable', 'createIndex', 'execute', 'list', 'execute', 'list', 'execute', 'list', 'execute', 'list', 'createFunction', 'createFunction', 'assertInvalidMessage', 'parseFunctionName', 'parseFunctionName', 'createAggregate', 'parseFunctionName', 'parseFunctionName', 'assertRows', 'execute', 'row', 'list', 'assertInvalidMessage']
['createTable', 'createIndex', 'execute', 'map', 'execute', 'map', 'execute', 'map', 'execute', 'map', 'createFunction', 'createFunction', 'assertInvalidMessage', 'parseFunctionName', 'parseFunctionName', 'createAggregate', 'parseFunctionName', 'parseFunctionName', 'assertRows', 'execute', 'row', 'map', 'assertInvalidMessage']
['createTable', 'createIndex', 'execute', 'tuple', 'execute', 'tuple', 'execute', 'tuple', 'execute', 'tuple', 'createFunction', 'createFunction', 'assertInvalidMessage', 'parseFunctionName', 'parseFunctionName', 'createAggregate', 'parseFunctionName', 'parseFunctionName', 'assertRows', 'execute', 'row', 'tuple', 'assertInvalidMessage']
['createType', 'createTable', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'assertInvalidMessage', 'parseFunctionName', 'parseFunctionName', 'createAggregate', 'parseFunctionName', 'parseFunctionName', 'assertRows', 'execute', 'row', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'shortFunctionName', 'row', 'createFunction', 'createFunction', 'createAggregate', 'shortFunctionName', 'shortFunctionName', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'createTable', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createFunction', 'createAggregate', 'shortFunctionName', 'assertRows', 'execute', 'shortFunctionName', 'row', 'createTable', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'Arrays.asList']
['resource.applicablePermissions']
[None]
[None]
[None]
[None]
[None]
['Collections.emptySet']
[None]
[None]
[None]
['state.hasKeyspaceAccess']
['Schema.instance.getKSMetaData', 'Schema.isSystemKeyspace', 'attrs.validate', 'attrs.getReplicationStrategyClass', 'attrs.getReplicationOptions', '.', 'attrs.getReplicationStrategyClass', 'attrs.asAlteredKeyspaceParams', 'params.validate', 'params.replication.klass.equals']
['Schema.instance.getKSMetaData', 'oldKsm.withSwapped', 'attrs.asAlteredKeyspaceParams', 'MigrationManager.announceKeyspaceUpdate', 'keyspace']
['state.hasColumnFamilyAccess', 'keyspace', 'columnFamily']
[None]
['validateColumnFamily', 'keyspace', 'columnFamily', 'meta.isView', 'meta.copy', '.', 'keyspace', 'rawColumnName.prepare', 'cfm.getColumnDefinition', 'View.findAll', 'keyspace', 'columnFamily', 'cfm.isDense', 'cfm.isCompound', 'cfm.clusteringColumns', '.', 'String.format', 'String.format', 'meta.isCounter', 'meta.getDroppedColumns', '.', 'String.format', 'validator.getType', 'type.isCollection', 'type.isMultiCell', 'cfm.isCompound', 'cfm.isSuper', 'cfm.getDroppedColumns', '.', 'dropped.type.isMultiCell', 'type.isCompatibleWith', 'String.format', 'dropped.type.asCQL3Type', 'cfm.addColumnDefinition', 'ColumnDefinition.staticDef', 'ColumnDefinition.regularDef', 'view.copy', 'viewCopy.metadata.addColumnDefinition', 'ColumnDefinition.regularDef', 'viewUpdates.add', 'String.format', 'columnFamily', 'def.isReversedType', 'validator.getType', '.', 'ReversedType.getInstance', 'validator.getType', 'validator.getType', 'validateAlter', 'cfm.addOrReplaceColumnDefinition', 'def.withNewType', 'view.includes', 'view.copy', 'view.metadata.getColumnDefinition', 'viewDef.isReversedType', 'validator.getType', '.', 'ReversedType.getInstance', 'validator.getType', 'validator.getType', 'validateAlter', 'viewCopy.metadata.addOrReplaceColumnDefinition', 'viewDef.withNewType', 'viewUpdates.add', 'cfm.isCQLTable', 'String.format', 'columnFamily', 'String.format', 'cfm.partitionColumns', 'columnDef.name.equals', 'cfm.removeColumnDefinition', 'cfm.recordColumnDrop', 'cfm.getIndexes', 'allIndexes.isEmpty', 'Keyspace.openAndGetStore', 'store.indexManager.getDependentIndexes', 'dependentIndexes.isEmpty', 'String.format', 'dependentIndexes.stream', '.', '.', 'Collectors.joining', 'view.includes', 'builder.append', 'builder.append', 'String.format', 'columnName.toString', 'keyspace', 'builder.toString', 'attrs.validate', 'attrs.asAlteredTableParams', 'Iterables.isEmpty', 'meta.isCounter', 'cfm.params', 'renames.entrySet', 'entry.getKey', '.', 'entry.getValue', '.', 'cfm.renameColumn', 'view.includes', 'view.copy', 'entry.getKey', '.', 'entry.getValue', '.', 'viewCopy.renameColumn', 'viewUpdates.add', 'MigrationManager.announceColumnFamilyUpdate', 'MigrationManager.announceViewUpdate', 'keyspace', 'columnFamily']
['String.format', 'cfm.getKeyValidatorAsClusteringComparator', '.', 'def.position', 'validatorType.isValueCompatibleWith', 'String.format', 'currentType.asCQL3Type', 'validatorType.asCQL3Type', 'cfm.isCQLTable', 'String.format', 'cfm.comparator.subtype', 'def.position', 'validatorType.isCompatibleWith', 'String.format', 'oldType.asCQL3Type', 'validatorType.asCQL3Type', 'validatorType.isValueCompatibleWith', 'String.format', 'def.type.asCQL3Type', 'validatorType.asCQL3Type']
['String.format']
['View.findBaseTable', 'keyspace', 'columnFamily', 'state.hasColumnFamilyAccess', 'keyspace']
[None]
['validateColumnFamily', 'keyspace', 'columnFamily', 'meta.isView', 'Schema.instance.getView', '.', 'keyspace', 'columnFamily', 'attrs.validate', 'attrs.asAlteredTableParams', 'viewCopy.metadata.params', 'MigrationManager.announceViewUpdate', 'keyspace', 'columnFamily']
['String.format']
['bytes.position', 'bytes.limit', 'bytes.get', 'Byte.toString']
[None]
['strictnessOfLessThan', 'searchIn.size', 'compareAsymmetric', 'searchIn.get', 'selectBoundary']
[None]
[None]
['.']
['.']
[None]
[None]
[None]
['Iterables.concat', 'timestamp.getFunctions', 'timeToLive.getFunctions', 'timestamp.getFunctions', 'timeToLive.getFunctions', 'Collections.emptySet']
[None]
[None]
['timestamp.bindAndGet', 'LongType.instance.validate', 'LongType.instance.compose']
['timeToLive.bindAndGet', 'Int32Type.instance.validate', 'Int32Type.instance.compose', 'String.format']
['timestamp.collectMarkerSpecification', 'timeToLive.collectMarkerSpecification']
['timestamp.prepare', 'timestampReceiver', 'timeToLive.prepare', 'timeToLiveReceiver']
[None]
[None]
['CBUtil.readValue', 'b.remaining', 'b.get']
['CBUtil.writeValue']
['CBUtil.sizeOfValue']
[None]
[None]
[None]
[None]
[None]
['state.ensureHasPermission', 'String.format', 'state.getUser', '.']
['CFMetaData.compile', '.', '.', 'TimeUnit.DAYS.toSeconds', 'String.format']
['KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of']
['CBUtil.readValue', 'b.remaining', 'b.get']
['CBUtil.writeValue']
['CBUtil.sizeOfValue']
['negotiator.evaluateResponse', 'negotiator.isComplete', 'negotiator.getAuthenticatedUser', 'queryState.getClientState', '.', 'ErrorMessage.fromException']
['CBUtil.readValue', 'b.remaining', 'b.get']
['CBUtil.writeValue']
['CBUtil.sizeOfValue']
[None]
['Collections.emptyList']
['Collections.<']
['decodedMutations.size', 'encodedMutations.size']
['batch.encodedMutations.isEmpty', 'UUIDSerializer.serializer.serializedSize', 'sizeof', 'sizeofUnsignedVInt', 'batch.decodedMutations.size', 'Mutation.serializer.serializedSize', 'sizeofUnsignedVInt']
['batch.encodedMutations.isEmpty', 'UUIDSerializer.serializer.serialize', 'out.writeLong', 'out.writeUnsignedVInt', 'batch.decodedMutations.size', 'out.writeUnsignedVInt', 'Mutation.serializer.serializedSize', 'Mutation.serializer.serialize']
['UUIDSerializer.serializer.deserialize', 'in.readLong', 'createRemote', 'readEncodedMutations', 'createLocal', 'decodeMutations']
['in.readUnsignedVInt', 'mutations.add', 'ByteBufferUtil.readWithVIntLength']
['in.readUnsignedVInt', 'mutations.add', 'Mutation.serializer.deserialize']
['body.readByte', 'body.readUnsignedShort', 'body.readByte', 'queryOrIds.add', 'CBUtil.readLongString', 'queryOrIds.add', 'MD5Digest.wrap', 'CBUtil.readBytes', 'variables.add', 'CBUtil.readValueList', 'QueryOptions.codec.decode', 'toType']
['msg.queryOrIdList.size', 'dest.writeByte', 'fromType', 'dest.writeShort', 'msg.queryOrIdList.get', 'dest.writeByte', 'CBUtil.writeLongString', 'CBUtil.writeBytes', 'CBUtil.writeValueList', 'msg.values.get', 'CBUtil.writeConsistencyLevel', 'msg.options.getConsistency', 'QueryOptions.codec.encode']
['msg.queryOrIdList.size', 'msg.queryOrIdList.get', 'CBUtil.sizeOfLongString', 'CBUtil.sizeOfBytes', 'CBUtil.sizeOfValueList', 'msg.values.get', 'CBUtil.sizeOfConsistencyLevel', 'msg.options.getConsistency', 'QueryOptions.codec.encodedSize']
[None]
[None]
['isTracingRequested', 'UUIDGen.getTimeUUID', 'state.prepareTracingSession', 'state.traceNextQuery', 'state.createTracingSession', 'ImmutableMap.builder', 'options.getConsistency', 'builder.put', 'options.getConsistency', '.', 'options.getSerialConsistency', 'builder.put', 'options.getSerialConsistency', '.', 'Tracing.instance.begin', 'state.getClientAddress', 'builder.build', 'ClientState.getCQLQueryHandler', 'queryOrIdList.size', 'queryOrIdList.size', 'queryOrIdList.get', 'QueryProcessor.parseStatement', 'handler.getPrepared', 'values.get', 'queryValues.size', 'p.statement.getBoundTerms', 'String.format', 'p.statement.getBoundTerms', 'queryValues.size', 'prepared.add', 'BatchQueryOptions.withPerStatementVariables', 'prepared.size', 'prepared.size', 'prepared.get', 'batchOptions.prepareStatement', 'statements.add', 'Attributes.none', 'handler.processBatch', 'getCustomPayload', 'response.setTracingId', 'JVMStabilityInspector.inspectThrowable', 'ErrorMessage.fromException', 'Tracing.instance.stopSession']
['sb.append', 'queryOrIdList.size', 'sb.append', 'sb.append', '.', '.', 'values.get', '.', '.', 'queryOrIdList.get', 'sb.append', '.', 'options.getConsistency', 'sb.toString']
['BatchlogManager.remove']
['BatchlogManager.store', 'MessagingService.instance', '.', 'WriteResponse.createMessage']
['BigDecimal.valueOf', 'identityDistribution.next']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['version.compareTo', 'version.charAt', 'current_version.charAt']
['isCompatible', 'version.charAt', 'current_version.charAt']
['ColumnFilter.all', 'Iterators.singletonIterator', 'fullRange']
['makeBounds', '.']
['sstable.getPositionsForRanges', 'positions.isEmpty', 'ColumnFilter.all', 'makeBounds', '.']
['tokenRanges.size', 'Range.normalize', 'addRange', 'Range.makeRowRange']
['addRange', 'dataRange.keyRange']
[None]
['requested.right.compareTo', 'requested.rightBoundary', 'minRight', 'isEmpty', 'boundsList.add', 'AbstractBounds.bounds', 'requested.left.compareTo', 'requested.leftBoundary', 'maxLeft', 'isEmpty', 'boundsList.add', 'AbstractBounds.bounds', 'requested.left.compareTo', 'requested.right.isMinimum', 'requested.leftBoundary', 'requested.rightBoundary', 'maxLeft', 'requested.right.isMinimum', 'minRight', 'isEmpty', 'boundsList.add', 'AbstractBounds.bounds']
['sstable.getIndexScanPosition', 'ifile.seek', 'ifile.isEOF', 'ifile.getFilePointer', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'indexDecoratedKey.compareTo', 'currentRange.contains', 'RowIndexEntry.Serializer.readPosition', 'ifile.seek', 'dfile.seek', 'RowIndexEntry.Serializer.skip', 'sstable.markSuspect', 'sstable.getFilename']
['isClosed.compareAndSet', 'FileUtils.close', 'sstable.markSuspect', 'sstable.getFilename']
['dfile.length']
['dfile.getFilePointer']
['sstable.toString']
[None]
[None]
['createIterator', 'iterator.hasNext']
['createIterator', 'iterator.next']
[None]
[None]
['currentRange.contains', 'rangeIterator.hasNext', 'endOfData', 'rangeIterator.next', 'seekToCurrentRangeStart', 'ifile.isEOF', 'endOfData', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'rowIndexEntrySerializer.deserialize', 'ifile.isEOF', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'rowIndexEntrySerializer.deserialize', 'currentRange.contains', 'dfile.seek', 'currentEntry.headerOffset', 'partitionKey', 'dataRange.clusteringIndexFilter', 'partitionKey', 'filter.filter', 'sstable.iterator', 'partitionKey', 'filter.isReversed', 'sstable.markSuspect', 'sstable.getFilename', 'sstable.markSuspect', 'sstable.getFilename']
['dfile.seek', 'currentEntry.headerOffset', 'partitionKey', 'dataRange.clusteringIndexFilter', 'partitionKey', 'filter.filter', 'sstable.iterator', 'partitionKey', 'filter.isReversed', 'sstable.markSuspect', 'sstable.getFilename']
['getClass', '.']
[None]
[None]
['sstable.getFilename']
[None]
[None]
[None]
[None]
['Multimaps.unmodifiableMultimap']
['forwardMap.clear', 'reverseMap.clear']
['forwardMap.containsKey']
['reverseMap.containsKey']
['forwardMap.entrySet']
['forwardMap.get']
['forwardMap.isEmpty']
['forwardMap.keySet']
['forwardMap.put', 'reverseMap.remove', 'reverseMap.put']
['m.entrySet', 'put', 'entry.getKey', 'entry.getValue']
['forwardMap.remove', 'reverseMap.remove']
['reverseMap.removeAll', 'forwardMap.remove']
['forwardMap.size']
['reverseMap.keys']
['reverseMap.keySet']
['lock.lock', 'unblocked.signalAll', 'lock.unlock']
['lock.lock', 'unblocked.awaitUninterruptibly', 'lock.unlock']
[None]
['String.format']
['String.format']
['Math.max', 'Math.min']
['bytes.remaining', 'bytes.get', 'bytes.position']
['bytes.remaining', 'bytes.remaining', 'String.format', 'bytes.remaining']
['value.toString']
[None]
['isStart']
[None]
[None]
['live']
['expiring', 'FBUtilities.nowInSeconds']
['expiring']
[None]
['tombstone']
[None]
['isTombstone', 'column.cellValueType', '.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['value.hasRemaining', 'allocator.clone', 'path.copy']
['isCounterCell', 'CounterContext.instance', '.', 'value', 'value']
['isLive', 'purger.shouldPurge', 'isExpiring', 'BufferCell.tombstone']
['isTombstone']
['TypeSizes.sizeof', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'value.remaining', 'path.dataSize']
['ObjectSizes.sizeOnHeapExcludingData', 'path.unsharedHeapSizeExcludingData']
['cell.value', '.', 'cell.isTombstone', 'cell.isExpiring', 'rowLiveness.isEmpty', 'cell.timestamp', 'rowLiveness.timestamp', 'rowLiveness.isExpiring', 'cell.ttl', 'rowLiveness.ttl', 'cell.localDeletionTime', 'rowLiveness.localExpirationTime', 'out.writeByte', 'header.writeTimestamp', 'cell.timestamp', 'header.writeLocalDeletionTime', 'cell.localDeletionTime', 'header.writeTTL', 'cell.ttl', 'cell.column', '.', 'cell.column', '.', '.', 'cell.path', 'header.getType', '.', 'cell.value', 'cell.column']
['in.readUnsignedByte', 'rowLiveness.timestamp', 'header.readTimestamp', 'rowLiveness.localExpirationTime', 'header.readLocalDeletionTime', 'rowLiveness.ttl', 'header.readTTL', 'column.isComplex', 'column.cellPathSerializer', '.', 'column.type.isCounter', 'helper.canSkipValue', 'helper.canSkipValue', 'header.getType', '.', 'header.getType', '.', 'helper.maybeClearCounterValue']
['cell.value', '.', 'cell.isTombstone', 'cell.isExpiring', 'rowLiveness.isEmpty', 'cell.timestamp', 'rowLiveness.timestamp', 'rowLiveness.isExpiring', 'cell.ttl', 'rowLiveness.ttl', 'cell.localDeletionTime', 'rowLiveness.localExpirationTime', 'header.timestampSerializedSize', 'cell.timestamp', 'header.localDeletionTimeSerializedSize', 'cell.localDeletionTime', 'header.ttlSerializedSize', 'cell.ttl', 'cell.column', '.', 'cell.column', '.', '.', 'cell.path', 'header.getType', '.', 'cell.value', 'cell.column']
['in.readUnsignedByte', 'header.skipTimestamp', 'header.skipLocalDeletionTime', 'header.skipTTL', 'column.isComplex', 'column.cellPathSerializer', '.', 'header.getType', '.']
['channel.size']
[None]
[None]
['allocate', 'takeFromPool']
['allocate', 'takeFromPool']
['allocate', 'maybeTakeFromPool']
['ByteBuffer.allocate', 'ByteBuffer.allocateDirect']
['maybeTakeFromPool', 'logger.isTraceEnabled', 'logger.trace', 'localPool.get', '.']
['logger.isTraceEnabled', 'logger.trace', 'localPool.get', '.', 'localPool.get', '.']
['buffer.hasArray', 'localPool.get', '.']
['localPool.get', '.', 'globalPool.reset']
['localPool.get']
['localPool.get']
['globalPool.debug.check']
['globalPool.sizeInBytes']
['allChunks.add']
[None]
[None]
['chunks.poll', 'allocateMoreChunks', 'chunks.poll']
['memoryUsage.get', 'noSpamLogger.info', 'memoryUsage.compareAndSet', 'allocateDirectAligned', 'chunk.acquire', 'macroChunks.add', 'chunk.get', 'chunks.add', 'debug.register']
['chunks.add']
['memoryUsage.get']
['chunks.isEmpty', 'chunks.poll', '.', 'macroChunks.isEmpty', 'macroChunks.poll', '.', 'memoryUsage.set']
['globalPool.get', 'addChunk']
['chunk.acquire', '.', '.', '.', '.', '.']
['chunk.get']
['metrics.misses.mark', 'BufferPool.allocate']
['Chunk.getParentChunk', 'FileUtils.clean', 'chunk.free', 'chunk.recycle', 'removeFromLocalQueue', 'chunk.tryRecycle']
[None]
['.']
['.']
['localPoolRefQueue.remove', 'localPoolReferences.remove', 'EXEC.execute']
['MemoryUtil.pageSize', 'Integer.bitCount', 'ByteBuffer.allocateDirect', 'MemoryUtil.getAddress', 'buffer.limit']
[None]
['tryRecycle']
['isFree', 'freeSlotsUpdater.compareAndSet', 'recycle']
['globalPool.recycle']
['MemoryUtil.getAttachment']
['MemoryUtil.setAttachment', 'MemoryUtil.setAttachment']
['MemoryUtil.getAttachment']
['getParentChunk', 'parent.free', 'FileUtils.clean']
[None]
[None]
[None]
[None]
['Long.bitCount', 'unit']
['unit', 'Long.numberOfTrailingZeros', 'freeSlotsUpdater.compareAndSet', 'get']
['slab.limit', 'slab.position', 'setAttachment', 'slab.slice']
['BufferPool.roundUp', 'unit']
['releaseAttachment', 'MemoryUtil.getAddress', 'capacity', 'roundUp', 'buffer.capacity', 'capacity', 'freeSlotsUpdater.compareAndSet']
['String.format', 'Long.toBinaryString', 'capacity', 'free']
['roundUp']
[None]
['CQL3Type.Native.values', 'functions.add', 'makeToBlobFunction', 'type.getType', 'functions.add', 'makeFromBlobFunction', 'type.getType', 'functions.add', 'functions.add']
['fromType.asCQL3Type', 'parameters.get']
['parameters.get']
['toType.asCQL3Type', 'parameters.get', 'toType.validate', 'String.format', 'ByteBufferUtil.bytesToHex', 'toType.asCQL3Type']
['parameters.get', 'toType.validate', 'String.format', 'ByteBufferUtil.bytesToHex', 'toType.asCQL3Type']
['parameters.get']
['parameters.get']
['ByteBuffer.wrap', 'Hex.hexToBytes', 'String.format']
['parsedString.startsWith', 'String.format', 'BytesType.instance.fromString', 'parsedString.substring', 'String.format', 'exc.getMessage']
['ByteBufferUtil.bytesToHex']
[None]
[None]
[None]
[None]
['BytesType.instance.fromString']
['BytesType.instance.fromString']
[None]
['finalize']
[None]
['send_login', 'recv_login']
['args.setAuth_request', 'sendBase']
['receiveBase']
['send_set_keyspace', 'recv_set_keyspace']
['args.setKeyspace', 'sendBase']
['receiveBase']
['send_get', 'recv_get']
['args.setKey', 'args.setColumn_path', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_get_slice', 'recv_get_slice']
['args.setKey', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_get_count', 'recv_get_count']
['args.setKey', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_multiget_slice', 'recv_multiget_slice']
['args.setKeys', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_multiget_count', 'recv_multiget_count']
['args.setKeys', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_get_range_slices', 'recv_get_range_slices']
['args.setColumn_parent', 'args.setPredicate', 'args.setRange', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_get_paged_slice', 'recv_get_paged_slice']
['args.setColumn_family', 'args.setRange', 'args.setStart_column', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_get_indexed_slices', 'recv_get_indexed_slices']
['args.setColumn_parent', 'args.setIndex_clause', 'args.setColumn_predicate', 'args.setConsistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_insert', 'recv_insert']
['args.setKey', 'args.setColumn_parent', 'args.setColumn', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_add', 'recv_add']
['args.setKey', 'args.setColumn_parent', 'args.setColumn', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_cas', 'recv_cas']
['args.setKey', 'args.setColumn_family', 'args.setExpected', 'args.setUpdates', 'args.setSerial_consistency_level', 'args.setCommit_consistency_level', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_remove', 'recv_remove']
['args.setKey', 'args.setColumn_path', 'args.setTimestamp', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_remove_counter', 'recv_remove_counter']
['args.setKey', 'args.setPath', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_batch_mutate', 'recv_batch_mutate']
['args.setMutation_map', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_atomic_batch_mutate', 'recv_atomic_batch_mutate']
['args.setMutation_map', 'args.setConsistency_level', 'sendBase']
['receiveBase']
['send_truncate', 'recv_truncate']
['args.setCfname', 'sendBase']
['receiveBase']
['send_get_multi_slice', 'recv_get_multi_slice']
['args.setRequest', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_schema_versions', 'recv_describe_schema_versions']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_keyspaces', 'recv_describe_keyspaces']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_cluster_name', 'recv_describe_cluster_name']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_version', 'recv_describe_version']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_ring', 'recv_describe_ring']
['args.setKeyspace', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_local_ring', 'recv_describe_local_ring']
['args.setKeyspace', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_token_map', 'recv_describe_token_map']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_partitioner', 'recv_describe_partitioner']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_snitch', 'recv_describe_snitch']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_keyspace', 'recv_describe_keyspace']
['args.setKeyspace', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_splits', 'recv_describe_splits']
['args.setCfName', 'args.setStart_token', 'args.setEnd_token', 'args.setKeys_per_split', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_trace_next_query', 'recv_trace_next_query']
['sendBase']
['receiveBase', 'result.isSetSuccess']
['send_describe_splits_ex', 'recv_describe_splits_ex']
['args.setCfName', 'args.setStart_token', 'args.setEnd_token', 'args.setKeys_per_split', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_add_column_family', 'recv_system_add_column_family']
['args.setCf_def', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_drop_column_family', 'recv_system_drop_column_family']
['args.setColumn_family', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_add_keyspace', 'recv_system_add_keyspace']
['args.setKs_def', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_drop_keyspace', 'recv_system_drop_keyspace']
['args.setKeyspace', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_update_keyspace', 'recv_system_update_keyspace']
['args.setKs_def', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_system_update_column_family', 'recv_system_update_column_family']
['args.setCf_def', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_execute_cql_query', 'recv_execute_cql_query']
['args.setQuery', 'args.setCompression', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_execute_cql3_query', 'recv_execute_cql3_query']
['args.setQuery', 'args.setCompression', 'args.setConsistency', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_prepare_cql_query', 'recv_prepare_cql_query']
['args.setQuery', 'args.setCompression', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_prepare_cql3_query', 'recv_prepare_cql3_query']
['args.setQuery', 'args.setCompression', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_execute_prepared_cql_query', 'recv_execute_prepared_cql_query']
['args.setItemId', 'args.setValues', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_execute_prepared_cql3_query', 'recv_execute_prepared_cql3_query']
['args.setItemId', 'args.setValues', 'args.setConsistency', 'sendBase']
['receiveBase', 'result.isSetSuccess']
['send_set_cql_version', 'recv_set_cql_version']
['args.setVersion', 'sendBase']
['receiveBase']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setAuth_request', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeyspace', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_path', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeys', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeys', 'args.setColumn_parent', 'args.setPredicate', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setColumn_parent', 'args.setPredicate', 'args.setRange', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setColumn_family', 'args.setRange', 'args.setStart_column', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setColumn_parent', 'args.setIndex_clause', 'args.setColumn_predicate', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_parent', 'args.setColumn', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_parent', 'args.setColumn', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_family', 'args.setExpected', 'args.setUpdates', 'args.setSerial_consistency_level', 'args.setCommit_consistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setColumn_path', 'args.setTimestamp', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKey', 'args.setPath', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setMutation_map', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setMutation_map', 'args.setConsistency_level', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setCfname', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setRequest', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeyspace', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeyspace', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeyspace', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setCfName', 'args.setStart_token', 'args.setEnd_token', 'args.setKeys_per_split', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setCfName', 'args.setStart_token', 'args.setEnd_token', 'args.setKeys_per_split', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setCf_def', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setColumn_family', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKs_def', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKeyspace', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setKs_def', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setCf_def', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setQuery', 'args.setCompression', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setQuery', 'args.setCompression', 'args.setConsistency', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setQuery', 'args.setCompression', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setQuery', 'args.setCompression', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setItemId', 'args.setValues', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setItemId', 'args.setValues', 'args.setConsistency', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['checkReady', '___manager.call']
['prot.writeMessageBegin', 'args.setVersion', 'args.write', 'prot.writeMessageEnd']
['getState', 'getFrameBuffer', '.', 'client.getProtocolFactory', '.', '.']
['processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put']
[None]
[None]
['iface.login']
[None]
[None]
['iface.set_keyspace']
[None]
[None]
['iface.get']
[None]
[None]
['iface.get_slice']
[None]
[None]
['iface.get_count', 'result.setSuccessIsSet']
[None]
[None]
['iface.multiget_slice']
[None]
[None]
['iface.multiget_count']
[None]
[None]
['iface.get_range_slices']
[None]
[None]
['iface.get_paged_slice']
[None]
[None]
['iface.get_indexed_slices']
[None]
[None]
['iface.insert']
[None]
[None]
['iface.add']
[None]
[None]
['iface.cas']
[None]
[None]
['iface.remove']
[None]
[None]
['iface.remove_counter']
[None]
[None]
['iface.batch_mutate']
[None]
[None]
['iface.atomic_batch_mutate']
[None]
[None]
['iface.truncate']
[None]
[None]
['iface.get_multi_slice']
[None]
[None]
['iface.describe_schema_versions']
[None]
[None]
['iface.describe_keyspaces']
[None]
[None]
['iface.describe_cluster_name']
[None]
[None]
['iface.describe_version']
[None]
[None]
['iface.describe_ring']
[None]
[None]
['iface.describe_local_ring']
[None]
[None]
['iface.describe_token_map']
[None]
[None]
['iface.describe_partitioner']
[None]
[None]
['iface.describe_snitch']
[None]
[None]
['iface.describe_keyspace']
[None]
[None]
['iface.describe_splits']
[None]
[None]
['iface.trace_next_query']
[None]
[None]
['iface.describe_splits_ex']
[None]
[None]
['iface.system_add_column_family']
[None]
[None]
['iface.system_drop_column_family']
[None]
[None]
['iface.system_add_keyspace']
[None]
[None]
['iface.system_drop_keyspace']
[None]
[None]
['iface.system_update_keyspace']
[None]
[None]
['iface.system_update_column_family']
[None]
[None]
['iface.execute_cql_query']
[None]
[None]
['iface.execute_cql3_query']
[None]
[None]
['iface.prepare_cql_query']
[None]
[None]
['iface.prepare_cql3_query']
[None]
[None]
['iface.execute_prepared_cql_query']
[None]
[None]
['iface.execute_prepared_cql3_query']
[None]
[None]
['iface.set_cql_version']
['processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put', 'processMap.put']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setAuthnxIsSet', 'result.setAuthzxIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.login']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.set_keyspace']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setNfeIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_slice']
[None]
['result.setSuccessIsSet', 'fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_count']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.multiget_slice']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.multiget_count']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_range_slices']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_paged_slice']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_indexed_slices']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.insert']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.add']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.cas']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.remove']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.remove_counter']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.batch_mutate']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.atomic_batch_mutate']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.truncate']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.get_multi_slice']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_schema_versions']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_keyspaces']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_cluster_name']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_version']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_ring']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_local_ring']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_token_map']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_partitioner']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_snitch']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setNfeIsSet', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_keyspace']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_splits']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.trace_next_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.describe_splits_ex']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_add_column_family']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_drop_column_family']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_add_keyspace']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_drop_keyspace']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_update_keyspace']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.system_update_column_family']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.execute_cql_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.execute_cql3_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.prepare_cql_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.prepare_cql3_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.execute_prepared_cql_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'result.setUeIsSet', 'result.setTeIsSet', 'result.setSdeIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.execute_prepared_cql3_query']
[None]
['fcall.sendResponse', 'LOGGER.error', 'fb.close', 'result.setIreIsSet', 'e.getMessage', 'fcall.sendResponse', 'LOGGER.error', 'fb.close']
[None]
['iface.set_cql_version']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetAuth_request', 'setAuth_request']
['getAuth_request']
['isSetAuth_request']
['.']
['.', 'that.isSetAuth_request', '.']
['isSetAuth_request', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetAuth_request', 'isSetAuth_request', 'isSetAuth_request', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'auth_request.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.auth_request.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.auth_request.write']
['struct.auth_request.read', 'struct.setAuth_requestIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetAuthnx', 'setAuthnx', 'unsetAuthzx', 'setAuthzx']
['getAuthnx', 'getAuthzx']
['isSetAuthnx', 'isSetAuthzx']
['.']
['.', 'that.isSetAuthnx', '.', '.', 'that.isSetAuthzx', '.']
['isSetAuthnx', 'builder.append', 'builder.append', 'isSetAuthzx', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetAuthnx', 'isSetAuthnx', 'isSetAuthnx', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetAuthzx', 'isSetAuthzx', 'isSetAuthzx', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.authnx.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.authzx.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetAuthnx', 'optionals.set', 'struct.isSetAuthzx', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetAuthnx', 'struct.authnx.write', 'struct.isSetAuthzx', 'struct.authzx.write']
['iprot.readBitSet', 'incoming.get', 'struct.authnx.read', 'struct.setAuthnxIsSet', 'incoming.get', 'struct.authzx.read', 'struct.setAuthzxIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeyspace', 'setKeyspace']
['getKeyspace']
['isSetKeyspace']
['.']
['.', 'that.isSetKeyspace', '.']
['isSetKeyspace', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeyspace', 'isSetKeyspace', 'isSetKeyspace', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setKeyspaceIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre']
['getIre']
['isSetIre']
['.']
['.', 'that.isSetIre', '.']
['isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_path', 'setColumn_path', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_path', 'getConsistency_level']
['isSetKey', 'isSetColumn_path', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_path', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_path', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_path', 'isSetColumn_path', 'isSetColumn_path', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'column_path.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_path.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_path.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_path.read', 'struct.setColumn_pathIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetNfe', 'setNfe', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getNfe', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetNfe', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetNfe', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetNfe', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetNfe', 'isSetNfe', 'isSetNfe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.nfe.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetNfe', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetNfe', 'struct.nfe.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.nfe.read', 'struct.setNfeIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_parent', 'setColumn_parent', 'unsetPredicate', 'setPredicate', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_parent', 'getPredicate', 'getConsistency_level']
['isSetKey', 'isSetColumn_parent', 'isSetPredicate', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetPredicate', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_parent.write', 'struct.predicate.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.predicate.read', 'struct.setPredicateIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter227.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter228.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem231.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_parent', 'setColumn_parent', 'unsetPredicate', 'setPredicate', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_parent', 'getPredicate', 'getConsistency_level']
['isSetKey', 'isSetColumn_parent', 'isSetPredicate', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetPredicate', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_parent.write', 'struct.predicate.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.predicate.read', 'struct.setPredicateIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
['setSuccessIsSet']
[None]
['setSuccessIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['Integer.valueOf', 'getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetSuccess', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeys', 'setKeys', 'unsetColumn_parent', 'setColumn_parent', 'unsetPredicate', 'setPredicate', 'unsetConsistency_level', 'setConsistency_level']
['getKeys', 'getColumn_parent', 'getPredicate', 'getConsistency_level']
['isSetKeys', 'isSetColumn_parent', 'isSetPredicate', 'isSetConsistency_level']
['.']
['.', 'that.isSetKeys', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetPredicate', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKeys', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeys', 'isSetKeys', 'isSetKeys', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.keys.size', 'oprot.writeBinary', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'struct.keys.size', 'oprot.writeBinary', 'struct.column_parent.write', 'struct.predicate.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readI32', 'iprot.readBinary', 'struct.keys.add', 'struct.setKeysIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.predicate.read', 'struct.setPredicateIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeBinary', '_iter247.getKey', 'oprot.writeListBegin', '_iter247.getValue', '.', '_iter247.getValue', '_iter248.write', 'oprot.writeListEnd', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeBinary', '_iter249.getKey', 'oprot.writeI32', '_iter249.getValue', '.', '_iter249.getValue', '_iter250.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readBinary', 'iprot.readI32', '_elem257.read', '_val254.add', 'struct.success.put', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeys', 'setKeys', 'unsetColumn_parent', 'setColumn_parent', 'unsetPredicate', 'setPredicate', 'unsetConsistency_level', 'setConsistency_level']
['getKeys', 'getColumn_parent', 'getPredicate', 'getConsistency_level']
['isSetKeys', 'isSetColumn_parent', 'isSetPredicate', 'isSetConsistency_level']
['.']
['.', 'that.isSetKeys', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetPredicate', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKeys', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeys', 'isSetKeys', 'isSetKeys', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.keys.size', 'oprot.writeBinary', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'struct.keys.size', 'oprot.writeBinary', 'struct.column_parent.write', 'struct.predicate.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readI32', 'iprot.readBinary', 'struct.keys.add', 'struct.setKeysIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.predicate.read', 'struct.setPredicateIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeBinary', '_iter270.getKey', 'oprot.writeI32', '_iter270.getValue', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeBinary', '_iter271.getKey', 'oprot.writeI32', '_iter271.getValue', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readBinary', 'iprot.readI32', 'struct.success.put', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn_parent', 'setColumn_parent', 'unsetPredicate', 'setPredicate', 'unsetRange', 'setRange', 'unsetConsistency_level', 'setConsistency_level']
['getColumn_parent', 'getPredicate', 'getRange', 'getConsistency_level']
['isSetColumn_parent', 'isSetPredicate', 'isSetRange', 'isSetConsistency_level']
['.']
['.', 'that.isSetColumn_parent', '.', '.', 'that.isSetPredicate', '.', '.', 'that.isSetRange', '.', '.', 'that.isSetConsistency_level', '.']
['isSetColumn_parent', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'isSetRange', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetRange', 'isSetRange', 'isSetRange', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'predicate.validate', 'range.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.range.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.column_parent.write', 'struct.predicate.write', 'struct.range.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.predicate.read', 'struct.setPredicateIsSet', 'struct.range.read', 'struct.setRangeIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter279.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter280.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem283.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setStart_column', 'org.apache.thrift.TBaseHelper.rightSize', 'start_column.array']
[None]
['setStart_column', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn_family', 'setColumn_family', 'unsetRange', 'setRange', 'unsetStart_column', 'setStart_column', 'unsetConsistency_level', 'setConsistency_level']
['getColumn_family', 'getRange', 'getStart_column', 'getConsistency_level']
['isSetColumn_family', 'isSetRange', 'isSetStart_column', 'isSetConsistency_level']
['.']
['.', 'that.isSetColumn_family', '.', '.', 'that.isSetRange', '.', '.', 'that.isSetStart_column', '.', '.', 'that.isSetConsistency_level', '.']
['isSetColumn_family', 'builder.append', 'builder.append', 'isSetRange', 'builder.append', 'builder.append', 'isSetStart_column', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_family', 'isSetColumn_family', 'isSetColumn_family', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetRange', 'isSetRange', 'isSetRange', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetStart_column', 'isSetStart_column', 'isSetStart_column', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'range.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.range.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString', 'struct.range.write', 'oprot.writeBinary', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readString', 'struct.setColumn_familyIsSet', 'struct.range.read', 'struct.setRangeIsSet', 'iprot.readBinary', 'struct.setStart_columnIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter287.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter288.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem291.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn_parent', 'setColumn_parent', 'unsetIndex_clause', 'setIndex_clause', 'unsetColumn_predicate', 'setColumn_predicate', 'unsetConsistency_level', 'setConsistency_level']
['getColumn_parent', 'getIndex_clause', 'getColumn_predicate', 'getConsistency_level']
['isSetColumn_parent', 'isSetIndex_clause', 'isSetColumn_predicate', 'isSetConsistency_level']
['.']
['.', 'that.isSetColumn_parent', '.', '.', 'that.isSetIndex_clause', '.', '.', 'that.isSetColumn_predicate', '.', '.', 'that.isSetConsistency_level', '.']
['isSetColumn_parent', 'builder.append', 'builder.append', 'isSetIndex_clause', 'builder.append', 'builder.append', 'isSetColumn_predicate', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIndex_clause', 'isSetIndex_clause', 'isSetIndex_clause', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_predicate', 'isSetColumn_predicate', 'isSetColumn_predicate', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'index_clause.validate', 'column_predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.index_clause.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.column_parent.write', 'struct.index_clause.write', 'struct.column_predicate.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.index_clause.read', 'struct.setIndex_clauseIsSet', 'struct.column_predicate.read', 'struct.setColumn_predicateIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter295.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter296.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem299.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_parent', 'setColumn_parent', 'unsetColumn', 'setColumn', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_parent', 'getColumn', 'getConsistency_level']
['isSetKey', 'isSetColumn_parent', 'isSetColumn', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetColumn', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetColumn', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn', 'isSetColumn', 'isSetColumn', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'column.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_parent.write', 'struct.column.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.column.read', 'struct.setColumnIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_parent', 'setColumn_parent', 'unsetColumn', 'setColumn', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_parent', 'getColumn', 'getConsistency_level']
['isSetKey', 'isSetColumn_parent', 'isSetColumn', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetColumn', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetColumn', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn', 'isSetColumn', 'isSetColumn', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString', 'column_parent.validate', 'column.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_parent.write', 'struct.column.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'struct.column.read', 'struct.setColumnIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_family', 'setColumn_family', 'unsetExpected', 'setExpected', 'unsetUpdates', 'setUpdates', 'unsetSerial_consistency_level', 'setSerial_consistency_level', 'unsetCommit_consistency_level', 'setCommit_consistency_level']
['getKey', 'getColumn_family', 'getExpected', 'getUpdates', 'getSerial_consistency_level', 'getCommit_consistency_level']
['isSetKey', 'isSetColumn_family', 'isSetExpected', 'isSetUpdates', 'isSetSerial_consistency_level', 'isSetCommit_consistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_family', '.', '.', 'that.isSetExpected', '.', '.', 'that.isSetUpdates', '.', '.', 'that.isSetSerial_consistency_level', '.', '.', 'that.isSetCommit_consistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_family', 'builder.append', 'builder.append', 'isSetExpected', 'builder.append', 'builder.append', 'isSetUpdates', 'builder.append', 'builder.append', 'isSetSerial_consistency_level', 'builder.append', 'builder.append', 'serial_consistency_level.getValue', 'isSetCommit_consistency_level', 'builder.append', 'builder.append', 'commit_consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_family', 'isSetColumn_family', 'isSetColumn_family', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetExpected', 'isSetExpected', 'isSetExpected', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUpdates', 'isSetUpdates', 'isSetUpdates', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSerial_consistency_level', 'isSetSerial_consistency_level', 'isSetSerial_consistency_level', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCommit_consistency_level', 'isSetCommit_consistency_level', 'isSetCommit_consistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.expected.size', '_iter306.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.updates.size', '_iter307.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.serial_consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.commit_consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeString', 'oprot.writeI32', 'struct.serial_consistency_level.getValue', 'oprot.writeI32', 'struct.commit_consistency_level.getValue', 'struct.isSetExpected', 'optionals.set', 'struct.isSetUpdates', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetExpected', 'oprot.writeI32', 'struct.expected.size', '_iter308.write', 'struct.isSetUpdates', 'oprot.writeI32', 'struct.updates.size', '_iter309.write']
['iprot.readBinary', 'struct.setKeyIsSet', 'iprot.readString', 'struct.setColumn_familyIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setSerial_consistency_levelIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setCommit_consistency_levelIsSet', 'iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem312.read', 'struct.expected.add', 'struct.setExpectedIsSet', 'incoming.get', 'iprot.readI32', '_elem315.read', 'struct.updates.add', 'struct.setUpdatesIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
['setTimestampIsSet']
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setTimestampIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_path', 'setColumn_path', 'unsetTimestamp', 'setTimestamp', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_path', 'Long.valueOf', 'getTimestamp', 'getConsistency_level']
['isSetKey', 'isSetColumn_path', 'isSetTimestamp', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_path', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_path', 'builder.append', 'builder.append', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_path', 'isSetColumn_path', 'isSetColumn_path', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTimestamp', 'isSetTimestamp', 'isSetTimestamp', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'column_path.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.column_path.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI64', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.column_path.write', 'oprot.writeI64', 'struct.isSetConsistency_level', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetConsistency_level', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.column_path.read', 'struct.setColumn_pathIsSet', 'iprot.readI64', 'struct.setTimestampIsSet', 'iprot.readBitSet', 'incoming.get', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetPath', 'setPath', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getPath', 'getConsistency_level']
['isSetKey', 'isSetPath', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetPath', '.', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetPath', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPath', 'isSetPath', 'isSetPath', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString', 'path.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.path.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'struct.path.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBinary', 'struct.setKeyIsSet', 'struct.path.read', 'struct.setPathIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetMutation_map', 'setMutation_map', 'unsetConsistency_level', 'setConsistency_level']
['getMutation_map', 'getConsistency_level']
['isSetMutation_map', 'isSetConsistency_level']
['.']
['.', 'that.isSetMutation_map', '.', '.', 'that.isSetConsistency_level', '.']
['isSetMutation_map', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetMutation_map', 'isSetMutation_map', 'isSetMutation_map', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.mutation_map.size', 'struct.mutation_map.entrySet', 'oprot.writeBinary', '_iter327.getKey', 'oprot.writeMapBegin', '_iter327.getValue', '.', '_iter327.getValue', '.', 'oprot.writeString', '_iter328.getKey', 'oprot.writeListBegin', '_iter328.getValue', '.', '_iter328.getValue', '_iter329.write', 'oprot.writeListEnd', 'oprot.writeMapEnd', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'struct.mutation_map.size', 'struct.mutation_map.entrySet', 'oprot.writeBinary', '_iter330.getKey', 'oprot.writeI32', '_iter330.getValue', '.', '_iter330.getValue', '.', 'oprot.writeString', '_iter331.getKey', 'oprot.writeI32', '_iter331.getValue', '.', '_iter331.getValue', '_iter332.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readI32', 'iprot.readBinary', 'iprot.readI32', 'iprot.readString', 'iprot.readI32', '_elem343.read', '_val340.add', '_val336.put', 'struct.mutation_map.put', 'struct.setMutation_mapIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetMutation_map', 'setMutation_map', 'unsetConsistency_level', 'setConsistency_level']
['getMutation_map', 'getConsistency_level']
['isSetMutation_map', 'isSetConsistency_level']
['.']
['.', 'that.isSetMutation_map', '.', '.', 'that.isSetConsistency_level', '.']
['isSetMutation_map', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetMutation_map', 'isSetMutation_map', 'isSetMutation_map', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.mutation_map.size', 'struct.mutation_map.entrySet', 'oprot.writeBinary', '_iter355.getKey', 'oprot.writeMapBegin', '_iter355.getValue', '.', '_iter355.getValue', '.', 'oprot.writeString', '_iter356.getKey', 'oprot.writeListBegin', '_iter356.getValue', '.', '_iter356.getValue', '_iter357.write', 'oprot.writeListEnd', 'oprot.writeMapEnd', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'struct.mutation_map.size', 'struct.mutation_map.entrySet', 'oprot.writeBinary', '_iter358.getKey', 'oprot.writeI32', '_iter358.getValue', '.', '_iter358.getValue', '.', 'oprot.writeString', '_iter359.getKey', 'oprot.writeI32', '_iter359.getValue', '.', '_iter359.getValue', '_iter360.write', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readI32', 'iprot.readBinary', 'iprot.readI32', 'iprot.readString', 'iprot.readI32', '_elem371.read', '_val368.add', '_val364.put', 'struct.mutation_map.put', 'struct.setMutation_mapIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetCfname', 'setCfname']
['getCfname']
['isSetCfname']
['.']
['.', 'that.isSetCfname', '.']
['isSetCfname', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetCfname', 'isSetCfname', 'isSetCfname', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setCfnameIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getIre', 'getUe', 'getTe']
['isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetRequest', 'setRequest']
['getRequest']
['isSetRequest']
['.']
['.', 'that.isSetRequest', '.']
['isSetRequest', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetRequest', 'isSetRequest', 'isSetRequest', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'request.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.request.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.request.write']
['struct.request.read', 'struct.setRequestIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe']
['getSuccess', 'getIre', 'getUe', 'getTe']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter375.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter376.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem379.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeString', '_iter387.getKey', 'oprot.writeListBegin', '_iter387.getValue', '.', '_iter387.getValue', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeString', '_iter389.getKey', 'oprot.writeI32', '_iter389.getValue', '.', '_iter389.getValue', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'iprot.readI32', 'iprot.readString', '_val394.add', 'struct.success.put', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter401.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter402.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem405.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess']
['getSuccess']
['isSetSuccess']
['.']
['.', 'that.isSetSuccess', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess']
['getSuccess']
['isSetSuccess']
['.']
['.', 'that.isSetSuccess', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeyspace', 'setKeyspace']
['getKeyspace']
['isSetKeyspace']
['.']
['.', 'that.isSetKeyspace', '.']
['isSetKeyspace', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeyspace', 'isSetKeyspace', 'isSetKeyspace', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setKeyspaceIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter409.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter410.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem413.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeyspace', 'setKeyspace']
['getKeyspace']
['isSetKeyspace']
['.']
['.', 'that.isSetKeyspace', '.']
['isSetKeyspace', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeyspace', 'isSetKeyspace', 'isSetKeyspace', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setKeyspaceIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter417.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter418.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem421.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeString', '_iter426.getKey', 'oprot.writeString', '_iter426.getValue', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', 'struct.success.entrySet', 'oprot.writeString', '_iter427.getKey', 'oprot.writeString', '_iter427.getValue', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'iprot.readString', 'struct.success.put', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess']
['getSuccess']
['isSetSuccess']
['.']
['.', 'that.isSetSuccess', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess']
['getSuccess']
['isSetSuccess']
['.']
['.', 'that.isSetSuccess', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeyspace', 'setKeyspace']
['getKeyspace']
['isSetKeyspace']
['.']
['.', 'that.isSetKeyspace', '.']
['isSetKeyspace', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeyspace', 'isSetKeyspace', 'isSetKeyspace', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setKeyspaceIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetNfe', 'setNfe', 'unsetIre', 'setIre']
['getSuccess', 'getNfe', 'getIre']
['isSetSuccess', 'isSetNfe', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetNfe', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetNfe', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetNfe', 'isSetNfe', 'isSetNfe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.nfe.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetNfe', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetNfe', 'struct.nfe.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.nfe.read', 'struct.setNfeIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
['setKeys_per_splitIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setKeys_per_splitIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['unsetCfName', 'setCfName', 'unsetStart_token', 'setStart_token', 'unsetEnd_token', 'setEnd_token', 'unsetKeys_per_split', 'setKeys_per_split']
['getCfName', 'getStart_token', 'getEnd_token', 'Integer.valueOf', 'getKeys_per_split']
['isSetCfName', 'isSetStart_token', 'isSetEnd_token', 'isSetKeys_per_split']
['.']
['.', 'that.isSetCfName', '.', '.', 'that.isSetStart_token', '.', '.', 'that.isSetEnd_token', '.']
['isSetCfName', 'builder.append', 'builder.append', 'isSetStart_token', 'builder.append', 'builder.append', 'isSetEnd_token', 'builder.append', 'builder.append', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetCfName', 'isSetCfName', 'isSetCfName', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetStart_token', 'isSetStart_token', 'isSetStart_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetEnd_token', 'isSetEnd_token', 'isSetEnd_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetKeys_per_split', 'isSetKeys_per_split', 'isSetKeys_per_split', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString', 'oprot.writeString', 'oprot.writeString', 'oprot.writeI32']
['iprot.readString', 'struct.setCfNameIsSet', 'iprot.readString', 'struct.setStart_tokenIsSet', 'iprot.readString', 'struct.setEnd_tokenIsSet', 'iprot.readI32', 'struct.setKeys_per_splitIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
[None]
[None]
[None]
['setSuccess', 'org.apache.thrift.TBaseHelper.rightSize', 'success.array']
[None]
['setSuccess', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess']
['getSuccess']
['isSetSuccess']
['.']
['.', 'that.isSetSuccess', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeBinary']
['iprot.readBitSet', 'incoming.get', 'iprot.readBinary', 'struct.setSuccessIsSet']
[None]
[None]
[None]
['setKeys_per_splitIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setKeys_per_splitIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['unsetCfName', 'setCfName', 'unsetStart_token', 'setStart_token', 'unsetEnd_token', 'setEnd_token', 'unsetKeys_per_split', 'setKeys_per_split']
['getCfName', 'getStart_token', 'getEnd_token', 'Integer.valueOf', 'getKeys_per_split']
['isSetCfName', 'isSetStart_token', 'isSetEnd_token', 'isSetKeys_per_split']
['.']
['.', 'that.isSetCfName', '.', '.', 'that.isSetStart_token', '.', '.', 'that.isSetEnd_token', '.']
['isSetCfName', 'builder.append', 'builder.append', 'isSetStart_token', 'builder.append', 'builder.append', 'isSetEnd_token', 'builder.append', 'builder.append', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetCfName', 'isSetCfName', 'isSetCfName', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetStart_token', 'isSetStart_token', 'isSetStart_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetEnd_token', 'isSetEnd_token', 'isSetEnd_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetKeys_per_split', 'isSetKeys_per_split', 'isSetKeys_per_split', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString', 'oprot.writeString', 'oprot.writeString', 'oprot.writeI32']
['iprot.readString', 'struct.setCfNameIsSet', 'iprot.readString', 'struct.setStart_tokenIsSet', 'iprot.readString', 'struct.setEnd_tokenIsSet', 'iprot.readI32', 'struct.setKeys_per_splitIsSet']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.success.size', '_iter443.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeI32', 'struct.success.size', '_iter444.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', '_elem447.read', 'struct.success.add', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetCf_def', 'setCf_def']
['getCf_def']
['isSetCf_def']
['.']
['.', 'that.isSetCf_def', '.']
['isSetCf_def', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetCf_def', 'isSetCf_def', 'isSetCf_def', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'cf_def.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.cf_def.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.cf_def.write']
['struct.cf_def.read', 'struct.setCf_defIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn_family', 'setColumn_family']
['getColumn_family']
['isSetColumn_family']
['.']
['.', 'that.isSetColumn_family', '.']
['isSetColumn_family', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_family', 'isSetColumn_family', 'isSetColumn_family', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setColumn_familyIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKs_def', 'setKs_def']
['getKs_def']
['isSetKs_def']
['.']
['.', 'that.isSetKs_def', '.']
['isSetKs_def', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKs_def', 'isSetKs_def', 'isSetKs_def', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'ks_def.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ks_def.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.ks_def.write']
['struct.ks_def.read', 'struct.setKs_defIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKeyspace', 'setKeyspace']
['getKeyspace']
['isSetKeyspace']
['.']
['.', 'that.isSetKeyspace', '.']
['isSetKeyspace', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKeyspace', 'isSetKeyspace', 'isSetKeyspace', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setKeyspaceIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetKs_def', 'setKs_def']
['getKs_def']
['isSetKs_def']
['.']
['.', 'that.isSetKs_def', '.']
['isSetKs_def', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKs_def', 'isSetKs_def', 'isSetKs_def', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'ks_def.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ks_def.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.ks_def.write']
['struct.ks_def.read', 'struct.setKs_defIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetCf_def', 'setCf_def']
['getCf_def']
['isSetCf_def']
['.']
['.', 'that.isSetCf_def', '.']
['isSetCf_def', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetCf_def', 'isSetCf_def', 'isSetCf_def', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'cf_def.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.cf_def.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.cf_def.write']
['struct.cf_def.read', 'struct.setCf_defIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'oprot.writeString', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readString', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
['setQuery', 'org.apache.thrift.TBaseHelper.rightSize', 'query.array']
[None]
['setQuery', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetQuery', 'setQuery', 'unsetCompression', 'setCompression']
['getQuery', 'getCompression']
['isSetQuery', 'isSetCompression']
['.']
['.', 'that.isSetQuery', '.', '.', 'that.isSetCompression', '.']
['isSetQuery', 'builder.append', 'builder.append', 'isSetCompression', 'builder.append', 'builder.append', 'compression.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetQuery', 'isSetQuery', 'isSetQuery', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCompression', 'isSetCompression', 'isSetCompression', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.compression.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.compression.getValue']
['iprot.readBinary', 'struct.setQueryIsSet', 'Compression.findByValue', 'iprot.readI32', 'struct.setCompressionIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getUe', 'getTe', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
['setQuery', 'org.apache.thrift.TBaseHelper.rightSize', 'query.array']
[None]
['setQuery', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetQuery', 'setQuery', 'unsetCompression', 'setCompression', 'unsetConsistency', 'setConsistency']
['getQuery', 'getCompression', 'getConsistency']
['isSetQuery', 'isSetCompression', 'isSetConsistency']
['.']
['.', 'that.isSetQuery', '.', '.', 'that.isSetCompression', '.', '.', 'that.isSetConsistency', '.']
['isSetQuery', 'builder.append', 'builder.append', 'isSetCompression', 'builder.append', 'builder.append', 'compression.getValue', 'isSetConsistency', 'builder.append', 'builder.append', 'consistency.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetQuery', 'isSetQuery', 'isSetQuery', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCompression', 'isSetCompression', 'isSetCompression', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency', 'isSetConsistency', 'isSetConsistency', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.compression.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.compression.getValue', 'oprot.writeI32', 'struct.consistency.getValue']
['iprot.readBinary', 'struct.setQueryIsSet', 'Compression.findByValue', 'iprot.readI32', 'struct.setCompressionIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistencyIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getUe', 'getTe', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
['setQuery', 'org.apache.thrift.TBaseHelper.rightSize', 'query.array']
[None]
['setQuery', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetQuery', 'setQuery', 'unsetCompression', 'setCompression']
['getQuery', 'getCompression']
['isSetQuery', 'isSetCompression']
['.']
['.', 'that.isSetQuery', '.', '.', 'that.isSetCompression', '.']
['isSetQuery', 'builder.append', 'builder.append', 'isSetCompression', 'builder.append', 'builder.append', 'compression.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetQuery', 'isSetQuery', 'isSetQuery', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCompression', 'isSetCompression', 'isSetCompression', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.compression.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.compression.getValue']
['iprot.readBinary', 'struct.setQueryIsSet', 'Compression.findByValue', 'iprot.readI32', 'struct.setCompressionIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
['setQuery', 'org.apache.thrift.TBaseHelper.rightSize', 'query.array']
[None]
['setQuery', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetQuery', 'setQuery', 'unsetCompression', 'setCompression']
['getQuery', 'getCompression']
['isSetQuery', 'isSetCompression']
['.']
['.', 'that.isSetQuery', '.', '.', 'that.isSetCompression', '.']
['isSetQuery', 'builder.append', 'builder.append', 'isSetCompression', 'builder.append', 'builder.append', 'compression.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetQuery', 'isSetQuery', 'isSetQuery', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCompression', 'isSetCompression', 'isSetCompression', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.compression.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.compression.getValue']
['iprot.readBinary', 'struct.setQueryIsSet', 'Compression.findByValue', 'iprot.readI32', 'struct.setCompressionIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre']
['getSuccess', 'getIre']
['isSetSuccess', 'isSetIre']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
['setItemIdIsSet']
[None]
['setItemIdIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['unsetItemId', 'setItemId', 'unsetValues', 'setValues']
['Integer.valueOf', 'getItemId', 'getValues']
['isSetItemId', 'isSetValues']
['.']
['.', 'that.isSetValues', '.']
['builder.append', 'builder.append', 'isSetValues', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetItemId', 'isSetItemId', 'isSetItemId', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetValues', 'isSetValues', 'isSetValues', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.values.size', 'oprot.writeBinary', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'oprot.writeI32', 'struct.values.size', 'oprot.writeBinary']
['iprot.readI32', 'struct.setItemIdIsSet', 'iprot.readI32', 'iprot.readBinary', 'struct.values.add', 'struct.setValuesIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getUe', 'getTe', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
['setItemIdIsSet']
[None]
['setItemIdIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetItemId', 'setItemId', 'unsetValues', 'setValues', 'unsetConsistency', 'setConsistency']
['Integer.valueOf', 'getItemId', 'getValues', 'getConsistency']
['isSetItemId', 'isSetValues', 'isSetConsistency']
['.']
['.', 'that.isSetValues', '.', '.', 'that.isSetConsistency', '.']
['builder.append', 'builder.append', 'isSetValues', 'builder.append', 'builder.append', 'isSetConsistency', 'builder.append', 'builder.append', 'consistency.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetItemId', 'isSetItemId', 'isSetItemId', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetValues', 'isSetValues', 'isSetValues', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency', 'isSetConsistency', 'isSetConsistency', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.values.size', 'oprot.writeBinary', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'oprot.writeI32', 'struct.values.size', 'oprot.writeBinary', 'oprot.writeI32', 'struct.consistency.getValue']
['iprot.readI32', 'struct.setItemIdIsSet', 'iprot.readI32', 'iprot.readBinary', 'struct.values.add', 'struct.setValuesIsSet', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistencyIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetSuccess', 'setSuccess', 'unsetIre', 'setIre', 'unsetUe', 'setUe', 'unsetTe', 'setTe', 'unsetSde', 'setSde']
['getSuccess', 'getIre', 'getUe', 'getTe', 'getSde']
['isSetSuccess', 'isSetIre', 'isSetUe', 'isSetTe', 'isSetSde']
['.']
['.', 'that.isSetSuccess', '.', '.', 'that.isSetIre', '.', '.', 'that.isSetUe', '.', '.', 'that.isSetTe', '.', '.', 'that.isSetSde', '.']
['isSetSuccess', 'builder.append', 'builder.append', 'isSetIre', 'builder.append', 'builder.append', 'isSetUe', 'builder.append', 'builder.append', 'isSetTe', 'builder.append', 'builder.append', 'isSetSde', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetSuccess', 'isSetSuccess', 'isSetSuccess', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetUe', 'isSetUe', 'isSetUe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetTe', 'isSetTe', 'isSetTe', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSde', 'isSetSde', 'isSetSde', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['success.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.success.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.ue.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.te.write', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'struct.sde.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetSuccess', 'optionals.set', 'struct.isSetIre', 'optionals.set', 'struct.isSetUe', 'optionals.set', 'struct.isSetTe', 'optionals.set', 'struct.isSetSde', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuccess', 'struct.success.write', 'struct.isSetIre', 'struct.ire.write', 'struct.isSetUe', 'struct.ue.write', 'struct.isSetTe', 'struct.te.write', 'struct.isSetSde', 'struct.sde.write']
['iprot.readBitSet', 'incoming.get', 'struct.success.read', 'struct.setSuccessIsSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet', 'incoming.get', 'struct.ue.read', 'struct.setUeIsSet', 'incoming.get', 'struct.te.read', 'struct.setTeIsSet', 'incoming.get', 'struct.sde.read', 'struct.setSdeIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetVersion', 'setVersion']
['getVersion']
['isSetVersion']
['.']
['.', 'that.isSetVersion', '.']
['isSetVersion', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetVersion', 'isSetVersion', 'isSetVersion', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString']
['iprot.readString', 'struct.setVersionIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetIre', 'setIre']
['getIre']
['isSetIre']
['.']
['.', 'that.isSetIre', '.']
['isSetIre', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetIre', 'isSetIre', 'isSetIre', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'struct.ire.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetIre', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIre', 'struct.ire.write']
['iprot.readBitSet', 'incoming.get', 'struct.ire.read', 'struct.setIreIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['registry.registerIndex']
['isBuilt', 'baseCfs.isEmpty', 'getBuildIndexTask']
[None]
['Optional.empty', 'Optional.of']
['indexCfs.forceBlockingFlush']
['invalidate']
['indexCfs.metadata.reloadIndexMetadataProperties', 'indexCfs.reload']
['parseTarget', 'getFunctions', 'indexCfsMetadata', 'ColumnFamilyStore.createColumnFamilyStore', 'baseCfs.getTracker']
['indexCfs.discardSSTables']
[None]
['indexedColumn.name.equals']
['indexedColumn.name.equals', 'supportsOperator']
['supportsExpression', 'expression.column', 'expression.operator']
[None]
['indexCfs.getMeanColumns']
[None]
['getTargetExpression', '.', '.', 'filter.getExpressions']
['expressions.stream', '.', '.']
['getTargetExpression', 'command.rowFilter', '.', 'target.isPresent', 'target.get', '.', 'getIndexMetadata', 'target.get', 'target.get', 'String.format', 'indexedColumn.name.toString']
['validatePartitionKey', 'update.partitionKey', 'validateClusterings', 'update.columns', '.', 'validateRows', 'update.columns', '.', 'validateRows', 'Collections.singleton', 'update.staticRow']
['isPrimaryKeyIndex', 'columns.contains', 'isPrimaryKeyIndex', 'indexPrimaryKey', 'row.clustering', 'getPrimaryKeyIndexLiveness', 'row.deletion', 'indexedColumn.isComplex', 'indexCells', 'row.clustering', 'row.getComplexColumnData', 'indexCell', 'row.clustering', 'row.getCell', 'isPrimaryKeyIndex', 'indexPrimaryKey', 'row.clustering', 'row.primaryKeyLivenessInfo', 'row.deletion', 'indexedColumn.isComplex', 'removeCells', 'row.clustering', 'row.getComplexColumnData', 'removeCell', 'row.clustering', 'row.getCell', 'isPrimaryKeyIndex', 'indexPrimaryKey', 'newRow.clustering', 'newRow.primaryKeyLivenessInfo', 'newRow.deletion', 'indexedColumn.isComplex', 'indexCells', 'newRow.clustering', 'newRow.getComplexColumnData', 'removeCells', 'oldRow.clustering', 'oldRow.getComplexColumnData', 'indexCell', 'newRow.clustering', 'newRow.getCell', 'removeCell', 'oldRow.clustering', 'oldRow.getCell', 'indexCell', 'cell.isLive', 'insert', 'key.getKey', 'LivenessInfo.create', 'cell.timestamp', 'cell.ttl', 'cell.localDeletionTime', 'removeCell', 'cell.isLive', 'delete', 'key.getKey', 'liveness.timestamp', 'insert', 'key.getKey', 'deletion.isLive', 'delete', 'key.getKey', 'deletion.time', 'row.primaryKeyLivenessInfo', '.', 'row.primaryKeyLivenessInfo', '.', 'row.cells', 'cell.timestamp', 'cell.isLive', 'cell.ttl', 'LivenessInfo.create']
[None]
[None]
[None]
['isPrimaryKeyIndex', 'indexPrimaryKey', 'row.clustering', 'getPrimaryKeyIndexLiveness', 'row.deletion', 'indexedColumn.isComplex', 'indexCells', 'row.clustering', 'row.getComplexColumnData', 'indexCell', 'row.clustering', 'row.getCell']
['isPrimaryKeyIndex', 'indexPrimaryKey', 'row.clustering', 'row.primaryKeyLivenessInfo', 'row.deletion', 'indexedColumn.isComplex', 'removeCells', 'row.clustering', 'row.getComplexColumnData', 'removeCell', 'row.clustering', 'row.getCell']
['isPrimaryKeyIndex', 'indexPrimaryKey', 'newRow.clustering', 'newRow.primaryKeyLivenessInfo', 'newRow.deletion', 'indexedColumn.isComplex', 'indexCells', 'newRow.clustering', 'newRow.getComplexColumnData', 'removeCells', 'oldRow.clustering', 'oldRow.getComplexColumnData', 'indexCell', 'newRow.clustering', 'newRow.getCell', 'removeCell', 'oldRow.clustering', 'oldRow.getCell']
[None]
['indexCell']
['cell.isLive', 'insert', 'key.getKey', 'LivenessInfo.create', 'cell.timestamp', 'cell.ttl', 'cell.localDeletionTime']
['removeCell']
['cell.isLive', 'delete', 'key.getKey']
['liveness.timestamp', 'insert', 'key.getKey', 'deletion.isLive', 'delete', 'key.getKey', 'deletion.time']
['row.primaryKeyLivenessInfo', '.', 'row.primaryKeyLivenessInfo', '.', 'row.cells', 'cell.timestamp', 'cell.isLive', 'cell.ttl', 'LivenessInfo.create']
['doDelete', 'logger.trace']
['getIndexKeyFor', 'getIndexedValue', 'BTreeRow.noCellLiveRow', 'buildIndexClustering', 'partitionUpdate', 'indexCfs.apply', 'logger.trace']
['getIndexKeyFor', 'getIndexedValue', 'doDelete', 'buildIndexClustering', 'cell.timestamp']
['getIndexKeyFor', 'getIndexedValue', 'doDelete', 'buildIndexClustering']
['BTreeRow.emptyDeletedRow', 'Row.Deletion.regular', 'partitionUpdate', 'indexCfs.apply', 'logger.trace']
['indexedColumn.isPartitionKey', 'validateIndexedValue', 'getIndexedValue', 'partitionKey.getKey']
['indexedColumn.isClusteringColumn', 'validateIndexedValue', 'getIndexedValue', 'row.clustering']
['indexedColumn.isPrimaryKeyColumn', 'indexedColumn.isComplex', 'row.getComplexColumnData', 'validateIndexedValue', 'getIndexedValue', 'cell.path', 'cell.value', 'validateIndexedValue', 'getIndexedValue', 'row.getCell']
['value.remaining', 'String.format', 'value.remaining', 'indexedColumn.name.toString']
['getIndexedValue', 'cell.path', 'cell.value']
['buildIndexClusteringPrefix', '.', 'cell.path']
['indexCfs.decorateKey']
['PartitionUpdate.singleRowUpdate']
['Collections.singleton', 'CompactionManager.instance.interruptCompactionForCFs', 'CompactionManager.instance.waitForCessation', 'Keyspace.writeOrder.awaitNewBarrier', 'indexCfs.forceBlockingFlush', 'indexCfs.readOrdering.awaitNewBarrier', 'indexCfs.invalidate']
['SystemKeyspace.isIndexBuilt', 'baseCfs.keyspace.getName']
['indexedColumn.isPrimaryKeyColumn']
['buildBlocking']
['baseCfs.forceBlockingFlush', 'baseCfs.selectAndReference', 'View.select', 'sstables.isEmpty', 'logger.info', 'baseCfs.indexManager.markIndexBuilt', 'logger.info', 'getSSTableNames', 'Collections.singleton', 'CompactionManager.instance.submitIndexBuild', 'FBUtilities.waitOnFuture', 'indexCfs.forceBlockingFlush', 'baseCfs.indexManager.markIndexBuilt', 'logger.info']
['StreamSupport.stream', '.', '.', 'Collectors.joining', 'sstables.spliterator']
['parseTarget', 'getFunctions', 'utils.getIndexedValueType', 'CFMetaData.Builder.create', '.', '.', '.', 'baseCfsMetadata.indexColumnFamilyName', 'builder.addClusteringColumn', 'baseCfsMetadata.partitioner.partitionOrdering', 'utils.addIndexClusteringColumns', 'builder.build', '.']
['getFunctions', '.', 'parseTarget']
['indexDef.options.get', 'String.format', 'TARGET_REGEX.matcher', 'matcher.matches', 'IndexTarget.Type.fromString', 'matcher.group', 'matcher.group', 'columnName.startsWith', 'StringUtils.substring', 'StringUtils.substring', 'columnName.replaceAll', 'cfm.isCQLTable', 'Pair.create', 'cfm.getColumnDefinition', 'cfm.allColumns', 'column.name.toString', '.', 'Pair.create', 'String.format']
['indexDef.isKeys', 'indexedColumn.type.isCollection', 'indexedColumn.type.isMultiCell']
['.', '.', '.', '.', 'row', '.', 'row', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', '.', 'row', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', '.', 'row', '.', 'String.format', '.', '.', '.']
['.', '.', '.', '.', 'row', '.', 'row', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', '.', 'row', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Lists.newArrayList', '.', 'row', 'Lists.newArrayList', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Lists.newArrayList', '.', 'row', 'Lists.newArrayList', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Sets.newHashSet', '.', 'row', 'Sets.newHashSet', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Sets.newHashSet', '.', 'row', 'Sets.newHashSet', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Lists.newArrayList', '.', 'row', 'Lists.newArrayList', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'Sets.newHashSet', '.', 'row', 'Sets.newHashSet', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', 'ImmutableMap.of', '.', 'row', 'ImmutableMap.of', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'row', '.', 'row', '.', '.', '.', '.', '.', '.']
['row', 'ImmutableMap.of', 'row', 'ImmutableMap.of', 'createTable', 'createIndex', 'createIndex', 'execute', 'execute', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute']
['createTable', 'createIndex', 'execute', 'assertRows', 'execute', 'row', 'execute', 'assertEmpty', 'execute']
['createTable', 'createIndex', 'execute', 'getCurrentColumnFamilyStore', 'baseCfs.indexManager.listIndexes', '.', '.', '.', '.', 'throwAssert', 'assertIndexRowTtl', 'execute', 'assertIndexRowTtl']
['createTable', 'createIndex', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'execute', 'assertRows', 'execute', 'row', 'execute', 'assertEmpty', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertEmpty', 'execute', 'execute', 'assertRows', 'execute', 'row', 'execute', 'assertEmpty', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'String.format', 'waitForIndex', 'assertRows', 'execute', 'String.format', 'row', 'getCurrentColumnFamilyStore', '.', 'waitForIndex', 'assertRows', 'execute', 'String.format', 'row']
['indexCfs.decorateKey', 'ByteBufferUtil.bytes', 'Slices.with', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'ReadExecutionController.forCommand', 'command.queryMemtableAndDisk', 'executionController.indexReadOpOrderGroup', 'iter.hasNext', 'iter.next', 'unfiltered.isRow', 'assertEquals', 'indexRow.primaryKeyLivenessInfo', '.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['assertNotNull', 'assertNotNull', 'assertNotNull', 'assertNotNull', 'assertNotNull', 'assertNotNull', 'assertNotNull', 'assertNotNull', 'createTable', 'String.format', 'String.format', 'String.format', 'String.format', 'getInsertCql', 'getDeleteRowCql', 'getDeletePartitionCql', 'execute', 'assertInvalidThrowMessage', 'createIndex', 'waitForIndexBuild', 'assertRows', 'execute', 'assertEmpty', 'execute', 'flush', 'assertRows', 'execute', 'assertEmpty', 'execute', 'compact', 'assertRows', 'execute', 'assertEmpty', 'execute', 'getCurrentColumnFamilyStore', '.', 'assertRows', 'execute', 'assertEmpty', 'execute', 'execute', 'assertInvalidThrowMessage', 'getCurrentColumnFamilyStore', '.', 'assertInvalidThrowMessage', 'flush', 'compact', 'execute', 'createIndex', 'waitForIndexBuild', 'assertRows', 'execute', 'assertRows', 'execute', 'includesUpdate', 'execute', 'getUpdateCql', 'getPrimaryKeyValues', 'assertEmpty', 'execute', 'String.format', 'assertPrimaryKeyColumnsOnly', 'execute', 'execute', 'getPrimaryKeyValues', 'assertEmpty', 'execute', 'execute', 'getPartitionKeyValues', 'assertEmpty', 'execute', 'flush', 'compact', 'assertEmpty', 'execute', 'assertEmpty', 'execute', 'execute', 'String.format', 'assertRows', 'execute', 'execute', 'assertRows', 'execute', 'flush', 'compact', 'assertRows', 'execute', 'assertRows', 'execute']
['assertFalse', 'resultSet.isEmpty', 'getCurrentColumnFamilyStore', 'cfm.partitionKeyColumns', '.', 'cfm.isCompound', 'cfm.clusteringColumns', '.', 'copyValuesFromRow', 'assertArrayEquals', 'copyValuesFromRow', 'getRows']
['getCurrentColumnFamilyStore', 'Joiner.on', '.', 'Iterators.transform', 'cfm.allColumnsInSelectOrder', 'column.name.toString', 'Joiner.on', '.', 'Iterators.transform', 'cfm.allColumnsInSelectOrder', 'String.format']
['getPrimaryKeyColumns', '.', 'column.name.toString', '.', 'Collectors.joining', 'String.format']
['getPrimaryKeyColumns', '.', 'column.name.toString', '.', 'Collectors.joining']
['getCurrentColumnFamilyStore', 'StreamSupport.stream', '.', 'column.name.toString', '.', 'Collectors.joining', 'cfm.partitionKeyColumns', '.']
['getCurrentColumnFamilyStore', 'cfm.isCompactTable', 'cfm.partitionKeyColumns', '.', 'Stream.concat', 'cfm.partitionKeyColumns', '.', 'cfm.clusteringColumns', '.']
['getCurrentColumnFamilyStore', 'cfm.isCompactTable', 'getPartitionKeyValues', 'copyValuesFromRow', 'cfm.partitionKeyColumns', '.', 'cfm.clusteringColumns', '.']
['getCurrentColumnFamilyStore', 'copyValuesFromRow', 'cfm.partitionKeyColumns', '.']
['System.arraycopy']
[None]
['getCurrentColumnFamilyStore', 'System.currentTimeMillis', 'cfs.indexManager.getBuiltIndexNames', '.', 'Thread.sleep', 'System.currentTimeMillis', 'fail', 'String.format']
['row.getString', 'row.getBoolean', 'row.getBoolean', 'row.has', 'row.getSet', 'Collections.<']
['row.getString', 'row.getBoolean', 'Collections.<']
['Integer.getInteger', 'String.format']
['prepare', 'Schema.instance.getCFMetaData', 'prepare', 'scheduleSetupTask', 'convertLegacyData', 'scheduleSetupTask', 'setupDefaultRole']
[None]
[None]
['process', 'String.format', 'escape', 'role.getRoleName', 'consistencyForRole', 'role.getRoleName', 'removeAllMembers', 'role.getRoleName']
['Joiner.on', '.', 'Iterables.filter', 'optionsToAssignments', 'options.getOptions', 'Predicates.notNull', 'Strings.isNullOrEmpty', 'process', 'String.format', 'escape', 'role.getRoleName', 'consistencyForRole', 'role.getRoleName']
['getRole', 'grantee.getRoleName', 'role.equals', 'roles.add', 'RoleResource.role', 'collectRoles']
['process', 'String.format', 'Iterables.transform', 'RoleResource.role', 'row.getString', 'ImmutableSet.<', '.', '.']
['RoleResource.role', 'row.getString']
['getRole', 'role.getRoleName']
['getRole', 'role.getRoleName']
['Collections.emptyMap']
['getRole', 'role.getRoleName']
['ImmutableSet.of', 'DataResource.table', 'DataResource.table']
[None]
['hasExistingRoles', 'QueryProcessor.process', 'String.format', 'escape', 'hashpw', 'consistencyForRole', 'logger.info', 'logger.warn']
['String.format', 'String.format', 'QueryProcessor.process', '.', 'QueryProcessor.process', '.', 'QueryProcessor.process', '.']
['ScheduledExecutors.optionalTasks.schedule', 'MessagingService.instance', '.', 'logger.trace', 'scheduleSetupTask', 'setupTask.call', 'logger.info', 'scheduleSetupTask']
['MessagingService.instance', '.', 'logger.trace', 'scheduleSetupTask', 'setupTask.call', 'logger.info', 'scheduleSetupTask']
['Schema.instance.getCFMetaData', 'logger.info', 'QueryProcessor.process', 'options.setOption', 'row.getBoolean', 'options.setOption', 'createRole', 'RoleResource.role', 'row.getString', 'logger.info', 'Schema.instance.getCFMetaData', 'logger.info', 'QueryProcessor.process', 'QueryProcessor.process', 'String.format', 'row.getString', 'row.getString', 'consistencyForRole', 'row.getString', 'logger.info', 'logger.info', 'logger.trace']
['QueryProcessor.parseStatement', '.', 'String.format']
['getRole', 'granted.equals', 'collected.add', 'RoleResource.role', 'collectRoles']
['Schema.instance.getCFMetaData', 'getRoleFromTable', 'getRoleFromTable']
['process', 'String.format', 'escape', 'consistencyForRole', 'rows.isEmpty', 'modifyRoleMembership', 'row.getString', 'process', 'String.format', 'escape', 'consistencyForRole']
['Iterables.transform', 'options.entrySet', 'entry.getKey', 'String.format', 'entry.getValue', 'String.format', 'entry.getValue', 'String.format', 'escape', 'hashpw', 'entry.getValue']
['entry.getKey', 'String.format', 'entry.getValue', 'String.format', 'entry.getValue', 'String.format', 'escape', 'hashpw', 'entry.getValue']
['role.equals']
['BCrypt.hashpw', 'BCrypt.gensalt']
['StringUtils.replace']
['QueryProcessor.process']
['Objects.equal']
['Objects.hashCode']
[None]
['v1.compareTo', 'v1.compareTo', 'v1.compareTo', 'v2.compareTo', 'v1.compareTo', 'v1.compareTo', 'v1.compareTo', 'v1.compareTo']
['v1.isSupportedBy', 'v1.isSupportedBy', 'v2.isSupportedBy', 'v1.isSupportedBy', 'v2.isSupportedBy', 'v1.isSupportedBy', 'v2.isSupportedBy', 'v1.isSupportedBy', 'v2.isSupportedBy']
['assertThrows', 'assertThrows', 'assertThrows', 'assertThrows']
['assertTrue', 'prev.compareTo', 'assertTrue', 'prev.compareTo', 'assertTrue', 'prev.compareTo', 'assertTrue', 'prev.compareTo']
[None]
['cfName.hasKeyspace', 'cfName.setKeyspace', 'state.getKeyspace']
['cfName.hasKeyspace', 'cfName.setKeyspace']
['cfName.hasKeyspace', 'cfName.getKeyspace']
['cfName.getColumnFamily']
['File.createTempFile', 'File.createTempFile', 'ThreadLocalRandom.current', '.', 'ChecksummedSequentialWriter.open', 'writer.write', 'writer.finish', 'data.exists', '.', 'reader.readFully', 'assertArrayEquals', 'assertTrue', 'reader.isEOF', 'reader.close']
['File.createTempFile', 'File.createTempFile', 'ThreadLocalRandom.current', '.', 'ChecksummedSequentialWriter.open', 'writer.write', 'writer.finish', 'data.exists', '.', 'reader.seek', 'reader.readFully', 'Arrays.copyOfRange', 'assertArrayEquals', 'assertTrue', 'reader.isEOF', 'reader.close']
['File.createTempFile', 'File.createTempFile', 'Arrays.fill', 'ChecksummedSequentialWriter.open', 'writer.write', 'writer.finish', 'data.exists', 'dataFile.seek', 'dataFile.write', '.', 'reader.readFully', 'assertArrayEquals', 'assertTrue', 'reader.isEOF', 'reader.close']
['UUIDSerializer.serializer.serialize']
['UUIDSerializer.serializer.deserialize']
['UUIDSerializer.serializer.serializedSize']
['Config.setClientMode', 'CFMetaData.Builder.createDense', '.', '.', '.', '.', '.', 'System.getProperty', '.', 'LEGACY_SSTABLE_ROOT.isDirectory']
[None]
['LEGACY_SSTABLE_ROOT.listFiles', '.', 'version.getName', 'Version.validate', 'version.getName', 'SSTableFormat.Type.LEGACY.info.getVersion', '.', 'version.getName', 'testVersion', 'version.getName']
['SSTableReader.openNoValidation', 'getDescriptor', 'bytes', 'Integer.toString', 'reader.iterator', 'metadata.decorateKey', 'ColumnFilter.selection', 'metadata.partitionColumns', 'iter.next', '.', '.', '.', 'System.err.println', 'SSTableReader.GlobalTidy.lookup.size', 'reader.selfRef', '.', 'reader.selfRef', '.', 'ScheduledExecutors.nonPeriodicTasks.submit', '.', 'Runnables.doNothing', 'SSTableReader.GlobalTidy.lookup.size']
['AsciiSerializer.instance.deserialize', 'AsciiSerializer.instance.serialize', 'BooleanSerializer.instance.deserialize', 'BooleanSerializer.instance.serialize', 'BytesSerializer.instance.deserialize', 'BytesSerializer.instance.serialize', 'ByteBuffer.wrap', 'STR_.getBytes', 'System.currentTimeMillis', 'TimestampSerializer.instance.serialize', 'TimestampSerializer.instance.deserialize', 'DecimalSerializer.instance.deserialize', 'DecimalSerializer.instance.serialize', 'DoubleSerializer.instance.deserialize', 'DoubleSerializer.instance.serialize', 'FloatSerializer.instance.deserialize', 'FloatSerializer.instance.serialize', 'Int32Serializer.instance.deserialize', 'Int32Serializer.instance.serialize', 'IntegerSerializer.instance.deserialize', 'IntegerSerializer.instance.serialize', 'LongSerializer.instance.deserialize', 'LongSerializer.instance.serialize', 'UTF8Serializer.instance.deserialize', 'UTF8Serializer.instance.serialize', 'UUIDGen.getTimeUUID', 'UUIDSerializer.instance.deserialize', 'UUIDSerializer.instance.serialize']
[None]
[None]
[None]
['Objects.hashCode']
['String.format']
['endpoint.equals', 'FBUtilities.getBroadcastAddress', 'Gossiper.instance.getEndpointStateForEndpoint', 'state.getApplicationState', 'SystemKeyspace.loadDcRackInfo', 'savedEndpoints.containsKey', 'savedEndpoints.get', '.', 'state.getApplicationState']
['endpoint.equals', 'FBUtilities.getBroadcastAddress', 'Gossiper.instance.getEndpointStateForEndpoint', 'state.getApplicationState', 'SystemKeyspace.loadDcRackInfo', 'savedEndpoints.containsKey', 'savedEndpoints.get', '.', 'state.getApplicationState']
['.', 'conn.setRequestMethod', 'conn.getResponseCode', 'conn.getContentLength', 'conn.getInputStream', 'is.readFully', 'FileUtils.close', 'conn.disconnect']
['lease_file.exists', 'csEndpointFromLease', 'JVMStabilityInspector.inspectThrowable']
['Pattern.compile', 'reader.readLine', 'identifierPattern.matcher', 'matcher.find', 'matcher.group']
[None]
[None]
['clusterings.contains']
['clusterings.headSet', 'clusterings.tailSet']
['partition.isEmpty', 'clusterings.comparator', '.', 'clusterings.last', 'partition.lastRow', '.']
[None]
['columnFilter.fetchedColumns', '.', 'row.filter', 'iterator.metadata', 'clusterings.contains', 'row.clustering', 'row.filter', 'iterator.metadata', 'Transformation.apply']
['columnFilter.fetchedColumns', '.', 'row.filter', 'iterator.metadata']
['clusterings.contains', 'row.clustering', 'row.filter', 'iterator.metadata']
['clusteringsInQueryOrder.iterator', 'currentClustering.hasNext', 'currentClustering.next', 'clusteringIter.hasNext', 'clusteringIter.next', 'iter.slice', 'Slice.make', 'currentClustering.hasNext', 'currentClustering.next', 'hasNext']
['currentClustering.hasNext', 'currentClustering.next', 'clusteringIter.hasNext', 'clusteringIter.next', 'iter.slice', 'Slice.make', 'currentClustering.hasNext', 'currentClustering.next']
['hasNext']
['partition.searchIterator', 'partition.metadata', 'partition.partitionKey', 'partition.partitionLevelDeletion', 'columnFilter.fetchedColumns', 'searcher.next', 'partition.stats', 'clusteringsInQueryOrder.iterator', 'clusteringIter.hasNext', 'searcher.hasNext', 'searcher.next', 'clusteringIter.next', 'endOfData']
['clusteringIter.hasNext', 'searcher.hasNext', 'searcher.next', 'clusteringIter.next', 'endOfData']
['sstable.getSSTableMetadata', 'sstable.getSSTableMetadata', 'Slice.make', '.']
['sb.append', 'sb.append', '.', 'clustering.toString', 'sb.append', 'sb.append', '.']
['metadata.clusteringColumns', '.', 'clusterings.size', 'sb.append', '.', 'ColumnDefinition.toCQLString', 'metadata.clusteringColumns', '.', 'sb.append', 'clusterings.size', 'sb.append', '.', '.', 'clustering.toCQLString', '.', 'sb.append', 'clusterings.size', 'appendOrderByToCQLString', 'sb.toString']
[None]
['clusterings.comparator', 'out.writeUnsignedVInt', 'clusterings.size', 'Clustering.serializer.serialize', 'comparator.subtypes']
['clusterings.comparator', 'TypeSizes.sizeofUnsignedVInt', 'clusterings.size', 'Clustering.serializer.serializedSize', 'comparator.subtypes']
['BTreeSet.builder', 'in.readUnsignedVInt', 'clusterings.add', 'Clustering.serializer.deserialize', 'comparator.subtypes', 'clusterings.build']
[None]
['slices.size', 'slices.hasLowerBound', 'slices.hasUpperBound']
['slices.selects']
['slices.forPaging']
['slices.hasUpperBound', 'partition.isEmpty', 'partition.metadata', '.', 'slices.get', '.', 'slices.size', 'partition.lastRow', '.']
['slices.size', 'slices.hasLowerBound']
['slices.inOrderTester', 'tester.isDone', 'tester.includes', 'row.clustering', 'row.filter', 'iterator.metadata', 'columnFilter.fetchedColumns', '.', 'row.filter', 'iterator.metadata', 'Transformation.apply']
['tester.isDone']
['tester.includes', 'row.clustering', 'row.filter', 'iterator.metadata']
['columnFilter.fetchedColumns', '.', 'row.filter', 'iterator.metadata']
['slices.makeSliceIterator']
['partition.unfilteredIterator']
['sstable.getSSTableMetadata', 'sstable.getSSTableMetadata', 'minClusteringValues.isEmpty', 'maxClusteringValues.isEmpty', 'slices.intersects']
['String.format']
['selectsAllPartition', 'sb.append', 'slices.toCQLString', 'appendOrderByToCQLString', 'sb.toString']
[None]
['Slices.serializer.serialize']
['Slices.serializer.serializedSize']
['Slices.serializer.deserialize']
['CompositeType.build', 'path.get']
['functions.getIndexedValueType', 'data.getCell', 'CellPath.create', 'cell.isLive', 'valueComparator.compare', 'cell.value']
['path.get']
['data.getCell', 'CellPath.create', 'cell.isLive']
[None]
['CBuilder.create', 'getIndexComparator', 'builder.add', 'prefix.size', 'builder.add', 'prefix.get']
['baseCfs.metadata.clusteringColumns', '.', 'indexEntry.clustering', 'CBuilder.create', 'baseCfs.getComparator', 'builder.add', 'clustering.get', 'indexEntry.primaryKeyLivenessInfo', '.', 'clustering.get', 'builder.build']
[None]
[None]
[None]
[None]
['serializeValues', 'pack', 'getElementCount']
['deserializeForNativeProtocol']
['validateForNativeProtocol']
['sizeOfValue', 'ByteBuffer.allocate', 'sizeOfCollectionSize', 'writeCollectionSize', 'writeValue', 'result.flip']
['output.putInt']
['input.getInt']
[None]
['output.putInt', 'output.putInt', 'value.remaining', 'output.put', 'value.duplicate']
['input.getInt', 'ByteBufferUtil.readBytes']
['value.remaining']
[None]
['CBuilder.create', 'getIndexComparator', 'builder.add', 'prefix.size', 'builder.add', 'prefix.get', 'prefix.size', 'baseCfs.metadata.clusteringColumns', '.', 'builder.add', 'path.get']
['indexEntry.clustering', 'CBuilder.create', 'baseCfs.getComparator', 'baseCfs.getComparator', '.', 'builder.add', 'clustering.get', 'indexEntry.primaryKeyLivenessInfo', '.', 'clustering.get', 'builder.build']
[None]
['data.getComplexColumnData', 'cell.isLive']
['staticConditions.isEmpty']
['columnConditions.isEmpty']
['Stream.concat', '.', '.', 'Collectors.toList', 'columnConditions.stream', 'staticConditions.stream']
['columnConditions.isEmpty', 'staticConditions.isEmpty']
['columnConditions.isEmpty', 'request.addConditions', 'staticConditions.isEmpty', 'request.addConditions']
['Stream.concat', '.', 'stream', 'e.getFunctions', '.', '.', 'Collectors.toList', 'columnConditions.stream', 'staticConditions.stream']
[None]
['condition.column.isStatic', 'staticConditions.isEmpty', 'columnConditions.isEmpty', 'conds.add']
[None]
[None]
[None]
[None]
[None]
['setName', 'org.apache.thrift.TBaseHelper.rightSize', 'name.array']
[None]
['setName', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['unsetName', 'setName', 'unsetValidation_class', 'setValidation_class', 'unsetIndex_type', 'setIndex_type', 'unsetIndex_name', 'setIndex_name', 'unsetIndex_options', 'setIndex_options']
['getName', 'getValidation_class', 'getIndex_type', 'getIndex_name', 'getIndex_options']
['isSetName', 'isSetValidation_class', 'isSetIndex_type', 'isSetIndex_name', 'isSetIndex_options']
['.']
['.', 'that.isSetName', '.', '.', 'that.isSetValidation_class', '.', '.', 'that.isSetIndex_type', '.', '.', 'that.isSetIndex_name', '.', '.', 'that.isSetIndex_options', '.']
['isSetName', 'builder.append', 'builder.append', 'isSetValidation_class', 'builder.append', 'builder.append', 'isSetIndex_type', 'builder.append', 'builder.append', 'index_type.getValue', 'isSetIndex_name', 'builder.append', 'builder.append', 'isSetIndex_options', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetName', 'isSetName', 'isSetName', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetValidation_class', 'isSetValidation_class', 'isSetValidation_class', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIndex_type', 'isSetIndex_type', 'isSetIndex_type', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIndex_name', 'isSetIndex_name', 'isSetIndex_name', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetIndex_options', 'isSetIndex_options', 'isSetIndex_options', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetIndex_type', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetIndex_name', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetIndex_options', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'struct.isSetIndex_type', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.index_type.getValue', 'oprot.writeFieldEnd', 'struct.isSetIndex_name', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'struct.isSetIndex_options', 'oprot.writeFieldBegin', 'oprot.writeMapBegin', 'struct.index_options.size', 'struct.index_options.entrySet', 'oprot.writeString', '_iter94.getKey', 'oprot.writeString', '_iter94.getValue', 'oprot.writeMapEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeString', 'struct.isSetIndex_type', 'optionals.set', 'struct.isSetIndex_name', 'optionals.set', 'struct.isSetIndex_options', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetIndex_type', 'oprot.writeI32', 'struct.index_type.getValue', 'struct.isSetIndex_name', 'oprot.writeString', 'struct.isSetIndex_options', 'oprot.writeI32', 'struct.index_options.size', 'struct.index_options.entrySet', 'oprot.writeString', '_iter95.getKey', 'oprot.writeString', '_iter95.getValue']
['iprot.readBinary', 'struct.setNameIsSet', 'iprot.readString', 'struct.setValidation_classIsSet', 'iprot.readBitSet', 'incoming.get', 'IndexType.findByValue', 'iprot.readI32', 'struct.setIndex_typeIsSet', 'incoming.get', 'iprot.readString', 'struct.setIndex_nameIsSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'iprot.readString', 'struct.index_options.put', 'struct.setIndex_optionsIsSet']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.keysIndexCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['Keyspace.open', '.', '.', 'Keyspace.open', '.', '.', 'Keyspace.open', '.', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', '.', '.', '.', '.', 'cfs.forceBlockingFlush', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'Util.getAll', 'Util.cmd', '.', '.', 'assertEquals', 'cfs.metric.sstablesPerReadHistogram.cf.getCount']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'rms.add', '.', '.', '.', 'Util.writeColumnFamily', 'keyspace.getAllSSTables', 'assertEquals', 'ssTables.size', 'ssTables.get', '.', 'Util.assertEmpty', 'Util.cmd', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'RowUpdateBuilder.deleteRow', '.', 'FBUtilities.timestampMicros', 'Util.getOnlyRowUnfiltered', 'Util.cmd', '.', 'toCheck.cells', '.', 'Iterators.size', 'reTest']
['Util.getOnlyRowUnfiltered', 'Util.cmd', '.', 'toCheck.cells', '.', 'Iterators.size']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ColumnDefinition.regularDef', 'ByteBufferUtil.bytes', '.', '.', '.', '.', '.', '.', '.', '.', 'assertRangeCount', 'cfs.forceBlockingFlush', '.', '.', '.', '.', '.', '.', '.', '.', 'assertRangeCount', 'RowUpdateBuilder.deleteRow', '.', 'RowUpdateBuilder.deleteRow', '.', 'assertRangeCount', 'cfs.forceBlockingFlush', 'assertRangeCount', '.', '.', '.', '.', '.', '.', '.', '.', 'assertRangeCount', '.', '.', '.', '.', '.', '.', '.', '.', 'assertRangeCount', 'cfs.forceBlockingFlush', 'assertRangeCount']
['Assume.assumeTrue', 'FBUtilities.isWindows', 'Keyspace.open', '.', 'cfs.clearSnapshot', 'ScrubTest.fillIndexCF', 'cfs.snapshot', 'cfs.snapshot', 'cfs.getSnapshotDetails', 'assertEquals', 'snapshotDetails.size', 'assertTrue', 'snapshotDetails.containsKey', 'assertTrue', 'snapshotDetails.containsKey', 'ColumnFamilyStore.clearEphemeralSnapshots', 'cfs.getDirectories', 'cfs.getSnapshotDetails', 'assertEquals', 'snapshotDetails.size', 'assertTrue', 'snapshotDetails.containsKey', 'cfs.clearSnapshot']
['Keyspace.open', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'cfs.forceBlockingFlush', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'cfs.forceBlockingFlush', 'cfs.getDirectories', '.', 'Directories.getBackupsDirectory', 'assertTrue', 'desc.filenameFor', '.', 'desc.filenameFor']
['verify.run', 'cfs.forceBlockingFlush', 'verify.run']
['assertRangeCount', 'cfs.metadata.getColumnDefinition']
['Util.getAll', 'Util.cmd', '.', 'col.name.toString', '.', 'r.getCell', '.', '.', 'assertEquals']
['Keyspace.open', '.', 'ColumnFamilyStore.scrubDataDirectories', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', 'assertEquals', 'ssTables.size', 'ssTables.iterator', '.', 'ssTable.descriptor.filenameFor', 'ssTable.descriptor.tmpFilenameFor', '.', 'ssTable.selfRef', '.', 'ColumnFamilyStore.scrubDataDirectories', '.', '.', 'assertNotNull', 'assertEquals', 'ssTableFiles.size']
['iterator.isEmpty', 'version.storeRows', 'version.correspondingMessagingVersion', 'builder.build']
[None]
['ByteBufferUtil.writeWithShortLength', 'iterator.partitionKey', '.', 'DeletionTime.serializer.serialize', 'iterator.partitionLevelDeletion', 'header.hasStatic', 'UnfilteredSerializer.serializer.serializeStaticRow', 'iterator.staticRow']
['writePartitionHeader', 'writer.position', 'iterator.hasNext', 'add', 'iterator.next', 'close']
['writer.position']
['currentPosition', 'columnsIndex.add']
['currentPosition', 'unfiltered.clustering', 'UnfilteredSerializer.serializer.serialize', 'observers.isEmpty', 'unfiltered.isRow', 'unfiltered.clustering', 'unfiltered.kind', 'marker.isOpen', 'marker.openDeletionTime', 'currentPosition', 'DatabaseDescriptor.getColumnIndexSize', 'addIndexBlock']
['UnfilteredSerializer.serializer.writeEndOfPartition', 'addIndexBlock', 'columnsIndex.size']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn', 'setColumn', 'unsetSuper_column', 'setSuper_column', 'unsetCounter_column', 'setCounter_column', 'unsetCounter_super_column', 'setCounter_super_column']
['getColumn', 'getSuper_column', 'getCounter_column', 'getCounter_super_column']
['isSetColumn', 'isSetSuper_column', 'isSetCounter_column', 'isSetCounter_super_column']
['.']
['.', 'that.isSetColumn', '.', '.', 'that.isSetSuper_column', '.', '.', 'that.isSetCounter_column', '.', '.', 'that.isSetCounter_super_column', '.']
['isSetColumn', 'builder.append', 'builder.append', 'isSetSuper_column', 'builder.append', 'builder.append', 'isSetCounter_column', 'builder.append', 'builder.append', 'isSetCounter_super_column', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn', 'isSetColumn', 'isSetColumn', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSuper_column', 'isSetSuper_column', 'isSetSuper_column', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCounter_column', 'isSetCounter_column', 'isSetCounter_column', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCounter_super_column', 'isSetCounter_super_column', 'isSetCounter_super_column', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['isSetColumn', 'sb.append', 'sb.append', 'sb.append', 'isSetSuper_column', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetCounter_column', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetCounter_super_column', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['column.validate', 'super_column.validate', 'counter_column.validate', 'counter_super_column.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetColumn', 'oprot.writeFieldBegin', 'struct.column.write', 'oprot.writeFieldEnd', 'struct.isSetSuper_column', 'oprot.writeFieldBegin', 'struct.super_column.write', 'oprot.writeFieldEnd', 'struct.isSetCounter_column', 'oprot.writeFieldBegin', 'struct.counter_column.write', 'oprot.writeFieldEnd', 'struct.isSetCounter_super_column', 'oprot.writeFieldBegin', 'struct.counter_super_column.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetColumn', 'optionals.set', 'struct.isSetSuper_column', 'optionals.set', 'struct.isSetCounter_column', 'optionals.set', 'struct.isSetCounter_super_column', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetColumn', 'struct.column.write', 'struct.isSetSuper_column', 'struct.super_column.write', 'struct.isSetCounter_column', 'struct.counter_column.write', 'struct.isSetCounter_super_column', 'struct.counter_super_column.write']
['iprot.readBitSet', 'incoming.get', 'struct.column.read', 'struct.setColumnIsSet', 'incoming.get', 'struct.super_column.read', 'struct.setSuper_columnIsSet', 'incoming.get', 'struct.counter_column.read', 'struct.setCounter_columnIsSet', 'incoming.get', 'struct.counter_super_column.read', 'struct.setCounter_super_columnIsSet']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setSuper_column', 'org.apache.thrift.TBaseHelper.rightSize', 'super_column.array']
[None]
['setSuper_column', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
['setColumn', 'org.apache.thrift.TBaseHelper.rightSize', 'column.array']
[None]
['setColumn', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
['unsetColumn_family', 'setColumn_family', 'unsetSuper_column', 'setSuper_column', 'unsetColumn', 'setColumn']
['getColumn_family', 'getSuper_column', 'getColumn']
['isSetColumn_family', 'isSetSuper_column', 'isSetColumn']
['.']
['.', 'that.isSetColumn_family', '.', '.', 'that.isSetSuper_column', '.', '.', 'that.isSetColumn', '.']
['isSetColumn_family', 'builder.append', 'builder.append', 'isSetSuper_column', 'builder.append', 'builder.append', 'isSetColumn', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_family', 'isSetColumn_family', 'isSetColumn_family', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSuper_column', 'isSetSuper_column', 'isSetSuper_column', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn', 'isSetColumn', 'isSetColumn', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'isSetSuper_column', 'sb.append', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'isSetColumn', 'sb.append', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'struct.isSetSuper_column', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'struct.isSetColumn', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString', 'struct.isSetSuper_column', 'optionals.set', 'struct.isSetColumn', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetSuper_column', 'oprot.writeBinary', 'struct.isSetColumn', 'oprot.writeBinary']
['iprot.readString', 'struct.setColumn_familyIsSet', 'iprot.readBitSet', 'incoming.get', 'iprot.readBinary', 'struct.setSuper_columnIsSet', 'incoming.get', 'iprot.readBinary', 'struct.setColumnIsSet']
[None]
[None]
['names.isEmpty', 'names.iterator', 'iter.next', 'iter.hasNext', 'iter.next', 'name.ksName.equals', 'name.cfName.equals']
['.', '.', '.', '.']
['Objects.hashCode']
['Objects.toStringHelper', '.', '.', '.']
['out.putInt', 'updateChecksumInt', 'out.putLong', 'updateChecksumInt', 'updateChecksumInt', 'constructParametersString', 'parametersString.getBytes', 'String.format', 'out.putShort', 'updateChecksumInt', 'out.put', 'crc.update', 'out.putInt', 'crc.getValue']
['params.put', 'params.put', 'JSONValue.toJSONString']
['raf.getFilePointer', 'readHeader']
['input.readInt', 'updateChecksumInt', 'input.readLong', 'updateChecksumInt', 'updateChecksumInt', 'input.readShort', 'updateChecksumInt', 'input.readFully', 'checkcrc.update', 'input.readInt', 'checkcrc.getValue', 'parseCompression', 'JSONValue.parse']
['params.get', 'params.get']
['COMMIT_LOG_FILE_PATTERN.matcher', 'matcher.group', 'Long.parseLong', 'matcher.group', '.', 'Integer.parseInt', 'matcher.group']
[None]
[None]
['COMMIT_LOG_FILE_PATTERN.matcher', '.']
[None]
['equals']
[None]
['equalsIgnoringCompression', 'Objects.equal']
['Ordering.from', 'ReplayFilter.create', 'ColumnFamilyStore.all', 'ReplayPosition.getReplayPosition', 'cfs.getSSTables', 'SystemKeyspace.getTruncatedPosition', 'SystemKeyspace.getTruncatedAt', 'replayFilter.includes', 'logger.info', 'SystemKeyspace.removeTruncationRecord', 'replayPositionOrdering.max', 'Arrays.asList', 'cfPositions.put', 'replayPositionOrdering.min', 'cfPositions.values', 'logger.trace', 'FBUtilities.toString']
['recover']
['invalidMutations.entrySet', 'logger.warn', 'String.format', 'entry.getValue', '.', 'entry.getKey', 'FBUtilities.waitOnFutures', 'logger.trace', 'futures.clear', 'keyspace.getName', '.', 'futures.addAll', 'keyspace.flush', 'futures.add', 'Keyspace.open', '.', '.', 'FBUtilities.waitOnFutures', 'replayedCount.get']
['reader.length', 'reader.seek', 'updateChecksumInt', 'updateChecksumInt', 'updateChecksumInt', 'reader.getPosition', 'reader.readInt', 'reader.readInt', 'crc.getValue', 'handleReplayError', 'reader.getPath', 'reader.length', 'handleReplayError', 'reader.getPath']
[None]
[None]
['System.getProperty', 'HashMultimap.create', 'System.getProperty', '.', 'rawPair.trim', '.', 'Schema.instance.getKeyspaceInstance', 'ks.getColumnFamilyStore', 'String.format', 'toReplay.put']
['mutation.getPartitionUpdates']
[None]
['toReplay.get', 'mutation.getKeyspaceName', 'Collections.emptySet', 'Iterables.filter', 'mutation.getPartitionUpdates', 'cfNames.contains', 'upd.metadata']
['cfNames.contains', 'upd.metadata']
['toReplay.containsEntry']
['CommitLogDescriptor.fromFileName', 'file.getName', 'RandomAccessReader.open', 'logAndCheckIfShouldSkip', 'reader.seek', 'replaySyncSection', 'reader.length', 'desc.fileName', 'CommitLogDescriptor.readHeader', 'handleReplayError', 'handleReplayError', 'logAndCheckIfShouldSkip', 'CompressionParams.createCompressor', 'handleReplayError', 'e.getMessage', 'reader.length', 'reader.getFilePointer', 'readSyncMarker', 'logger.isTraceEnabled', 'logger.trace', 'reader.getFilePointer', 'reader.readInt', 'desc.fileName', 'reader.length', 'reader.getFilePointer', 'logger.isTraceEnabled', 'logger.trace', 'reader.readFully', 'compressor.uncompress', 'ByteBuffer.wrap', 'reader.getPath', 'handleReplayError', 'replaySyncSection', 'logger.debug']
['logger.debug', 'file.getPath', 'desc.getMessagingVersion', 'logger.trace']
['reader.getFilePointer', 'reader.isEOF', 'reader.getFilePointer', 'logger.isTraceEnabled', 'logger.trace', 'reader.readInt', 'logger.trace', 'reader.getFilePointer', 'handleReplayError', 'reader.readLong', 'reader.readInt', 'checksum.reset', 'checksum.update', 'updateChecksumInt', 'checksum.getValue', 'handleReplayError', 'reader.readFully', 'reader.readLong', 'reader.readInt', 'handleReplayError', 'checksum.update', 'checksum.getValue', 'handleReplayError', 'replayMutation', 'reader.getFilePointer']
['Mutation.serializer.deserialize', 'desc.getMessagingVersion', 'mutation.getPartitionUpdates', 'upd.validate', 'invalidMutations.get', 'invalidMutations.put', 'i.incrementAndGet', 'JVMStabilityInspector.inspectThrowable', 'File.createTempFile', 'out.write', 'handleReplayError', 'f.getAbsolutePath', 'logger.isTraceEnabled', 'logger.trace', 'mutation.getKeyspaceName', 'mutation.key', 'StringUtils.join', 'mutation.getPartitionUpdates', '.', 'futures.offer', 'mutationInitiator.initiateMutation', 'futures.size', 'futures.isEmpty', 'futures.peek', '.', 'FBUtilities.waitOnFuture', 'futures.poll']
['fm.getPartitionUpdates', 'archiver.precision.toMillis', 'upd.maxTimestamp']
['String.format', 'logger.error', 'Boolean.getBoolean', 'logger.error', 'CommitLog.handleCommitError', 'logger.error']
['segmentManagementTasks.poll', 'availableSegments.isEmpty', 'activeSegments.isEmpty', 'logger.trace', 'availableSegments.add', 'CommitLogSegment.createSegment', 'hasAvailableSegments.signalAll', 'unusedCapacity', 'segmentsToRecycle.add', 'DatabaseDescriptor.getCommitLogSegmentSize', 'flushDataFrom', 'segmentManagementTasks.take', 'task.run', 'JVMStabilityInspector.inspectThrowable', 'CommitLog.handleCommitError', 'Uninterruptibles.sleepUninterruptibly', 'managerThread.start']
['segmentManagementTasks.poll', 'availableSegments.isEmpty', 'activeSegments.isEmpty', 'logger.trace', 'availableSegments.add', 'CommitLogSegment.createSegment', 'hasAvailableSegments.signalAll', 'unusedCapacity', 'segmentsToRecycle.add', 'DatabaseDescriptor.getCommitLogSegmentSize', 'flushDataFrom', 'segmentManagementTasks.take', 'task.run', 'JVMStabilityInspector.inspectThrowable', 'CommitLog.handleCommitError', 'Uninterruptibles.sleepUninterruptibly']
['allocatingFrom', 'segment.allocate', 'advanceAllocatingFrom']
['advanceAllocatingFrom']
['availableSegments.poll', 'activeSegments.add', 'commitLog.archiver.maybeArchive', 'old.discardUnusedTail', 'commitLog.requestExtraSync', 'hasAvailableSegments.register', 'commitLog.metrics.waitingOnSegmentAllocation.time', 'wakeManager', 'availableSegments.isEmpty', 'signal.cancel', 'signal.awaitUninterruptibly']
['segmentManagementTasks.add', 'Runnables.doNothing']
['segmentsToRecycle.get', 'segmentsToRecycle.size', 'advanceAllocatingFrom', 'last.waitForModifications', 'Keyspace.writeOrder.awaitNewBarrier', 'flushDataFrom', 'future.get', 'segment.markClean', 'segment.getContext', 'segment.isUnused', 'recycleSegment', 'activeSegments.peek', 'logger.error', 'logger.error']
['commitLog.archiver.maybeWaitForArchiving', 'segment.getName', 'activeSegments.remove', 'discardSegment', 'logger.warn']
['logger.trace', 'FileUtils.deleteWithConfirm']
['logger.trace', 'segmentManagementTasks.add', 'segment.discard']
['segment.discard']
['size.addAndGet']
['size.get']
['DatabaseDescriptor.getTotalCommitlogSpaceInMB', 'size.get', 'logger.trace']
['Iterables.concat', 'segment.getName', '.']
['wakeManager']
['segments.isEmpty', 'Futures.immediateFuture', 'segments.get', '.', 'segments.size', 'segment.getDirtyCFIDs', 'Schema.instance.getCF', 'logger.trace', 'segment.markClean', 'segment.getContext', 'flushes.containsKey', 'Keyspace.open', '.', 'flushes.put', 'cfs.forceFlush', 'cfs.forceFlush', 'Futures.allAsList', 'flushes.values']
['logger.trace', 'awaitManagementTasksCompletion', 'shutdown', 'awaitTermination', 'closeAndDeleteSegmentUnsafe', 'activeSegments.clear', 'closeAndDeleteSegmentUnsafe', 'availableSegments.clear', 'segmentManagementTasks.clear', 'size.set', 'logger.trace']
['segmentManagementTasks.isEmpty', 'Thread.yield', 'Uninterruptibles.sleepUninterruptibly']
['segment.discard']
['wakeManager']
['managerThread.join', 'segment.close', 'segment.close', 'CompressedSegment.shutdown']
['Collections.unmodifiableCollection']
['CommitLog.instance.sync', 'DatabaseDescriptor.getCommitLogLocation', 'replayer.recover', 'commitLogDir.listFiles']
['Mutation.serializer.deserialize', 'desc.getMessagingVersion', 'Assert.assertTrue', 'processor.apply']
['PaxosState.commit', 'Tracing.trace', 'MessagingService.instance', '.', 'WriteResponse.createMessage']
['row.getUUID', 'row.getString', 'row.getString', 'row.getLong', 'row.getLong', 'row.getLong', 'row.getMap', 'result.put', 'id.toString', 'FBUtilities.toString']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['buff.append', 'getTaskType', 'buff.append', '.', 'getId', '.', 'buff.append', '.', '.', 'getColumnFamily', '.', 'getKeyspace', 'buff.append', 'buff.append', '.', '.', 'getTotal', 'getCompleted', 'buff.append', '.', '.']
['ret.put', 'getId', 'getId', '.', 'ret.put', 'getKeyspace', 'ret.put', 'getColumnFamily', 'ret.put', 'Long.toString', 'ret.put', 'Long.toString', 'ret.put', 'tasktype.toString', 'ret.put', 'ret.put', 'compactionId.toString']
[None]
[None]
[None]
['getCompactionInfo', '.', 'StorageService.instance.reportSeverity']
['StorageService.instance.reportSeverity']
[None]
['DatabaseDescriptor.getCompactionThroughputMbPerSec', 'StorageService.instance.isBootstrapMode', 'compactionRateLimiter.getRate', 'compactionRateLimiter.setRate']
['cfs.isAutoCompactionDisabled', 'logger.trace', 'Collections.emptyList', 'compactingCF.count', 'executor.getActiveCount', 'executor.getMaximumPoolSize', 'logger.trace', 'cfs.keyspace.getName', 'Collections.emptyList', 'logger.trace', 'cfs.keyspace.getName', 'cfs.getCompactionStrategyManager', '.', 'executor.isShutdown', 'logger.info', 'Collections.emptyList', 'compactingCF.add', 'futures.add', 'executor.submit']
['cfs.getTracker', '.', '.']
['executor.shutdown', 'validationExecutor.shutdown', 'CompactionMetrics.getCompactions', 'compactionHolder.stop', 'Arrays.asList', 'exec.awaitTermination', 'logger.error']
['executor.shutdown', 'executor.awaitTermination']
['logger.trace', 'cfs.keyspace.getName', 'cfs.isValid', 'logger.trace', 'cfs.getCompactionStrategyManager', 'strategy.getNextBackgroundTask', 'getDefaultGcBefore', 'FBUtilities.nowInSeconds', 'logger.trace', 'task.execute', 'compactingCF.remove', 'submitBackground']
['cfs.markAllCompacting', 'Lists.newArrayList', 'operation.filterSSTables', 'Iterables.isEmpty', 'logger.info', 'cfs.keyspace.getName', 'executor.isShutdown', 'logger.info', 'compacting.split', 'singleton', 'transactions.add', 'futures.add', 'executor.submit', 'operation.execute', 'compacting.originals', '.', 'FBUtilities.waitOnFutures', 'Throwables.close', 'logger.error']
['operation.execute']
['input.originals']
['scrubOne']
['cfs.isIndex', 'parallelAllSSTableOperation', 'input.originals', 'verifyOne', 'input.onlyOne']
['input.originals']
['verifyOne', 'input.onlyOne']
['parallelAllSSTableOperation', 'transaction.originals', 'sstables.iterator', 'iter.hasNext', 'iter.next', 'sstable.descriptor.version.equals', 'sstable.descriptor.getFormat', '.', 'transaction.cancel', 'iter.remove', 'cfs.getCompactionStrategyManager', '.', 'task.setUserDefined', 'task.setCompactionType', 'task.execute']
['transaction.originals', 'sstables.iterator', 'iter.hasNext', 'iter.next', 'sstable.descriptor.version.equals', 'sstable.descriptor.getFormat', '.', 'transaction.cancel', 'iter.remove']
['cfs.getCompactionStrategyManager', '.', 'task.setUserDefined', 'task.setCompactionType', 'task.execute']
['cfStore.isIndex', 'StorageService.instance.getLocalRanges', 'keyspace.getName', 'ranges.isEmpty', 'logger.info', 'cfStore.indexManager.hasIndexes', 'parallelAllSSTableOperation', 'Lists.newArrayList', 'transaction.originals', 'Collections.sort', 'CleanupStrategy.get', 'FBUtilities.nowInSeconds', 'doCleanupOne']
['Lists.newArrayList', 'transaction.originals', 'Collections.sort']
['CleanupStrategy.get', 'FBUtilities.nowInSeconds', 'doCleanupOne']
['cfs.getTracker', '.', 'sstables.releaseIfHolds', 'sstable.isMarkedCompacted', 'compactedSSTables.add', 'sstables.release', 'cfs.getTracker', '.', 'performAnticompaction', 'executor.isShutdown', 'logger.info', 'sstables.release', 'Futures.immediateCancelledFuture', 'ListenableFutureTask.create', 'executor.submit']
['cfs.getTracker', '.', 'sstables.releaseIfHolds', 'sstable.isMarkedCompacted', 'compactedSSTables.add', 'sstables.release', 'cfs.getTracker', '.', 'performAnticompaction']
['logger.info', 'cfs.keyspace.getName', 'cfs.getColumnFamilyName', 'validatedForRepair.size', 'cfs.getLiveSSTables', 'logger.trace', 'sstables.iterator', 'Range.normalize', 'sstableIterator.hasNext', 'sstableIterator.next', 'sstable.first.getToken', 'sstable.last.getToken', 'r.contains', 'logger.info', 'sstable.descriptor.getMetadataSerializer', '.', 'sstable.reloadSSTableMetadata', 'mutatedRepairStatuses.add', 'sstableIterator.remove', 'sstableRange.intersects', 'logger.info', 'logger.info', 'nonAnticompacting.add', 'sstableIterator.remove', 'cfs.getTracker', '.', 'txn.cancel', 'Sets.union', 'validatedForRepair.release', 'Sets.union', 'txn.originals', '.', 'sstables.isEmpty', 'doAntiCompaction', 'txn.finish', 'validatedForRepair.release', 'txn.close', 'logger.info']
['FBUtilities.waitOnFutures', 'submitMaximal', 'getDefaultGcBefore', 'FBUtilities.nowInSeconds']
['cfStore.getCompactionStrategyManager', '.', 'Collections.emptyList', 'task.execute', 'executor.isShutdown', 'logger.info', 'Collections.emptyList', 'futures.add', 'executor.submit']
['task.execute']
['dataFiles.split', 'ArrayListMultimap.create', 'Descriptor.fromFilename', 'filename.trim', 'Schema.instance.getCFMetaData', 'logger.warn', 'Keyspace.open', '.', 'descriptors.put', 'cfs.getDirectories', '.', '.', 'filename.trim', 'FBUtilities.nowInSeconds', 'descriptors.keySet', 'futures.add', 'submitUserDefined', 'descriptors.get', 'getDefaultGcBefore', 'FBUtilities.waitOnFutures']
['dataFiles.split', 'Maps.newHashMap', 'Descriptor.fromFilename', 'filename.trim', 'Schema.instance.getCFMetaData', 'logger.warn', 'Keyspace.open', '.', 'cfs.getDirectories', '.', '.', 'filename.trim', 'descriptors.put', 'descriptors.entrySet', 'entry.getKey', 'StorageService.instance.getLocalRanges', 'keyspace.getName', 'cfs.indexManager.hasIndexes', 'lookupSSTable', 'entry.getValue', 'ranges.isEmpty', 'logger.error', 'logger.warn', 'entry.getValue', 'cfs.getTracker', '.', 'CleanupStrategy.get', 'FBUtilities.nowInSeconds', 'doCleanupOne', 'logger.error', 'String.format', 'e.getLocalizedMessage']
['dataFiles.size', 'lookupSSTable', 'logger.info', 'sstables.add', 'sstables.isEmpty', 'logger.info', 'cfs.getCompactionStrategyManager', '.', 'task.execute', 'executor.isShutdown', 'logger.info', 'Futures.immediateCancelledFuture', 'executor.submit']
['dataFiles.size', 'lookupSSTable', 'logger.info', 'sstables.add', 'sstables.isEmpty', 'logger.info', 'cfs.getCompactionStrategyManager', '.', 'task.execute']
['cfs.getSSTables', 'sstable.descriptor.equals']
['doValidationCompaction', 'validator.fail', 'validationExecutor.submit']
['doValidationCompaction', 'validator.fail']
['Schema.instance.getNonSystemKeyspaces', 'Keyspace.open', '.', 'cfs.disableAutoCompaction']
['scrubber.getScrubInfo', 'metrics.beginCompaction', 'scrubber.scrub', 'metrics.finishCompaction']
['verifier.getVerifyInfo', 'metrics.beginCompaction', 'verifier.verify', 'metrics.finishCompaction']
['Range.normalize', 'sortedRanges.get', 'sstable.first.getToken', '.', 'sortedRanges.size', 'sortedRanges.get', 'range.right.isMinimum', 'sstable.firstKeyBeyond', 'range.right.maxKeyBound', 'sortedRanges.size', 'sortedRanges.get', 'firstBeyondRange.getToken', '.']
['cfs.isIndex', 'txn.onlyOne', '.', 'sstable.first.getToken', 'sstable.last.getToken', 'txn.obsoleteOriginals', 'txn.finish', 'needsCleanup', 'logger.trace', 'System.nanoTime', 'Math.max', 'SSTableReader.getApproximateKeyCount', 'txn.originals', 'logger.isTraceEnabled', 'logger.trace', 'logger.info', 'cfs.getDirectories', '.', 'cfs.getExpectedCompactedFileSize', 'txn.originals', 'FBUtilities.nowInSeconds', 'cleanupStrategy.getScanner', 'getRateLimiter', 'txn.originals', 'getDefaultGcBefore', 'Collections.singletonList', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'createWriter', 'sstable.getSSTableMetadata', 'ci.hasNext', 'ci.isStopRequested', 'ci.getCompactionInfo', 'ci.next', 'cleanupStrategy.cleanup', 'writer.append', 'cfs.indexManager.flushAllIndexesBlocking', 'writer.finish', 'finished.isEmpty', 'TimeUnit.NANOSECONDS.toMillis', 'System.nanoTime', 'sstable.onDiskLength', 'newSstable.onDiskLength', 'logger.info', 'String.format', 'finished.get', '.']
['cfs.indexManager.hasIndexes']
[None]
[None]
['cfs.cleanupCache']
['sstable.getScanner']
[None]
['sstable.getScanner']
['Range.isInRanges', 'partition.partitionKey', '.', 'cfs.invalidateCachedPartition', 'partition.partitionKey', 'cfs.indexManager.deletePartition']
['FileUtils.createDirectory', 'SerializationHeader.make', 'Collections.singleton', 'SSTableWriter.create', 'Descriptor.fromFilename', 'cfs.getSSTablePath', 'sstable.getSSTableLevel', 'cfs.indexManager.listIndexes']
['FileUtils.createDirectory', 'sstable.getSSTableLevel', 'sstable.getSSTableLevel', 'SSTableWriter.create', 'Descriptor.fromFilename', 'cfs.getSSTablePath', 'SerializationHeader.make', 'cfs.indexManager.listIndexes']
['cfs.isValid', 'validator.desc.sessionId.toString', 'FBUtilities.nowInSeconds', 'cfs.snapshotExists', 'cfs.getSnapshotSSTableReader', 'cfs.gcBefore', 'cfs.getSnapshotCreationTime', 'StorageService.instance.forceKeyspaceFlush', 'cfs.keyspace.getName', 'ActiveRepairService.instance.getParentRepairSession', 'cfs.selectAndReference', 'View.select', 's.isRepaired', '.', 'sstable.first.getToken', 'sstable.last.getToken', 'sstablesToValidate.add', 'ActiveRepairService.instance.currentlyRepairing', 'Sets.intersection', '.', 'logger.error', 'Refs.tryRef', 'logger.error', 'sstableCandidates.release', 'prs.addSSTables', 'getDefaultGcBefore', 'sstable.estimatedKeysForRanges', 'Math.min', 'Math.floor', 'Math.log', 'cfs.getPartitioner', 'tree.addMerkleTrees', 'Math.pow', 'System.nanoTime', 'cfs.getCompactionStrategyManager', '.', 'validator.prepare', 'ci.hasNext', 'ci.isStopRequested', 'ci.getCompactionInfo', 'ci.next', 'validator.add', 'validator.complete', 'cfs.clearSnapshot', 'logger.isTraceEnabled', 'TimeUnit.NANOSECONDS.toMillis', 'System.nanoTime', 'logger.trace', 'MerkleTrees.serializer.serializedSize', 'sstables.release']
['logger.info', 'repaired.originals', '.', 'cfs.getCompactionStrategyManager', '.', 'repaired.originals', 'repaired.split', 'antiCompactGroup', 'logger.info', 'repaired.originals', '.']
['anticompactionGroup.originals', '.', 'i.hasNext', 'i.next', '.', 'sstable.getFilename', 'logger.info', 'i.remove', 'anticompactionGroup.originals', '.', 'logger.info', 'logger.info', 'anticompactionGroup.originals', 'cfs.getDirectories', '.', 'cfs.getExpectedCompactedFileSize', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', 'strategy.getScanners', 'anticompactionGroup.originals', 'getDefaultGcBefore', 'UUIDGen.getTimeUUID', 'Math.max', 'SSTableReader.getApproximateKeyCount', 'repairedSSTableWriter.switchWriter', 'CompactionManager.createWriterForAntiCompaction', 'unRepairedSSTableWriter.switchWriter', 'CompactionManager.createWriterForAntiCompaction', 'ci.hasNext', 'ci.next', 'containmentChecker.contains', 'partition.partitionKey', '.', 'repairedSSTableWriter.append', 'unRepairedSSTableWriter.append', 'anticompactionGroup.permitRedundantTransitions', 'repairedSSTableWriter.setRepairedAt', '.', 'unRepairedSSTableWriter.prepareToCommit', 'anticompactedSSTables.addAll', 'repairedSSTableWriter.finished', 'anticompactedSSTables.addAll', 'unRepairedSSTableWriter.finished', 'repairedSSTableWriter.commit', 'unRepairedSSTableWriter.commit', 'logger.trace', 'cfs.keyspace.getName', 'cfs.getColumnFamilyName', 'anticompactedSSTables.size', 'JVMStabilityInspector.inspectThrowable', 'logger.error']
['metrics.beginCompaction', 'builder.build', 'metrics.finishCompaction', 'executor.isShutdown', 'logger.info', 'executor.submit']
['metrics.beginCompaction', 'builder.build', 'metrics.finishCompaction']
['AutoSavingCache.flushInProgress.add', 'writer.cacheType', 'logger.trace', 'writer.getCompactionInfo', 'metrics.beginCompaction', 'writer.saveCache', 'metrics.finishCompaction', 'AutoSavingCache.flushInProgress.remove', 'writer.cacheType', 'executor.isShutdown', 'logger.info', 'Futures.immediateCancelledFuture', 'executor.submit']
['AutoSavingCache.flushInProgress.add', 'writer.cacheType', 'logger.trace', 'writer.getCompactionInfo', 'metrics.beginCompaction', 'writer.saveCache', 'metrics.finishCompaction', 'AutoSavingCache.flushInProgress.remove', 'writer.cacheType']
['metrics.beginCompaction', 'redistribution.redistributeSummaries', 'metrics.finishCompaction']
['cfs.isIndex', 'cfs.gcBefore']
[None]
['metrics.beginCompaction', 'builder.run', 'metrics.finishCompaction', 'executor.isShutdown', 'logger.info', 'executor.submit']
['metrics.beginCompaction', 'builder.run', 'metrics.finishCompaction']
['CompactionMetrics.getCompactions', '.']
['isCompactionManager.set']
['DebuggableThreadPoolExecutor.maybeResetTraceSessionWrapper', 'DebuggableThreadPoolExecutor.extractThrowable', 'logger.info', 't.getMessage', 't.getSuppressed', 't.getSuppressed', 'logger.warn', 'logger.trace', 'DebuggableThreadPoolExecutor.handleOrLog', 'SnapshotDeletingTask.rescheduleFailedTasks']
['CompactionMetrics.getCompactions', 'compactionHolders.size', 'out.add', 'ci.getCompactionInfo', '.']
['CompactionMetrics.getCompactions', 'compactionHolders.size', 'out.add', 'ci.getCompactionInfo', '.']
['SystemKeyspace.getCompactionHistory']
['metrics.bytesCompacted.getCount']
['metrics.totalCompactionsCompleted.getCount']
['metrics.pendingTasks.getValue']
['metrics.completedTasks.getValue']
['OperationType.valueOf', 'CompactionMetrics.getCompactions', 'holder.getCompactionInfo', '.', 'holder.stop']
['CompactionMetrics.getCompactions', 'holder.getCompactionInfo', '.', 'holderId.equals', 'UUID.fromString', 'holder.stop']
['executor.getCorePoolSize']
['executor.setCorePoolSize']
['executor.getMaximumPoolSize']
['executor.setMaximumPoolSize']
['validationExecutor.getCorePoolSize']
['validationExecutor.setCorePoolSize']
['validationExecutor.getMaximumPoolSize']
['validationExecutor.setMaximumPoolSize']
['metadata.add', 'interruptCompactionFor']
['System.nanoTime', 'TimeUnit.MINUTES.toNanos', 'System.nanoTime', 'CompactionManager.instance.isCompacting', 'Uninterruptibles.sleepUninterruptibly']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'CFMetaData.compile']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'RowUpdateBuilder.deleteRow', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'FBUtilities.waitOnFutures', 'CompactionManager.instance.submitMaximal', 'cfs.invalidateCachedPartition', 'dk', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertEquals', 'partition.rowCount']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'RowUpdateBuilder.deleteRow', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'Util.dk', 'Util.dk', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'cfs.getCompactionStrategyManager', '.', '.', 'Util.assertEmpty', 'Util.cmd', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertEquals', 'partition.rowCount']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', '.', '.', '.', '.', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'RowUpdateBuilder.deleteRow', '.', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', 'RowUpdateBuilder.deleteRow', '.', 'cfs.forceBlockingFlush', 'cfs.getCompactionStrategyManager', '.', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertEquals', 'partition.rowCount', 'assertFalse', 'row.hasLiveData', 'FBUtilities.nowInSeconds']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'RowUpdateBuilder.deleteRow', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'Util.compactAll', '.', 'assertTrue', 'cfs.getLiveSSTables', '.', 'Util.assertEmpty', 'Util.cmd', '.']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'dk', 'rm.add', 'PartitionUpdate.fullPartitionDelete', 'dk', 'FBUtilities.nowInSeconds', 'rm.applyUnsafe', '.', '.', '.', '.', 'assertFalse', 'Util.getOnlyPartitionUnfiltered', '.', 'Util.cmd', '.', 'cfs.forceBlockingFlush', 'Util.compactAll', '.', 'Util.assertEmpty', 'Util.cmd', '.']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'dk', 'rm.add', 'PartitionUpdate.fullPartitionDelete', 'dk', 'FBUtilities.nowInSeconds', 'rm.applyUnsafe', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertFalse', 'partition.partitionLevelDeletion', '.', 'cfs.forceBlockingFlush', 'Util.compactAll', '.', 'assertFalse', 'Util.getOnlyPartitionUnfiltered', '.', 'Util.cmd', '.', 'builder.clustering', '.', '.', '.', 'String.valueOf', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertEquals', 'partition.rowCount']
['Keyspace.open', '.', 'cfs.disableAutoCompaction', 'QueryProcessor.executeInternal', 'String.format', 'cfs.forceBlockingFlush', 'QueryProcessor.executeInternal', 'String.format', 'assertEquals', 'result.size', 'QueryProcessor.executeInternal', 'String.format', 'cfs.forceBlockingFlush', 'assertEquals', 'cfs.getLiveSSTables', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertEquals', 'result.size', 'FBUtilities.waitOnFutures', 'CompactionManager.instance.submitMaximal', 'System.currentTimeMillis', 'assertEquals', 'cfs.getLiveSSTables', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertEquals', 'result.size', 'QueryProcessor.executeInternal', 'String.format', 'cfs.forceBlockingFlush', 'assertEquals', 'cfs.getLiveSSTables', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertEquals', 'result.size', 'QueryProcessor.executeInternal', 'String.format', 'cfs.forceBlockingFlush', 'FBUtilities.waitOnFutures', 'CompactionManager.instance.submitMaximal', 'System.currentTimeMillis', 'assertEquals', 'cfs.getLiveSSTables', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertEquals', 'result.size']
['isEnabled', 'maybeReload', 'repaired.getEstimatedRemainingTasks', 'unrepaired.getEstimatedRemainingTasks', 'repaired.getNextBackgroundTask', 'unrepaired.getNextBackgroundTask', 'unrepaired.getNextBackgroundTask', 'repaired.getNextBackgroundTask']
[None]
[None]
[None]
['cfs.getSSTables', 'getCompactionStrategyFor', '.', 'repaired.startup', 'unrepaired.startup']
['sstable.isRepaired']
['repaired.shutdown', 'unrepaired.shutdown']
['metadata.params.compaction.equals', 'reload']
['shouldBeEnabled', 'setStrategy', 'shouldBeEnabled', 'disable', 'enable', 'startup']
['cfs.getTracker', '.', 'sstables.isEmpty', 'CompactionManager.instance.submitBackground']
[None]
['sumArrays', 'sumArrays']
['Math.max']
['repaired.getClass', '.', 'unrepaired.getClass', 'repaired.shouldDefragment']
['repaired.getClass', '.', 'unrepaired.getClass', 'repaired.getDirectories']
['sstable.isRepaired', 'repaired.addSSTable', 'unrepaired.addSSTable', 'sstable.isRepaired', 'repairedRemoved.add', 'unrepairedRemoved.add', 'sstable.isRepaired', 'repairedAdded.add', 'unrepairedAdded.add', 'repairedRemoved.isEmpty', 'repaired.replaceSSTables', 'repaired.addSSTable', 'unrepairedRemoved.isEmpty', 'unrepaired.replaceSSTables', 'unrepaired.addSSTable', 'sstable.isRepaired', 'unrepaired.removeSSTable', 'repaired.addSSTable', 'repaired.removeSSTable', 'unrepaired.addSSTable', 'sstable.isRepaired', 'repaired.removeSSTable', 'unrepaired.removeSSTable']
['repaired.enable', 'unrepaired.enable']
['repaired.disable', 'unrepaired.disable']
['sstable.isRepaired', 'repairedSSTables.add', 'unrepairedSSTables.add', 'sstables.size', 'repaired.getScanners', 'unrepaired.getScanners', 'Iterables.concat', 'scanners.add', 'scanner.close']
['getScanners', 'Collections.singleton']
['unrepaired.groupSSTablesForAntiCompaction']
['unrepaired.getMaxSSTableBytes']
['getCompactionStrategyFor', '.', 'txn.originals', '.', '.']
['cfs.runWithCompactionsDisabled', 'repaired.getMaximalTask', 'unrepaired.getMaximalTask', 'tasks.addAll', 'tasks.addAll']
['repaired.getMaximalTask', 'unrepaired.getMaximalTask', 'tasks.addAll', 'tasks.addAll']
['getCompactionStrategyFor', '.', 'sstables.iterator', '.']
['repaired.getEstimatedRemainingTasks', 'unrepaired.getEstimatedRemainingTasks']
['params.isEnabled']
['unrepaired.getName']
['Arrays.asList']
['logger.info', 'setStrategy', 'shouldBeEnabled', 'enable', 'disable', 'startup']
['repaired.shutdown', 'unrepaired.shutdown', 'CFMetaData.createCompactionStrategyInstance', 'CFMetaData.createCompactionStrategyInstance']
[None]
['Boolean.parseBoolean', 'params.options', '.']
['unrepaired.createSSTableMultiWriter', 'repaired.createSSTableMultiWriter']
[None]
['run', 'transaction.originals', '.']
['partialCompactionsAcceptable', 'transaction.originals', '.', 'logger.warn', 'StringUtils.join', 'transaction.originals', 'cfs.getMaxSizeFile', 'transaction.originals', 'transaction.cancel']
['transaction.originals', '.', 'cfs.getCompactionStrategyManager', 'DatabaseDescriptor.isSnapshotBeforeCompaction', 'cfs.snapshotWithoutFlush', 'System.currentTimeMillis', 'cfs.getExpectedCompactedFileSize', 'transaction.originals', 'Math.max', 'strategy.getMaxSSTableBytes', 'checkAvailableDiskSpace', 'Iterables.any', 'transaction.originals', 'sstable.descriptor.cfname.equals', 'transaction.opId', 'transaction.originals', 'ssTableLoggerMsg.append', 'String.format', 'sstr.getFilename', 'sstr.getSSTableLevel', 'ssTableLoggerMsg.append', 'logger.debug', 'System.nanoTime', 'getCompactionController', 'transaction.originals', 'Sets.difference', 'transaction.originals', 'controller.getFullyExpiredSSTables', 'FBUtilities.nowInSeconds', 'Refs.ref', 'strategy.getScanners', 'collector.beginCompaction', 'controller.cfs.getCompactionStrategyManager', 'ci.getCompactionInfo', 'getCompactionAwareWriter', 'getDirectories', 'writer.estimatedKeys', 'ci.hasNext', 'ci.isStopRequested', 'ci.getCompactionInfo', 'writer.append', 'ci.next', 'System.nanoTime', 'TimeUnit.MINUTES.toNanos', 'controller.maybeRefreshOverlaps', 'System.nanoTime', 'writer.finish', 'collector.finishCompaction', 'ci.getMergedRowCounts', 'TimeUnit.NANOSECONDS.toMillis', 'System.nanoTime', 'SSTableReader.getTotalBytes', 'transaction.originals', 'SSTableReader.getTotalBytes', 'newSSTableNames.append', '.', 'reader.descriptor.baseFilename', 'updateCompactionHistory', 'cfs.keyspace.getName', 'cfs.getColumnFamilyName', 'logger.debug', 'String.format', 'transaction.originals', '.', 'newSSTableNames.toString', 'getLevel', 'logger.trace', 'String.format', 'CompactionTask.addToTotalBytesCompacted', 'logger.trace', 'Refs.release', 'Refs.selfRefs']
['sstable.descriptor.cfname.equals']
[None]
['mergeSummary.append', 'String.format', 'mergedRows.put', 'SystemKeyspace.updateCompactionHistory', 'System.currentTimeMillis', 'mergeSummary.toString']
['cfs.getDirectories']
['Math.min', 'sstable.getSSTableMetadata']
['getDirectories', '.', 'reduceScopeForLimitedSpace', 'String.format']
[None]
[None]
[None]
[None]
['command.selectsKey', 'command.selectsClustering']
['indexHits.staticRow', 'command.isForThrift', 'command.metadata', 'prepareNext', 'prepareNext', 'indexHits.hasNext', 'index.decodeEntry', 'indexHits.next', 'BTreeSet.builder', 'index.baseCfs.getComparator', 'index.baseCfs.decorateKey', 'partitionKey.getKey', '.', 'isMatchingEntry', 'clusterings.add', 'entries.add', 'indexHits.hasNext', 'index.decodeEntry', 'indexHits.next', 'clusterings.isEmpty', 'clusterings.build', 'SinglePartitionReadCommand.create', 'command.nowInSec', 'command.columnFilter', 'command.rowFilter', 'filterStaleEntries', 'dataCmd.queryMemtableAndDisk', 'executionController.baseReadOpOrderGroup', 'indexKey.getKey', 'executionController.writeOpOrderGroup', 'command.nowInSec', 'dataIter.isEmpty', 'dataIter.close', 'indexHits.close', 'next.close']
['command.isForThrift']
['command.metadata']
['prepareNext']
['prepareNext']
['indexHits.hasNext', 'index.decodeEntry', 'indexHits.next', 'BTreeSet.builder', 'index.baseCfs.getComparator', 'index.baseCfs.decorateKey', 'partitionKey.getKey', '.', 'isMatchingEntry', 'clusterings.add', 'entries.add', 'indexHits.hasNext', 'index.decodeEntry', 'indexHits.next', 'clusterings.isEmpty', 'clusterings.build', 'SinglePartitionReadCommand.create', 'command.nowInSec', 'command.columnFilter', 'command.rowFilter', 'filterStaleEntries', 'dataCmd.queryMemtableAndDisk', 'executionController.baseReadOpOrderGroup', 'indexKey.getKey', 'executionController.writeOpOrderGroup', 'command.nowInSec', 'dataIter.isEmpty', 'dataIter.close']
[None]
['indexHits.close', 'next.close']
['entries.forEach', 'index.deleteStaleEntry']
['dataIter.partitionLevelDeletion', '.', 'dataIter.partitionLevelDeletion', 'entries.forEach', 'deletion.deletes', 'staleEntries.add', 'dataIter.metadata', 'findEntry', 'row.clustering', 'index.isStale', 'staleEntries.add', 'entries.size', 'entries.size', 'entries.get', 'comparator.compare', 'staleEntries.add', 'deleteAllEntries', 'Transformation.apply']
['findEntry', 'row.clustering', 'index.isStale', 'staleEntries.add']
['entries.size', 'entries.size', 'entries.get', 'comparator.compare', 'staleEntries.add']
['deleteAllEntries']
['CompositeType.getInstance', 'Arrays.asList', 'SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.denseCFMD']
['createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'comparator.compare', 'comparator.compare', 'comparator.compare', 'comparator.compare', 'comparator.compare', 'comparator.compare']
['ByteBufferUtil.bytesToHex', 'ByteBufferUtil.bytes', 'createCompositeKey', 'comparator.getString', '.', 'createCompositeKey', 'comparator.getString', '.']
['ByteBufferUtil.bytesToHex', 'ByteBufferUtil.bytes', 'createCompositeKey', 'key.equals', 'comparator.fromString', 'createCompositeKey', 'key.equals', 'comparator.fromString']
['createCompositeKey', 'comparator.validate', 'createCompositeKey', 'comparator.validate', 'createCompositeKey', 'comparator.validate', 'comparator.validate', 'fail', 'ByteBuffer.allocate', 'STR_.length', 'key.putShort', 'STR_.length', 'key.put', 'ByteBufferUtil.bytes', 'key.put', 'key.putShort', 'key.rewind', 'comparator.validate', 'fail', 'e.toString', '.', 'createCompositeKey', 'UUID.randomUUID', 'comparator.validate', 'fail', 'e.toString', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'createCompositeKey', 'ByteBufferUtil.bytes', 'FBUtilities.timestampMicros', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'cfs.metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'readPartition.iterator', 'compareValues', 'iter.next', '.', 'compareValues', 'iter.next', '.', 'compareValues', 'iter.next', '.', 'compareValues', 'iter.next', '.', 'compareValues', 'iter.next', '.']
['ByteBufferUtil.string', '.', 'c.value', 'ByteBufferUtil.string', 'c.value']
['TypeParser.parse', 'fail', 'TypeParser.parse', 'fail']
['TypeParser.parse', '.', 'TypeParser.parse', 'TypeParser.parse', '.', 'TypeParser.parse', 'TypeParser.parse', '.', 'TypeParser.parse', 'TypeParser.parse', '.', 'TypeParser.parse', 'TypeParser.parse', '.', 'TypeParser.parse']
['add', 'add', 'CompositeType.getInstance', 'builder.add', 'UTF8Type.instance.fromString', 'comp.fromString', 'comp.getString', 'builder.build', 'comp.split', 'assertEquals', 'UTF8Type.instance.getString']
['ByteBufferUtil.bytes', 'bytes.remaining', 'ByteBuffer.allocate', 'bb.putShort', 'bytes.remaining', 'bb.put', 'bb.put', 'bb.putShort', 'bb.put', 'UUIDGen.decompose', 'bb.put', 'bb.putShort', 'bb.put', 'bb.put', 'bb.rewind']
['channel.size', 'buffer.remaining']
['metadataBuffer.clear', 'channel.read', 'metadataBuffer.rewind', 'metadataBuffer.getInt', 'metadataBuffer.getInt', 'compressedBuffer.capacity', 'BufferPool.put', 'allocateBuffer', 'compressor.preferredBufferType', 'compressedBuffer.clear', 'compressedBuffer.limit', 'channel.read', 'compressedBuffer.rewind', 'buffer.position', 'buffer.capacity', 'BufferPool.put', 'allocateBuffer', 'compressor.preferredBufferType', 'buffer.clear', 'buffer.limit', 'compressor.uncompress', 'buffer.flip', 'getPath']
['BufferPool.put']
[None]
[None]
['compressor.preferredBufferType']
[None]
['input.getPosition', 'input.close', 'input.getPath', 'builder.withPosition', 'builder.withCompressor', 'builder.build']
['dataBuffer.take', 'decompress']
[None]
['info.parameters.getSstableCompressor', '.', '.', 'ThreadLocalRandom.current', '.', 'checksum.update', 'System.arraycopy', 'Ints.fromByteArray', 'checksum.getValue', 'checksum.reset']
[None]
['Thread.currentThread', '.', 'chunks.hasNext', 'chunks.next', 'source.read', 'dataBuffer.put', 'dataBuffer.put', 'dataBuffer.put']
['readerThread.interrupt']
['testResetAndTruncate', 'File.createTempFile', 'testResetAndTruncate', 'File.createTempFile']
['testResetAndTruncate', 'File.createTempFile', 'testResetAndTruncate', 'File.createTempFile']
['testResetAndTruncate', 'File.createTempFile', 'testResetAndTruncate', 'File.createTempFile']
['File.createTempFile', 'f.getAbsolutePath', 'CompressionParams.snappy', 'writer.write', 'STR_.getBytes', 'writer.mark', 'writer.write', 'STR_.getBytes', 'writer.resetAndTruncate', 'writer.write', 'STR_.getBytes', 'writer.finish', '.', 'f.length', 'reader.readLine', 'assertEquals', 'assertEquals', 'res.length', 'f.exists', 'assertTrue', 'f.delete', 'metadata.exists', 'metadata.delete']
['f.getAbsolutePath', '.', 'CompressionParams.snappy', 'SequentialWriter.open', 'writer.write', 'STR_.getBytes', 'writer.mark', 'writer.write', 'STR_.getBytes', 'writer.write', 'writer.resetAndTruncate', 'writer.write', 'STR_.getBytes', 'writer.finish', 'f.exists', 'f.length', 'builder.regions', 'MmappedRegions.map', 'builder.regions', 'MmappedRegions.map', 'f.length', 'builder.build', 'assertEquals', 'expected.length', 'reader.length', 'expected.length', 'reader.readFully', '.', 'builder.regions.close', 'f.exists', 'assertTrue', 'f.delete', 'metadata.exists', 'metadata.delete']
['file.seek', 'file.write', 'SyncUtil.sync']
['totalSize', 'sstable.getDataChannel', '.', 'getTransferSections', 'Math.min', 'limiter.acquire', 'out.applyToChannel', 'fc.transferTo', 'session.progress']
[None]
['transferSections.add', 'Pair.create', 'Pair.create', 'transferSections.add']
['testEmptyArray', 'testLongArray', 'testShortArray', 'testMappedFile']
['makeBB', 'src.position', 'src.put', 'src.flip', '.', 'makeBB', 'compressor.initialCompressedBufferLength', 'fillBBWithRandom', 'compressed.position', 'compressor.compress', 'compressed.flip', '.', '.', 'compressed.capacity', 'ByteBufferUtil.arrayCopy', 'compressed.capacity', 'compressor.uncompress', 'compressed.remaining', 'assertEquals', 'assertArrayEquals', 'Arrays.copyOfRange', 'Arrays.copyOfRange']
['testArrayUncompress']
['testArrayUncompress']
['testArrayUncompress', 'STR_.getBytes']
['testArrayUncompress', '.', 'testArrayUncompress']
['.', 'makeBB', 'src.put', 'src.flip', 'File.createTempFile', 'temp.deleteOnExit', 'compressor.initialCompressedBufferLength', '.', 'makeBB', 'compressor.initialCompressedBufferLength', 'dest.put', 'dest.clear', 'dest.position', 'compressor.compress', 'dest.position', 'FileChannel.open', 'temp.toPath', 'dest.clear', 'channel.write', 'Files.map', 'makeBB', 'mappedData.position', '.', 'compressor.uncompress', 'channel.close', 'result.flip', 'Assert.assertEquals', 'result.limit', 'result.limit', 'Assert.assertEquals', 'result.get']
['LZ4Compressor.create', 'Collections.<', 'testByteBuffers']
['DeflateCompressor.create', 'Collections.<', 'testByteBuffers']
['SnappyCompressor.create', 'Collections.<', 'testByteBuffers']
['compressor.supports', 'compressor.supports', 'compressor.preferredBufferType', 'BufferType.values', 'compressor.supports', 'BufferType.values', 'compressor.supports', 'BufferType.values', 'compressor.supports', 'testByteBuffers']
['.', 'typeIn.allocate', 'src.position', 'src.put', 'src.flip', '.', 'typeComp.allocate', 'compressor.initialCompressedBufferLength', 'compressed.capacity', '.', 'compressed.put', 'compressed.position', '.', 'compressed.capacity', 'compressor.compress', 'assertEquals', 'src.position', 'assertEquals', 'src.limit', 'assertEquals', 'compressed.capacity', 'compressed.limit', 'compressed.flip', '.', 'compressed.remaining', 'typeOut.allocate', 'result.position', '.', 'result.capacity', 'compressor.uncompress', 'assertEquals', 'compressed.position', 'assertEquals', 'compressed.limit', 'assertEquals', 'result.capacity', 'result.limit', 'result.position', 'result.get', 'compressor.getClass', '.']
['compressor.preferredBufferType', '.']
['dest.capacity', '.', 'dest.clear', 'dest.put']
['Collections.unmodifiableMap']
['forwardMap.clear', 'reverseMap.clear']
['forwardMap.containsKey']
['reverseMap.containsKey']
['forwardMap.entrySet']
['forwardMap.get']
['forwardMap.isEmpty']
['forwardMap.keySet']
['reverseMap.get', 'key.equals', 'forwardMap.put', 'Objects.equals', 'reverseMap.remove', 'reverseMap.put']
['m.entrySet', 'put', 'entry.getKey', 'entry.getValue']
['forwardMap.remove', 'reverseMap.remove', 'oldKey.equals']
['forwardMap.size']
['reverseMap.keySet']
['.', '.', '.', '.']
['create', 'key.unsharedHeapSize', 'value.unsharedHeapSize']
['key.unsharedHeapSize', 'value.unsharedHeapSize']
['map.capacity']
['map.setCapacity']
['map.isEmpty']
['map.size']
['map.weightedSize']
['map.clear']
['map.get']
['map.put']
['map.putIfAbsent']
['map.replace']
['map.remove']
['map.keySet', '.']
['map.descendingKeySetWithLimit', '.']
['map.containsKey']
['conf.set', 'conf.set', 'conf.set', 'String.valueOf']
['setInputColumnFamily']
['conf.set']
['conf.set']
['setOutputKeyspace', 'setOutputColumnFamily']
['conf.setInt']
['conf.getInt']
['conf.setInt']
['conf.getInt']
['conf.setInt']
['conf.getInt']
['conf.set', 'thriftToString']
['conf.get', 'predicateFromString']
['Hex.bytesToHex', 'serializer.serialize']
['deserializer.deserialize', 'Hex.hexToBytes']
['.', '.', 'conf.set', 'thriftToString']
['.', '.', '.', 'conf.set', 'thriftToString']
['.', 'conf.set', 'thriftToString']
['conf.get', 'keyRangeFromString']
['deserializer.deserialize', 'Hex.hexToBytes']
['conf.get']
['conf.get']
['setInputKeyspaceUserName', 'setInputKeyspacePassword']
['conf.set']
['conf.get']
['conf.set']
['conf.get']
['setOutputKeyspaceUserName', 'setOutputKeyspacePassword']
['conf.set']
['conf.get']
['conf.set']
['conf.get']
['conf.get']
['conf.get', 'conf.get']
['Boolean.parseBoolean', 'conf.get']
['conf.get']
['conf.set']
['conf.get']
['conf.set']
['Integer.parseInt', 'conf.get']
['conf.set']
['conf.get']
['conf.set']
['conf.set']
['FBUtilities.newPartitioner', 'conf.get']
['Integer.parseInt', 'conf.get']
['conf.set']
['conf.get']
['conf.set']
['conf.set']
['FBUtilities.newPartitioner', 'conf.get']
['conf.get']
['conf.get', 'String.valueOf']
['conf.set']
['conf.set']
['conf.setInt']
[None]
['Boolean.parseBoolean', 'conf.get']
['conf.set', 'Boolean.toString']
['getClientFromAddressList', 'ConfigHelper.getInputInitialAddress', '.', 'ConfigHelper.getInputRpcPort']
['getClientFromAddressList', 'ConfigHelper.getOutputInitialAddress', '.', 'ConfigHelper.getOutputRpcPort']
['createConnection', 'exceptions.add', 'logger.error', 'logger.error', 'exceptions.get', 'exceptions.size']
['getClientTransportFactory', '.']
['conf.get', '.', 'getClientTransportFactory', 'getOptions', 'factory.supportedOptions', 'factory.setOptions']
['Class.forName', '.']
['conf.get', 'options.put']
['leftValue.compareTo']
[None]
['CounterContext.instance', '.']
['logger.debug', 'session.planId', 'session.createConnection', 'incoming.start', 'incoming.sendInitMessage', 'logger.debug', 'session.planId', 'session.createConnection', 'outgoing.start', 'outgoing.sendInitMessage']
['outgoing.start', 'incoming.start']
['logger.debug', 'session.planId', 'Futures.immediateFuture', 'incoming.close', 'Futures.immediateFuture', 'outgoing.close', 'Futures.allAsList']
['sendMessage']
['outgoing.isClosed', 'outgoing.enqueue']
['outgoing.isClosed']
[None]
['socket.getChannel', 'socket.getOutputStream']
['socket.getChannel', 'Channels.newChannel', 'socket.getInputStream']
['FBUtilities.getBroadcastAddress', 'session.sessionIndex', 'session.planId', 'session.description', 'session.keepSSTableLevel', 'session.isIncremental', 'message.createMessage', 'getWriteChannel', 'out.write', 'out.flush']
['.', 'name']
['SettableFuture.create', 'closeFuture.compareAndSet', 'closeFuture.get']
['closeFuture.get']
['closeFuture.get', '.', 'socket.close', 'logger.debug']
[None]
['getReadChannel', 'isClosed', 'StreamMessage.deserialize', 'logger.debug', 'session.planId', 'session.messageReceived', 'close', 'JVMStabilityInspector.inspectThrowable', 'session.onError', 'signalCloseDone']
['o2.getPriority', 'o1.getPriority']
[None]
['messageQueue.put']
['getWriteChannel', 'isClosed', 'messageQueue.poll', 'logger.debug', 'session.planId', 'sendMessage', 'close', 'messageQueue.poll', 'sendMessage', 'session.onError', 'signalCloseDone']
['StreamMessage.serialize', 'out.flush', 'session.onError', 'close', 'session.onError']
['String.format']
['keyspace.getReplicationStrategy', '.']
['keyspace.getReplicationStrategy', 'keyspace.getReplicationStrategy', 'quorumFor']
['quorumFor', 'keyspace.getReplicationStrategy', '.', 'localQuorumFor', 'DatabaseDescriptor.getLocalDataCenter', 'keyspace.getReplicationStrategy', 'keyspace.getReplicationStrategy', 'strategy.getDatacenters', 'localQuorumFor', 'quorumFor', 'toString']
[None]
['DatabaseDescriptor.getLocalDataCenter', '.', 'DatabaseDescriptor.getEndpointSnitch', '.']
['isLocal']
['keyspace.getReplicationStrategy', 'strategy.getDatacenters', 'dcEndpoints.put', 'DatabaseDescriptor.getEndpointSnitch', '.', 'dcEndpoints.put', 'dcEndpoints.get']
['filterForQuery']
['keyspace.getReplicationStrategy', 'filterForEachQuorum', 'Collections.sort', 'DatabaseDescriptor.getLocalComparator', 'liveEndpoints.subList', 'Math.min', 'liveEndpoints.size', 'blockFor', 'isLocal', 'local.add', 'other.add', 'blockFor', 'local.size', 'local.addAll', 'other.subList', 'Math.min', 'local.size', 'other.size']
['keyspace.getReplicationStrategy', 'strategy.getDatacenters', 'dcsEndpoints.put', 'DatabaseDescriptor.getEndpointSnitch', '.', 'dcsEndpoints.get', '.', 'dcsEndpoints.entrySet', 'dcEndpoints.getValue', 'dcEndpoints.getKey', '.', 'DatabaseDescriptor.getLocalDataCenter', 'waitSet.addAll', 'waitSet.addAll', 'dcEndpoint.subList', 'Math.min', 'localQuorumFor', 'dcEndpoints.getKey', 'dcEndpoint.size']
['countLocalEndpoints', 'countLocalEndpoints', 'blockFor', 'keyspace.getReplicationStrategy', 'countPerDCEndpoints', '.', 'entry.getValue', 'localQuorumFor', 'entry.getKey', 'Iterables.size', 'blockFor']
['blockFor', 'countLocalEndpoints', 'countLocalEndpoints', 'logger.isTraceEnabled', 'isLocal', 'builder.append', '.', 'builder.append', '.', '.', '.', 'DatabaseDescriptor.getLocalDataCenter', '.', 'logger.trace', 'builder.toString', 'keyspace.getReplicationStrategy', 'countPerDCEndpoints', '.', 'localQuorumFor', 'entry.getKey', 'entry.getValue', 'entry.getKey', 'Iterables.size', 'logger.trace', 'Iterables.toString']
[None]
[None]
['requireNetworkTopologyStrategy']
['isSerialConsistency']
[None]
['isSerialConsistency']
['Keyspace.open', '.', 'String.format', 'strategy.getClass', '.']
['testAssignment', '.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['testAssignment', '.', 'String.format', 'receiver.type.asCQL3Type', 'parsedValue']
['validator.fromString', 'text.substring', 'LongType.instance.fromString', 'validator.fromString', 'e.getMessage']
['receiver.type.asCQL3Type', 'receiverType.isCollection']
[None]
['String.format']
[None]
[None]
['ByteBufferUtil.bytesToHex']
['options.getValues', '.', 'receiver.type.validate', 'e.getMessage']
['bindAndGet']
['t.bindAndGet', 'params.addTombstone', 'params.addCell']
['t.bindAndGet', 'ByteBufferUtil.toLong', 'params.addCounter']
['t.bindAndGet', 'ByteBufferUtil.toLong', 'params.addCounter']
['column.type.isMultiCell', 'params.setComplexDeletionTime', 'params.addTombstone']
['buffer.remaining', 'allocate', 'buffer.remaining', 'cloned.mark', 'cloned.put', 'buffer.duplicate', 'cloned.reset']
['allocator.allocate']
[None]
[None]
[None]
['setValueIsSet']
['setName', 'org.apache.thrift.TBaseHelper.rightSize', 'name.array']
[None]
['setName', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
['setValueIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['unsetName', 'setName', 'unsetValue', 'setValue']
['getName', 'Long.valueOf', 'getValue']
['isSetName', 'isSetValue']
['.']
['.', 'that.isSetName', '.']
['isSetName', 'builder.append', 'builder.append', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetName', 'isSetName', 'isSetName', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetValue', 'isSetValue', 'isSetValue', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI64', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI64']
['iprot.readBinary', 'struct.setNameIsSet', 'iprot.readI64', 'struct.setValueIsSet']
[None]
[None]
['CounterContext.instance', '.']
['ByteBufferUtil.bytes']
['CounterContext.instance', '.']
['ByteBufferUtil.bytesToHex']
['ByteBufferUtil.hexToBytes']
[None]
['CounterSerializer.instance.deserialize', '.']
[None]
[None]
['mutation.getKeyspaceName']
['mutation.getColumnFamilyIds']
['mutation.getPartitionUpdates']
[None]
['mutation.key']
[None]
[None]
['getKeyspaceName', 'key', 'Keyspace.open', 'getKeyspaceName', 'Tracing.trace', 'grabCounterLocks', 'getPartitionUpdates', 'result.add', 'processModifications', 'result.apply', 'lock.unlock']
['applyCounterMutation']
['System.nanoTime', 'LOCKS.bulkGet', 'getCounterLockKeys', 'TimeUnit.MILLISECONDS.toNanos', 'getTimeout', 'System.nanoTime', 'lock.tryLock', 'consistency', 'consistency', '.', 'locks.add', 'consistency', 'consistency', '.']
['Iterables.concat', 'Iterables.transform', 'getPartitionUpdates', 'Iterables.concat', 'Iterables.transform', 'Iterables.concat', 'Iterables.transform', 'Objects.hashCode', 'update.metadata', 'key', 'row.clustering', 'data.column']
['Iterables.concat', 'Iterables.transform', 'Iterables.concat', 'Iterables.transform', 'Objects.hashCode', 'update.metadata', 'key', 'row.clustering', 'data.column']
['Iterables.concat', 'Iterables.transform', 'Objects.hashCode', 'update.metadata', 'key', 'row.clustering', 'data.column']
['Objects.hashCode', 'update.metadata', 'key', 'row.clustering', 'data.column']
['Keyspace.open', '.', 'changes.metadata', 'getKeyspaceName', 'changes.collectCounterMarks', 'CacheService.instance.counterCache.getCapacity', 'Tracing.trace', 'marks.size', 'updateWithCurrentValuesFromCache', 'marks.isEmpty', 'Tracing.trace', 'marks.size', 'updateWithCurrentValuesFromCFS', 'updateWithCurrentValue']
['CounterContext.instance', '.', 'mark.value', 'mark.setValue', 'CounterContext.instance', '.', 'CounterId.getLocalId', 'cfs.putCachedCounter', 'key', '.', 'mark.clustering', 'mark.column', 'mark.path', 'ClockAndCount.create']
['marks.iterator', 'iter.hasNext', 'iter.next', 'cfs.getCachedCounter', 'key', '.', 'mark.clustering', 'mark.column', 'mark.path', 'updateWithCurrentValue', 'iter.remove']
['ColumnFilter.selectionBuilder', 'BTreeSet.builder', 'names.add', 'mark.clustering', 'mark.path', 'builder.add', 'mark.column', 'builder.select', 'mark.column', 'mark.path', 'FBUtilities.nowInSeconds', 'names.build', 'SinglePartitionReadCommand.create', 'key', 'builder.build', 'Iterators.peekingIterator', 'marks.iterator', 'cfs.readOrdering.start', 'UnfilteredRowIterators.filter', 'cmd.queryMemtableAndDisk', 'updateForRow', 'partition.staticRow', 'partition.hasNext', 'markIter.hasNext', 'updateForRow', 'partition.next']
['cfs.getComparator', '.']
['markIter.hasNext', 'compare', 'markIter.peek', '.', 'row.clustering', 'markIter.next', 'markIter.hasNext', 'markIter.next', 'mark.path', 'row.getCell', 'mark.column', 'row.getCell', 'mark.column', 'mark.path', 'updateWithCurrentValue', 'CounterContext.instance', '.', 'cell.value', 'markIter.remove', 'markIter.hasNext', 'compare', 'markIter.peek', '.', 'row.clustering']
['DatabaseDescriptor.getCounterWriteRpcTimeout']
['toString']
['String.format', 'mutation.toString']
['Mutation.serializer.serialize', 'out.writeUTF', 'cm.consistency.name']
['Mutation.serializer.deserialize', 'Enum.valueOf', 'in.readUTF']
['Mutation.serializer.serializedSize', 'TypeSizes.sizeof', 'cm.consistency.name']
['assertInvalidThrowMessage', 'String.format', 'createTableName']
['createTableName', 'assertInvalidThrow', 'String.format', 'createTableName', 'assertInvalidThrow', 'String.format', 'createTableName', 'assertInvalidThrow', 'String.format']
[None]
[None]
[None]
[None]
['setName', 'org.apache.thrift.TBaseHelper.rightSize', 'name.array']
[None]
['setName', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['unsetName', 'setName', 'unsetColumns', 'setColumns']
['getName', 'getColumns']
['isSetName', 'isSetColumns']
['.']
['.', 'that.isSetName', '.', '.', 'that.isSetColumns', '.']
['isSetName', 'builder.append', 'builder.append', 'isSetColumns', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetName', 'isSetName', 'isSetName', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumns', 'isSetColumns', 'isSetColumns', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.columns.size', '_iter11.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.columns.size', '_iter12.write']
['iprot.readBinary', 'struct.setNameIsSet', 'iprot.readI32', '_elem15.read', 'struct.columns.add', 'struct.setColumnsIsSet']
['updates.add']
['conditions.put']
['conditions.put']
['conditions.get', 'conditions.put']
['cfm.partitionColumns']
['conditions.isEmpty', 'conditions.size', 'conditions.keySet', 'builder.add', 'Slice.make', 'builder.build', 'SinglePartitionReadCommand.create', 'ColumnFilter.selection', 'columnsToRead']
['conditions.values', 'condition.appliesTo']
['PartitionColumns.builder', 'builder.addAll', 'upd.stmt.updatedColumns', 'builder.build']
['updatedColumns', 'conditions.size', 'upd.applyUpdates', 'Keyspace.openAndGetStore', '.', 'BatchStatement.verifyBatchSize', 'Collections.singleton']
['stmt.requiresRead', 'Collections.<', 'updates.columns', 'stmt.getTimeToLive', 'stmt.addUpdateForKey']
[None]
['current.getRow']
['current.getRow']
['condition.bind', 'conditions.put', 'Pair.create', 'current.getCollectionElementValue']
['conditions.isEmpty', 'conditions.values', 'condition.appliesTo', 'current.getRow']
[None]
[None]
['type.getSerializer', '.']
['.']
[None]
[None]
['target.append', 'target.append', 'type.getString']
['type.equals']
['type.hashCode']
[None]
[None]
[None]
['buffer.hasRemaining', 'type.isFrozenCollection', 'target.append', 'target.append', 'target.append', 'CollectionSerializer.readCollectionSize', 'target.append', 'generateSetOrListCQLLiteral', 'target.append', 'target.append', 'generateSetOrListCQLLiteral', 'target.append', 'target.append', 'generateMapCQLLiteral', 'target.append']
['target.append', 'CollectionSerializer.readValue', 'keys.toCQLLiteral', 'target.append', 'CollectionSerializer.readValue', 'values.toCQLLiteral']
['target.append', 'CollectionSerializer.readValue', 'elements.toCQLLiteral']
['type.equals']
['type.hashCode']
['.', 'sb.append', '.', 'listType.asCQL3Type', 'sb.append', '.', 'setType.asCQL3Type', 'sb.append', '.', 'keysType.asCQL3Type', '.', '.', 'valuesType.asCQL3Type', 'sb.append', 'sb.append', 'sb.toString']
['UTF8Type.instance.compose']
[None]
[None]
['target.append', 'target.append', 'type.size', 'buffer.hasRemaining', 'buffer.remaining', 'String.format', 'type.fieldName', 'buffer.getInt', 'target.append', 'target.append', 'ColumnIdentifier.maybeQuote', 'type.fieldNameAsString', 'target.append', 'target.append', 'buffer.remaining', 'String.format', 'type.fieldName', 'ByteBufferUtil.readBytes', 'type.fieldType', '.', '.', 'target.append']
['type.equals']
['type.hashCode']
['ColumnIdentifier.maybeQuote']
[None]
[None]
[None]
['target.append', 'target.append', 'type.size', 'buffer.hasRemaining', 'buffer.remaining', 'String.format', 'buffer.getInt', 'target.append', 'target.append', 'buffer.remaining', 'String.format', 'ByteBufferUtil.readBytes', 'type.type', '.', '.', 'target.append']
['type.equals']
['type.hashCode']
['sb.append', 'type.size', 'sb.append', 'sb.append', 'type.type', '.', 'sb.append', 'sb.toString']
[None]
[None]
[None]
[None]
[None]
[None]
['String.format']
['Schema.instance.getKSMetaData', 'String.format', 'prepare']
[None]
['prepare']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['t.freeze']
[None]
[None]
[None]
['type.toString']
['keys.supportsFreezing', 'keys.freeze', 'values.supportsFreezing', 'values.freeze']
[None]
[None]
['prepare']
['prepare']
['values.supportsFreezing', 'values.isCounter', 'keys.isCounter', 'keys.supportsFreezing', 'ListType.getInstance', 'values.prepare', '.', 'SetType.getInstance', 'values.prepare', '.', 'MapType.getInstance', 'keys.prepare', '.', 'values.prepare', '.']
['keys.referencesUserType', 'values.referencesUserType']
[None]
['name.getKeyspace']
[None]
[None]
['name.hasKeyspace', 'keyspace.equals', 'name.getKeyspace', 'String.format', 'name.getKeyspace', 'name.setKeyspace', 'udts.getNullable', 'name.getUserTypeName', 'name.toString']
['.', '.']
[None]
['name.toString']
[None]
['t.supportsFreezing', 't.freeze']
['freeze', 'types.size', 't.isCounter', 'ts.add', 't.prepare', '.']
['types.stream', '.', 't.referencesUserType']
['sb.append', 'types.size', 'sb.append', 'sb.append', 'types.get', 'sb.append', 'sb.toString']
['Collections.<', 'ByteBuffer.wrap']
['wrapInQuotes']
[None]
['QueryProcessor.preparedStatementsCount']
['Ratio.of', 'getNumerator', 'getDenominator']
['preparedStatementsExecuted.getCount']
['regularStatementsExecuted.getCount', 'preparedStatementsExecuted.getCount']
[None]
[None]
[None]
['setItemIdIsSet', 'setCountIsSet']
[None]
['setItemIdIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
[None]
['setCountIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['unsetItemId', 'setItemId', 'unsetCount', 'setCount', 'unsetVariable_types', 'setVariable_types', 'unsetVariable_names', 'setVariable_names']
['Integer.valueOf', 'getItemId', 'Integer.valueOf', 'getCount', 'getVariable_types', 'getVariable_names']
['isSetItemId', 'isSetCount', 'isSetVariable_types', 'isSetVariable_names']
['.']
['.', 'that.isSetVariable_types', '.', '.', 'that.isSetVariable_names', '.']
['builder.append', 'builder.append', 'builder.append', 'builder.append', 'isSetVariable_types', 'builder.append', 'builder.append', 'isSetVariable_names', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetItemId', 'isSetItemId', 'isSetItemId', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCount', 'isSetCount', 'isSetCount', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetVariable_types', 'isSetVariable_types', 'isSetVariable_types', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetVariable_names', 'isSetVariable_names', 'isSetVariable_names', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetVariable_types', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetVariable_names', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'struct.isSetVariable_types', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.variable_types.size', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'struct.isSetVariable_names', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.variable_names.size', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeI32', 'oprot.writeI32', 'struct.isSetVariable_types', 'optionals.set', 'struct.isSetVariable_names', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetVariable_types', 'oprot.writeI32', 'struct.variable_types.size', 'oprot.writeString', 'struct.isSetVariable_names', 'oprot.writeI32', 'struct.variable_names.size', 'oprot.writeString']
['iprot.readI32', 'struct.setItemIdIsSet', 'iprot.readI32', 'struct.setCountIsSet', 'iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'struct.variable_types.add', 'struct.setVariable_typesIsSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'struct.variable_names.add', 'struct.setVariable_namesIsSet']
['query.append', 'query.append', 'query.append', 'wrapInQuotes', 'settings.columns.namestrs.get', 'query.append', '.', 'wrapInQuotes', 'query.append', 'query.toString']
['Collections.<', 'ByteBuffer.wrap']
['getColumnValues', 'Arrays.asList']
['HadoopCompat.getConfiguration', '.', '.', 'ConfigHelper.getInputSplitSize', 'ConfigHelper.getInputColumnFamily', 'ConfigHelper.getInputKeyspace', 'ConfigHelper.getInputPartitioner', 'CqlConfigHelper.getInputcolumns', 'CqlConfigHelper.getInputWhereClauses', 'split.getLocations', 'CqlConfigHelper.getInputCluster', 'cluster.connect', 'quote', 'cluster.getConfiguration', '.', '.', '.', 'CqlConfigHelper.getInputCql', 'StringUtils.isNotEmpty', 'StringUtils.isNotEmpty', 'StringUtils.isNotEmpty', 'StringUtils.isEmpty', 'buildQuery', 'logger.trace', 'logger.trace']
['session.close', 'cluster.close']
[None]
[None]
['rowIterator.hasNext']
['rowIterator.hasNext', 'logger.trace', 'rowIterator.next', 'e.getMessage', 'ioe.initCause', 'ioe.getCause']
['nextKeyValue']
[None]
['Long.valueOf']
[None]
['rows.hasNext', 'endOfData', 'rows.next', 'partitionBoundColumns.size', 'partitionBoundColumns.keySet', 'keyColumns.put', 'row.getBytesUnsafe', 'previousRowKey.isEmpty', 'keyColumns.isEmpty', 'partitionBoundColumns.keySet', 'ByteBufferUtil.compareUnsigned', 'keyColumns.get', 'previousRowKey.get', 'Pair.create']
[None]
['row.getColumnDefinitions']
['row.isNull']
['row.isNull']
['row.getObject']
['row.get']
['row.get']
['row.get']
['row.getObject']
['row.get']
['row.get']
['row.get']
['row.getBool']
['row.getBool']
['row.getShort']
['row.getShort']
['row.getByte']
['row.getByte']
['row.getInt']
['row.getInt']
['row.getLong']
['row.getLong']
['row.getTimestamp']
['row.getTimestamp']
['row.getDate']
['row.getDate']
['row.getTime']
['row.getTime']
['row.getFloat']
['row.getFloat']
['row.getDouble']
['row.getDouble']
['row.getBytesUnsafe']
['row.getBytesUnsafe']
['row.getBytes']
['row.getBytes']
['row.getString']
['row.getString']
['row.getVarint']
['row.getVarint']
['row.getDecimal']
['row.getDecimal']
['row.getUUID']
['row.getUUID']
['row.getInet']
['row.getInet']
['row.getList']
['row.getList']
['row.getList']
['row.getList']
['row.getSet']
['row.getSet']
['row.getSet']
['row.getSet']
['row.getMap']
['row.getMap']
['row.getMap']
['row.getMap']
['row.getUDTValue']
['row.getUDTValue']
['row.getTupleValue']
['row.getTupleValue']
['row.getToken']
['row.getToken']
['row.getPartitionKeyToken']
['fetchKeys', 'getSelectColumns', 'columns.size', 'makeColumnList', 'makeColumnList', 'String.format', 'getAdditionalWhereClauses', 'quote', 'quote']
['StringUtils.isNotEmpty', 'StringUtils.isNotEmpty']
['StringUtils.isNotEmpty', 'selectColumns.addAll', 'Splitter.on', '.', 'partitionKeys.contains', 'selectColumns.add']
['Joiner.on', '.', 'Iterables.transform', 'quote']
['quote']
['session.getCluster', '.', '.', 'Metadata.quote', '.', 'Metadata.quote', 'tableMetadata.getPartitionKey', 'partitionKeys.add', 'partitionKey.getName']
['identifier.replaceAll']
['cleanupAndLeaveDirs', 'logger.error', 'Thread.setDefaultUncaughtExceptionHandler', 'logger.error', 'ThreadAwareSecurityManager.install', 'Keyspace.setInitialized']
['logger.error']
['CommitLog.instance.stopUnsafe', 'mkdirs', 'cleanup', 'mkdirs', 'CommitLog.instance.restartUnsafe']
['DatabaseDescriptor.getCommitLogLocation', 'dir.exists', 'dir.getAbsolutePath', 'FileUtils.deleteRecursive', 'cleanupSavedCaches', 'DatabaseDescriptor.getAllDataFileLocations', 'dir.exists', 'dir.getAbsolutePath', 'FileUtils.deleteRecursive']
['DatabaseDescriptor.createAllDirectories']
['DatabaseDescriptor.getSavedCachesLocation', 'cachesDir.exists', 'cachesDir.isDirectory', 'FileUtils.delete', 'cachesDir.listFiles']
['DatabaseDescriptor.setRowCacheSizeInMB', 'StorageService.instance.setPartitionerUnsafe']
['sessions.values', 'sess.close', 'clusters.values', 'cl.close', 'server.stop', 'QueryProcessor.clearInternalStatementsCache']
['schemaChange', 'String.format', 'schemaChange', 'String.format']
['dropPerTestKeyspace', 'copy', 'copy', 'copy', 'copy', 'ScheduledExecutors.optionalTasks.execute', 'tablesToDrop.size', 'schemaChange', 'String.format', 'tablesToDrop.get', 'aggregatesToDrop.size', 'schemaChange', 'String.format', 'aggregatesToDrop.get', 'functionsToDrop.size', 'schemaChange', 'String.format', 'functionsToDrop.get', 'typesToDrop.size', 'schemaChange', 'String.format', 'typesToDrop.get', 'ScheduledExecutors.nonPeriodicTasks.execute', 'latch.countDown', 'latch.await', 'removeAllSSTables']
['tablesToDrop.size', 'schemaChange', 'String.format', 'tablesToDrop.get', 'aggregatesToDrop.size', 'schemaChange', 'String.format', 'aggregatesToDrop.get', 'functionsToDrop.size', 'schemaChange', 'String.format', 'functionsToDrop.get', 'typesToDrop.size', 'schemaChange', 'String.format', 'typesToDrop.get', 'ScheduledExecutors.nonPeriodicTasks.execute', 'latch.countDown', 'latch.await', 'removeAllSSTables']
['latch.countDown']
['SystemKeyspace.finishStartup', 'StorageService.instance.initServer', 'SchemaLoader.startGossiper', '.', '.', '.', 'server.start', 'clusters.containsKey', 'Cluster.builder', '.', '.', '.', '.', 'ProtocolVersion.fromInt', '.', 'clusters.put', 'sessions.put', 'cluster.connect', 'logger.info']
['execute', 'String.format']
['list.isEmpty', 'Collections.<']
['currentTable', 'Keyspace.open', '.']
['getCurrentColumnFamilyStore', 'store.forceBlockingFlush']
['currentTable', 'Keyspace.open', '.', '.']
['currentTable', 'Keyspace.open', '.', '.']
['qualifiedName.indexOf', 'FunctionName.nativeFunction', 'qualifiedName.substring', '.', 'qualifiedName.substring', '.']
['parseFunctionName']
['Directories.getKSChildDirectories', 'd.exists', 'containsAny', 'd.getName', 'FileUtils.deleteRecursive']
['tables.size', 'filename.contains', 'tables.get']
[None]
['tables.isEmpty', 'tables.get', 'tables.size']
[None]
[None]
[None]
[None]
['seqNumber.getAndIncrement', 'String.format', 'types.add', 'logger.info', 'schemaChange']
['seqNumber.getAndIncrement', 'createFunctionOverload']
['String.format', 'functions.add', 'logger.info', 'schemaChange']
['seqNumber.getAndIncrement', 'createAggregateOverload']
['String.format', 'aggregates.add', 'logger.info', 'schemaChange']
['createTableName', 'formatQuery', 'logger.info', 'schemaChange']
['seqNumber.getAndIncrement', 'tables.add']
['seqNumber.getAndIncrement', 'tables.add', 'formatQuery', 'logger.info', 'QueryProcessor.executeOnceInternal']
['formatQuery', 'logger.info', 'schemaChange']
['formatQuery', 'logger.info', 'QueryProcessor.executeOnceInternal']
['String.format', 'currentTable', 'logger.info', 'schemaChange']
['formatQuery', 'logger.info', 'schemaChange']
['System.currentTimeMillis', 'getRows', 'execute', 'index.equals', 'System.currentTimeMillis', 'Thread.sleep']
['formatQuery', 'logger.info', 'QueryProcessor.executeOnceInternal']
['String.format', 'logger.info', 'schemaChange']
['Assert.assertTrue', 'Assert.assertSame', 'Assert.assertSame', 'Assert.assertEquals', 'Assert.assertEquals', 'Assert.assertEquals', 'Arrays.asList']
['ClientState.forInternalCalls', 'state.setKeyspace', 'QueryProcessor.parseStatement', 'prepared.statement.validate', 'QueryOptions.forInternalCalls', 'Collections.<', 'prepared.statement.executeInternal']
['Schema.instance.getCFMetaData', 'currentTable']
['sessionNet', '.', 'formatQuery']
['sessionNet', 'PROTOCOL_VERSIONS.get', 'PROTOCOL_VERSIONS.size']
['requireNetwork', 'sessions.get']
['currentTable', 'String.format']
['formatQuery', 'logger.isDebugEnabled', 'logger.debug', 'formatAllValues', 'QueryProcessor.executeInternal', 'transformValues', 'query.startsWith', 'QueryProcessor.clearInternalStatementsCache', 'QueryProcessor.executeOnceInternal', 'transformValues', 'replaceValues', 'logger.isDebugEnabled', 'logger.debug', 'QueryProcessor.executeOnceInternal', 'logger.isDebugEnabled', 'logger.debug', 'rs.size']
['requireNetwork', 'Assert.fail', 'String.format', 'result.getColumnDefinitions', 'result.iterator', 'iter.hasNext', 'iter.next', 'Assert.assertEquals', 'String.format', 'meta.size', 'meta.size', 'meta.getType', 'clusters.get', '.', '.', '.', 'codec.serialize', 'ProtocolVersion.fromInt', 'expectedByteValue.remaining', 'actual.getBytesUnsafe', 'meta.getName', 'actualValue.remaining', 'Objects.equal', 'Assert.fail', 'String.format', 'meta.getName', 'codec.format', 'codec.format', 'codec.deserialize', 'ProtocolVersion.fromInt', 'iter.hasNext', 'iter.hasNext', 'iter.next', 'Assert.fail', 'String.format', 'Assert.assertTrue', 'String.format']
['Assert.fail', 'String.format', 'result.metadata', 'result.iterator', 'iter.hasNext', 'iter.next', 'Assert.assertEquals', 'String.format', 'meta.size', 'meta.size', 'meta.get', 'makeByteBuffer', 'actual.getBytes', 'column.name.toString', 'Objects.equal', 'column.type.getSerializer', '.', 'Objects.equal', 'Assert.fail', 'String.format', 'column.type.asCQL3Type', 'formatValue', 'formatValue', 'iter.hasNext', 'iter.hasNext', 'iter.next', 'Assert.fail', 'String.format', 'Assert.assertTrue', 'String.format']
['Assert.fail', 'String.format', 'result.metadata', 'Assert.assertEquals', 'meta.size', 'meta.size', 'meta.size', 'expectedRow.add', 'makeByteBuffer', 'meta.get', 'expectedRows.add', 'result.size', 'meta.size', 'meta.size', 'actualRow.add', 'actual.getBytes', 'meta.get', '.', 'actualRows.add', 'com.google.common.collect.Sets.difference', 'com.google.common.collect.Sets.difference', 'extra.isEmpty', 'missing.isEmpty', 'makeRowStrings', 'makeRowStrings', 'extra.isEmpty', 'sb.append', '.', 'extra.size', '.', 'missing.isEmpty', 'sb.append', '.', 'missing.size', '.', 'sb.append', 'sb.append', 'extraRows.stream', '.', 'Collectors.joining', 'missing.isEmpty', 'sb.append', '.', 'missingRows.stream', '.', 'Collectors.joining', 'Assert.fail', 'sb.toString', 'missing.isEmpty', 'Assert.fail', 'missing.size', 'missingRows.stream', '.', 'Collectors.joining', 'expectedRows.size', 'actualRows.size']
['row.size', 'meta.get', 'sb.append', '.', '.', 'formatValue', 'row.get', 'column.name.toString', 'row.size', 'sb.append', 'strings.add', 'sb.append', '.']
['Assert.fail', 'String.format', 'result.metadata', 'result.iterator', 'iter.hasNext', 'iter.next', 'assertNotNull', 'iter.hasNext', 'iter.hasNext', 'iter.next', 'Assert.fail', 'String.format', 'Assert.assertTrue', 'String.format']
['result.metadata', 'result.iterator', 'iter.hasNext', 'iter.next', 'meta.size', 'meta.size', 'meta.get', 'rowVal.getBytes', 'column.name.toString', 'column.type.getSerializer', '.', 'ret.add', 'ret.size', 'ret.toArray']
['Assert.fail', 'result.metadata', 'Assert.assertEquals', 'metadata.size', 'metadata.size', 'metadata.get', 'Assert.assertEquals', 'columnSpec.name.toString']
['assertRows', 'execute']
[None]
['result.isEmpty', 'String.format', 'result.size']
['assertInvalidMessage']
['assertInvalidThrowMessage']
['assertInvalidThrowMessage']
['execute', 'formatAllValues', 'replaceValues', 'Assert.fail', 'exception.isAssignableFrom', 'e.getClass', 'Assert.fail', 'exception.getName', 'e.getClass', '.', 'queryInfo', 'assertMessageContains']
['formatAllValues', 'replaceValues']
['QueryProcessor.parseStatement', 'Assert.fail', 'String.format', 'e.getMessage']
['assertInvalidSyntaxMessage']
['execute', 'Assert.fail', 'queryInfo', 'assertMessageContains']
['Assert.assertTrue', 'e.getMessage', 'e.getMessage', '.']
['query.indexOf', 'String.format', 'sb.append', 'query.substring', 'query.substring', '.', 'sb.append', 'l.size', 'sb.append', 'sb.append', 'formatForCQL', 'l.get', 'sb.append', 'sb.append', 'formatForCQL', 'sb.append', 'query.substring', 'sb.toString']
['typeFor', '.', 'serializeTuples', 'logger.info']
['l.size', 'n.add', 'serializeTuples', 's.size', 'n.add', 'serializeTuples', 'm.size', 'm.entrySet', 'n.put', 'serializeTuples', 'serializeTuples']
['sb.append', 'sb.append', 'sb.append', 'formatForCQL', 'sb.append', 'sb.toString']
['sb.append', 'l.size', 'sb.append', 'sb.append', 'formatForCQL', 'l.get', 'sb.append', 'sb.append', 's.iterator', 'iter.hasNext', 'sb.append', 'formatForCQL', 'iter.next', 'iter.hasNext', 'sb.append', 'sb.append', 'sb.append', 'm.entrySet', '.', 'iter.hasNext', 'iter.next', 'sb.append', '.', '.', 'formatForCQL', 'entry.getValue', 'formatForCQL', 'entry.getKey', 'iter.hasNext', 'sb.append', 'sb.append', 'sb.toString', 'typeFor', 'type.getString', 'type.decompose', 'String.format', 'String.format', 's.replaceAll']
['type.decompose']
['type.getSerializer', 'ser.toString', 'ser.deserialize', 'type.getString']
[None]
['.']
['Arrays.asList']
['ImmutableSet.copyOf']
['m.put']
['requireNetwork', 'clusters.get', '.', '.']
['l.isEmpty', 'typeFor', 'l.get', 'ListType.getInstance', 's.isEmpty', 'typeFor', 's.iterator', '.', 'SetType.getInstance', 'm.isEmpty', 'm.entrySet', '.', '.', 'typeFor', 'entry.getKey', 'typeFor', 'entry.getValue', 'MapType.getInstance']
['makeByteBuffer', 'typeFor', 'TupleType.buildValue']
['sb.append', 'sb.append', 'sb.append', 'formatForCQL', 'sb.append', 'sb.toString']
['toCQLString']
['unparsed.toLowerCase', 'PRIMITIVE_TYPES.contains', 'CQL3Type.Native.valueOf', '.', 'unparsed.toUpperCase', 'userTypes.getNullable', 'bytes', 'parseRaw', '.', '.']
['CQLFragmentParser.parseAny']
['argRawTypes.size', 'argTypes.add', 'prepareType', 'prepareType', 'stateArguments', 'Schema.instance.findFunction', '.', 'stateFuncSig', 'stateFunction.returnType', 'stateReturnType.equals', 'stateFuncSig', 'stateFunction.name', 'Collections.<', 'Schema.instance.findFunction', '.', 'finalFunction.returnType', 'Terms.asBytes', 'ival.toString', 'UDHelper.isNullOrEmpty']
['rawType.isFrozen', 'String.format', 'rawType.canBeNonFrozen', 'rawType.freeze', 'rawType.prepare', '.']
['functionName.hasKeyspace', 'state.getRawKeyspace', 'state.getKeyspace', 'functionName.hasKeyspace', 'ThriftValidation.validateKeyspaceNotSystem']
['FunctionResource.function', 'DatabaseDescriptor.getAuthorizer', '.', 'resource.applicablePermissions', 'RoleResource.role', 'state.getClientState', '.', '.']
['Schema.instance.findFunction', '.', 'state.ensureHasPermission', 'FunctionResource.function', 'state.ensureHasPermission', 'FunctionResource.keyspace', 'stateFunction.getFunctions', 'state.ensureHasPermission', 'finalFunction.getFunctions', 'state.ensureHasPermission']
['Schema.instance.getKSMetaData', 'String.format']
['Schema.instance.findFunction', '.', 'String.format', 'String.format', 'old.isNative', 'String.format', 'old.returnType', '.', 'String.format', 'returnType.asCQL3Type', 'old.returnType', '.', 'stateFunction.isCalledOnNullInput', 'String.format', 'MigrationManager.announceNewAggregate', 'udAggregate.name', 'udAggregate.name', 'AbstractType.asCQLTypeStringList', 'udAggregate.argTypes']
['sb.append', '.', '.', 'stateFuncName.toString', 'sb.append', '.', 'sb.append', 'sb.toString']
['argTypes.size', 'r.add', 'r.addAll']
['state.ensureIsSuper']
['ThriftValidation.validateColumnFamily', 'keyspace', 'columnFamily', 'cfm.isView', 'TriggerExecutor.instance.loadTriggerInstance', 'String.format']
['Schema.instance.getCFMetaData', '.', 'keyspace', 'columnFamily', 'cfm.getTriggers', 'triggers.get', '.', 'String.format', 'cfm.triggers', 'triggers.with', 'TriggerMetadata.create', 'logger.info', 'MigrationManager.announceColumnFamilyUpdate', 'keyspace', 'columnFamily']
['valueRaw.prepare', 'value.collectMarkerSpecification']
['filter.addCustomIndexExpression', 'cfm.getIndexes', '.', 'targetIndex.getIdx', '.', 'IndexRestrictions.indexNotFound', 'value.bindAndGet']
['createTable', 'createIndex', 'execute', 'execute', 'execute']
['createTable', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.', 'execute', 'execute', 'execute', 'flush', 'getCurrentColumnFamilyStore', 'indexManager.getIndexByName', 'included.reset', 'assertTrue', 'included.rowsInserted.isEmpty', 'indexManager.getIndexByName', 'excluded.reset', 'assertTrue', 'excluded.rowsInserted.isEmpty', 'indexManager.buildAllIndexesBlocking', 'getCurrentColumnFamilyStore', '.', 'assertEquals', 'included.rowsInserted.size', 'assertTrue', 'excluded.rowsInserted.isEmpty']
['createTable', 'createIndex', 'String.format', '.', 'execute', 'execute', 'execute', 'execute', 'getCurrentColumnFamilyStore', 'indexManager.getIndexByName', 'assertEquals', 'index.rowsInserted.size', 'assertTrue', 'index.partitionDeletions.isEmpty', 'assertTrue', 'index.rangeTombstones.isEmpty', 'execute', 'assertTrue', 'index.partitionDeletions.isEmpty', 'assertEquals', 'index.rangeTombstones.size', 'execute', 'assertEquals', 'index.partitionDeletions.size', 'assertEquals', 'index.rangeTombstones.size']
['createTable', 'assertInvalidMessage', 'assertInvalidMessage', 'createIndex', 'String.format', '.', 'assertIndexCreated']
['createTable', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.']
['createTable', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'assertInvalidMessage', 'String.format', '.', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.']
['createTable', 'createIndex', 'String.format', '.', 'assertEquals', 'getCurrentColumnFamilyStore', '.', '.', 'assertIndexCreated', 'currentTable', 'createIndex', 'String.format', '.', 'assertEquals', 'getCurrentColumnFamilyStore', '.', '.', 'assertIndexCreated', 'currentTable', 'createIndex', 'String.format', '.', 'assertEquals', 'getCurrentColumnFamilyStore', '.', '.', 'assertIndexCreated', 'currentTable', 'createIndex', 'String.format', '.', 'assertEquals', 'getCurrentColumnFamilyStore', '.', '.', 'options.put', 'assertIndexCreated', 'currentTable']
['createTable', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'testCreateIndex', 'createIndex', 'String.format', '.', 'assertIndexCreated', 'ImmutableList.of', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'createIndex', 'String.format', '.', 'assertIndexCreated', 'ImmutableList.of', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget', 'indexTarget']
['createType', 'createTable', 'testCreateIndex', 'getCurrentColumnFamilyStore', '.', 'IndexMetadata.fromIndexTargets', 'getCurrentColumnFamilyStore', 'ImmutableList.of', 'indexTarget', 'indexTarget', 'ImmutableMap.of', '.', 'indexes.get', '.', 'throwAssert', 'assertEquals']
['createTable', 'assertInvalidMessage', 'assertInvalidSyntax', '.', 'createIndex', 'String.format', '.', 'assertIndexCreated']
['row', 'createTable', 'execute', 'assertInvalidMessage', 'String.format', 'keyspace', 'currentTable', 'createIndex', 'String.format', '.', 'assertInvalidMessage', 'String.format', 'keyspace', 'currentTable', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute', 'assertInvalidMessage', 'createIndex', 'String.format', '.', 'assertInvalidMessage', 'assertInvalidMessage', 'assertRows', 'execute']
['createTable', 'createIndex', 'String.format', '.', 'assertInvalidMessage', 'String.format']
['createTable', 'createIndex', 'String.format', '.', 'assertInvalidMessage']
['createTable', 'createIndex', 'assertInvalidMessage', 'String.format']
['createTable', 'createIndex', 'String.format', '.', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.', 'getCurrentColumnFamilyStore', '.', 'getCurrentColumnFamilyStore', '.', 'assertEquals', 'assertEquals', 'moreSelective.setEstimatedResultRows', 'lessSelective.setEstimatedResultRows', 'execute', 'assertEquals', 'assertEquals', 'moreSelective.setEstimatedResultRows', 'execute', 'assertEquals', 'assertEquals']
['createTable', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.', 'getCurrentColumnFamilyStore', '.', 'getCurrentColumnFamilyStore', '.', 'assertEquals', 'assertEquals', 'moreSelective.setEstimatedResultRows', 'lessSelective.setEstimatedResultRows', 'execute', 'assertEquals', 'assertEquals', 'execute', 'assertEquals', 'assertEquals']
['createTable', 'createIndex', 'String.format', '.', 'createIndex', 'String.format', '.', 'execute', 'assertInvalidMessage', 'execute', 'assertInvalidMessage']
['createTable', 'createIndex', 'String.format', '.', 'getCurrentColumnFamilyStore', 'cfs.indexManager.getIndexByName', 'assertEquals', 'index.reloads.get', 'cfs.reload', 'assertEquals', 'index.reloads.get']
['createTable', 'createIndex', 'String.format', '.', 'getCurrentColumnFamilyStore', 'cfs.indexManager.getIndexByName', 'execute', 'execute', 'execute', 'execute', 'assertEquals', 'index.rowsInserted.size', 'assertEquals', 'index.partitionDeletions.size', 'Util.cmd', '.', 'cmd.executionController', 'cmd.executeLocally', 'assertTrue', 'iterator.hasNext', 'cfs.indexManager.deletePartition', 'iterator.next', 'FBUtilities.nowInSeconds', 'assertEquals', 'index.partitionDeletions.size', 'assertEquals', 'index.rowsDeleted.size', 'assertEquals', 'index.rowsDeleted.get', '.', 'index.rowsInserted.get', '.']
['createIndex', 'String.format', 'Arrays.stream', '.', 'Collectors.joining', '.', 'assertIndexCreated']
['assertIndexCreated']
['Arrays.stream', '.', 'ColumnIdentifier.getInterned', '.', 'Collectors.toList', 'assertIndexCreated']
['options.put', '.', 'getCurrentColumnFamilyStore', 'IndexMetadata.fromIndexTargets', 'getCurrentColumnFamilyStore', '.', 'actual.equals', 'fail', 'String.format']
['ColumnIdentifier.getInterned']
['reloads.set']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['Schema.instance.getNonSystemKeyspaces', 'Schema.instance.getTablesAndViews', 'ThriftConversion.fromThrift', 'ThriftConversion.toThrift', 'assertNotNull', 'assertEquals']
['Schema.instance.getNonSystemKeyspaces', 'Schema.instance.getKSMetaData', 'ThriftConversion.fromThrift', 'ThriftConversion.toThrift', 'assertNotNull', 'assertEquals']
['SchemaLoader.cleanupAndLeaveDirs', 'Schema.instance.loadFromDisk', 'assertEquals', 'Schema.instance.getNonSystemKeyspaces', '.', 'Gossiper.instance.start', 'System.currentTimeMillis', 'Keyspace.setInitialized', 'MigrationManager.announceNewKeyspace', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'MigrationManager.announceNewKeyspace', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'assertNotNull', 'Schema.instance.getKSMetaData', 'assertNotNull', 'Schema.instance.getKSMetaData', 'Schema.instance.clearKeyspaceMetadata', 'Schema.instance.getKSMetaData', 'Schema.instance.clearKeyspaceMetadata', 'Schema.instance.getKSMetaData', 'assertNull', 'Schema.instance.getKSMetaData', 'assertNull', 'Schema.instance.getKSMetaData', 'Schema.instance.loadFromDisk', 'assertNotNull', 'Schema.instance.getKSMetaData', 'assertNotNull', 'Schema.instance.getKSMetaData', 'Gossiper.instance.stop']
['DatabaseDescriptor.loadConfig', 'assertEquals', 'Keyspace.setInitialized', 'System.setProperty', 'testLoader.getClass', '.', 'DatabaseDescriptor.loadConfig', 'assertEquals']
[None]
['NetworkInterface.getNetworkInterfaces', 'interfaces.hasMoreElements', 'interfaces.nextElement', 'System.out.println', 'intf.getName', 'intf.isLoopback', 'suitableInterface.getInetAddresses', 'addresses.hasMoreElements', 'addresses.nextElement']
['DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'assertEquals', 'DatabaseDescriptor.getRpcAddress', '.', 'DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'assertEquals', 'DatabaseDescriptor.getRpcAddress', '.', 'assertEquals', 'DatabaseDescriptor.getRpcAddress', 'suitableInterface.getInetAddresses', '.']
['DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'assertEquals', 'DatabaseDescriptor.getListenAddress', '.', 'DatabaseDescriptor.loadConfig', 'suitableInterface.getName', 'DatabaseDescriptor.applyAddressConfig', 'assertEquals', 'DatabaseDescriptor.getListenAddress', '.', 'assertEquals', 'DatabaseDescriptor.getRpcAddress', 'suitableInterface.getInetAddresses', '.']
['DatabaseDescriptor.loadConfig', 'suitableInterface.getInterfaceAddresses', '.', '.', '.', 'DatabaseDescriptor.applyAddressConfig']
['DatabaseDescriptor.loadConfig', 'suitableInterface.getInterfaceAddresses', '.', '.', '.', 'DatabaseDescriptor.applyAddressConfig']
[None]
['chunkStart']
[None]
['checksum.update', 'checksum.getValue', 'checksum.reset', 'reader.readInt']
['reader.close']
[None]
['checkedInputStream.read', 'checkedInputStream.getChecksum', '.', 'descriptor.filenameFor']
['Throwables.perform']
['incrementalOut.writeInt']
['bb.duplicate', 'toAppend.mark', 'incrementalChecksum.update', 'toAppend.reset', 'incrementalChecksum.getValue', 'incrementalOut.writeInt', 'fullChecksum.update', 'ByteBuffer.allocate', 'byteBuffer.putInt', 'byteBuffer.arrayOffset', 'fullChecksum.update', 'byteBuffer.array', 'byteBuffer.array', 'incrementalChecksum.reset']
['descriptor.baseFilename', 'descriptor.filenameFor', 'Files.newBufferedWriter', 'outFile.toPath', 'out.write', 'String.valueOf', 'fullChecksum.getValue']
['forTokenRange', 'partitioner.getMinimumToken', 'partitioner.getMinimumToken']
['forKeyRange', 'Range.makeRowRange']
[None]
['Range.makeRowRange', 'partitioner.getMinimumToken', 'partitioner.getMinimumToken']
[None]
[None]
[None]
[None]
[None]
[None]
['keyRange.contains']
['startKey', '.', 'stopKey', '.', 'clusteringIndexFilter.selectsAllPartition']
[None]
[None]
[None]
['String.format', 'keyRange.getString', 'metadata.getKeyValidator', 'clusteringIndexFilter.toString']
['isUnrestricted', 'startKey', '.', 'appendClause', 'startKey', 'keyRange.isStartInclusive', 'stopKey', '.', 'sb.append', 'appendClause', 'stopKey', 'keyRange.isEndInclusive', 'clusteringIndexFilter.toCQLString', 'filterString.isEmpty', 'sb.append', '.', 'sb.toString']
['sb.append', 'sb.append', 'ColumnDefinition.toCQLString', 'metadata.partitionKeyColumns', 'sb.append', '.', 'getOperator', '.', 'sb.append', 'appendKeyString', 'metadata.getKeyValidator', 'sb.append', 'sb.append']
[None]
['ct.split', 'ct.types.size', 'sb.append', '.', 'ct.types.get', '.', 'sb.append', 'type.getString']
['key.equals', 'startKey', 'clusteringIndexFilter.forPaging']
['range.left.equals', 'keyRange']
[None]
[None]
[None]
['String.format', 'keyRange.getString', 'metadata.getKeyValidator', 'clusteringIndexFilter.toString', 'lastReturned.toString']
['AbstractBounds.rowPositionSerializer.serialize', 'ClusteringIndexFilter.serializer.serialize', 'out.writeBoolean', 'Clustering.serializer.serialize', 'metadata.comparator.subtypes', 'out.writeBoolean']
['AbstractBounds.rowPositionSerializer.deserialize', 'ClusteringIndexFilter.serializer.deserialize', 'in.readBoolean', 'Clustering.serializer.deserialize', 'comparator.subtypes', 'in.readBoolean']
['DataType.CUSTOM.getId']
['CBUtil.readString', 'DataType.toType', 'codec.decodeOne', 'DataType.toType', 'codec.decodeOne', 'l.add', 'DataType.toType', 'codec.decodeOne', 'l.add', 'DataType.toType', 'codec.decodeOne', 'CBUtil.readString', 'UTF8Type.instance.decompose', 'CBUtil.readString', 'cb.readUnsignedShort', 'fieldNames.add', 'UTF8Type.instance.decompose', 'CBUtil.readString', 'fieldTypes.add', 'DataType.toType', 'codec.decodeOne', 'cb.readUnsignedShort', 'types.add', 'DataType.toType', 'codec.decodeOne']
['CBUtil.writeString', 'value.toString', 'CBUtil.writeString', 'codec.writeOne', 'DataType.fromType', 'codec.writeOne', 'DataType.fromType', 'codec.writeOne', 'DataType.fromType', 'l.get', 'codec.writeOne', 'DataType.fromType', 'l.get', 'CBUtil.writeString', 'CBUtil.writeString', 'UTF8Type.instance.compose', 'cb.writeShort', 'udt.size', 'udt.size', 'CBUtil.writeString', 'UTF8Type.instance.compose', 'udt.fieldName', 'codec.writeOne', 'DataType.fromType', 'udt.fieldType', 'cb.writeShort', 'tt.size', 'tt.size', 'codec.writeOne', 'DataType.fromType', 'tt.type']
['CBUtil.sizeOfString', 'value.toString', 'CBUtil.sizeOfString', 'codec.oneSerializedSize', 'DataType.fromType', 'codec.oneSerializedSize', 'DataType.fromType', 'l.get', 'codec.oneSerializedSize', 'DataType.fromType', 'l.get', 'CBUtil.sizeOfString', 'CBUtil.sizeOfString', 'UTF8Type.instance.compose', 'udt.size', 'CBUtil.sizeOfString', 'UTF8Type.instance.compose', 'udt.fieldName', 'codec.oneSerializedSize', 'DataType.fromType', 'udt.fieldType', 'tt.size', 'codec.oneSerializedSize', 'DataType.fromType', 'tt.type']
['dataTypeMap.get', 'type.isCollection', 'Pair.<', 'Pair.<', 'Arrays.asList', 'mt.getKeysType', 'mt.getValuesType', 'Pair.<', 'Pair.<', 'Pair.<', 'Pair.<', 'type.toString', 'Pair.<', 'type.toString', 'Pair.create']
['TypeParser.parse', 'ListType.getInstance', 'SetType.getInstance', 'MapType.getInstance', 'l.get', 'l.get', 'e.getMessage']
[None]
['DataType.values', 'isComplexType', 'Collections.singletonMap', 'type.toString', 'testEncodeDecode']
['Collections.singletonMap', 'testEncodeDecode']
['value.add', 'value.add', 'Collections.singletonMap', 'testEncodeDecode']
['type.codec.encode', 'type.codec.decode', 'results.keySet', 'type.serializedValueSize', 'results.get', 'type.getProtocolVersion', 'TypeSizes.encodedUTF8Length', 'results.get', '.', 'assertEquals', 'type.getProtocolVersion', 'assertEquals']
['type.getId']
['options.get', 'TimeUnit.valueOf', 'String.format', 'options.get', 'Double.parseDouble', 'String.format', 'String.format', 'options.get', 'Long.parseLong', 'String.format', 'String.format', 'options.get', 'Long.parseLong', 'String.format', 'String.format', 'options.get', 'Long.parseLong', 'String.format', 'String.format', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove', 'uncheckedOptions.remove']
['createTable', 'execute', 'assertInvalid']
['executor.getQueue', 'executor.isShutdown', 'queue.offer']
[None]
['createWithMaximumPoolSize']
[None]
[None]
[None]
[None]
[None]
['execute']
['isTracing', 'Executors.callable']
['isTracing', 'Executors.callable']
['isTracing']
['maybeResetTraceSessionWrapper', 'logExceptionsAfterExecute']
['tsw.reset']
[None]
['extractThrowable', 'handleOrLog', 'Thread.getDefaultUncaughtExceptionHandler', 'handleOrLog']
['Thread.getDefaultUncaughtExceptionHandler', 'logger.error', 'Thread.getDefaultUncaughtExceptionHandler', '.', 'Thread.currentThread']
['logger.trace', 'e.getCause']
['Tracing.instance.set']
['Tracing.instance.set']
['probe.decommission', 'e.getMessage']
['createMetricName']
['createDefaultMBeanName']
['nameBuilder.append', 'nameBuilder.append', 'nameBuilder.append', 'nameBuilder.append', 'nameBuilder.append', 'name.length', 'nameBuilder.append', 'nameBuilder.append', 'nameBuilder.toString']
[None]
[None]
[None]
[None]
['SchemaLoader.prepareServer', 'SchemaLoader.startGossiper', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.compositeIndexCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.compositeIndexCFMD']
['CFMetaData.Builder.create', '.', '.', '.', 'ByteBuffer.wrap', 'cfm.addColumnDefinition', 'ColumnDefinition.regularDef', 'cfm.comment', '.', '.', '.', 'CompactionParams.scts', 'ImmutableMap.of', 'assertNull', 'cfm.getColumnDefinition', 'ByteBuffer.wrap', 'cfm.copy', 'ColumnDefinition.regularDef', 'ByteBuffer.wrap', 'cfNew.addColumnDefinition', 'ColumnDefinition.regularDef', 'ByteBuffer.wrap', 'assertTrue', 'cfNew.removeColumnDefinition', 'cfm.apply', 'cfm.allColumns', '.', 'assertNotNull', 'cfm.getColumnDefinition', 'ByteBuffer.wrap', 'assertNull', 'cfm.getColumnDefinition', 'ByteBuffer.wrap', 'assertNotNull', 'cfm.getColumnDefinition', 'ByteBuffer.wrap']
['assertTrue', 'CFMetaData.isNameValid', 'assertFalse', 'CFMetaData.isNameValid']
['addTestTable', 'MigrationManager.announceNewColumnFamily']
['Schema.instance.getKSMetaData', 'addTestTable', 'assertFalse', 'Schema.instance.getKSMetaData', '.', '.', 'MigrationManager.announceNewColumnFamily', 'assertTrue', 'Schema.instance.getKSMetaData', '.', '.', 'assertEquals', 'Schema.instance.getKSMetaData', '.', '.', 'QueryProcessor.executeInternal', 'String.format', 'Keyspace.open', '.', 'assertNotNull', 'cfs.forceBlockingFlush', 'QueryProcessor.executeInternal', 'String.format', 'assertRows', 'row']
['Schema.instance.getKSMetaData', 'assertNotNull', 'ks.tables.getNullable', 'assertNotNull', 'QueryProcessor.executeInternal', 'String.format', 'Keyspace.open', '.', 'assertNotNull', 'store.forceBlockingFlush', 'assertTrue', 'store.getDirectories', '.', '.', '.', 'MigrationManager.announceColumnFamilyDrop', 'assertFalse', 'Schema.instance.getKSMetaData', '.', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertFalse', 'store.getDirectories', '.', '.', 'file.getPath', '.', '.', 'file.getPath', '.', 'Util.spinAssertEquals']
['addTestTable', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'MigrationManager.announceNewKeyspace', 'assertNotNull', 'Schema.instance.getKSMetaData', 'assertEquals', 'Schema.instance.getKSMetaData', 'QueryProcessor.executeInternal', 'Keyspace.open', '.', 'assertNotNull', 'store.forceBlockingFlush', 'QueryProcessor.executeInternal', 'assertRows', 'row']
['Schema.instance.getKSMetaData', 'assertNotNull', 'ks.tables.getNullable', 'assertNotNull', 'QueryProcessor.executeInternal', 'String.format', 'Keyspace.open', '.', 'assertNotNull', 'cfs.forceBlockingFlush', 'assertTrue', 'cfs.getDirectories', '.', '.', '.', 'MigrationManager.announceKeyspaceDrop', 'assertNull', 'Schema.instance.getKSMetaData', 'QueryProcessor.executeInternal', 'String.format', 'assertFalse', 'Keyspace.open', 'assertTrue']
['Schema.instance.getKSMetaData', 'assertNotNull', 'ks.tables.getNullable', 'assertNotNull', 'QueryProcessor.executeInternal', 'String.format', 'MigrationManager.announceKeyspaceDrop', 'assertNull', 'Schema.instance.getKSMetaData']
['assertNull', 'Schema.instance.getKSMetaData', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'MigrationManager.announceNewKeyspace', 'assertNotNull', 'Schema.instance.getKSMetaData', 'addTestTable', 'assertFalse', 'Schema.instance.getKSMetaData', '.', '.', 'MigrationManager.announceNewColumnFamily', 'assertTrue', 'Schema.instance.getKSMetaData', '.', '.', 'assertEquals', 'Schema.instance.getKSMetaData', '.', '.', 'QueryProcessor.executeInternal', 'String.format', 'Keyspace.open', '.', 'assertNotNull', 'cfs.forceBlockingFlush', 'QueryProcessor.executeInternal', 'String.format', 'assertRows', 'row']
['addTestTable', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'MigrationManager.announceNewKeyspace', 'assertNotNull', 'Schema.instance.getKSMetaData', 'assertEquals', 'Schema.instance.getKSMetaData', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'MigrationManager.announceKeyspaceUpdate', 'replicationMap.put', '.', 'replicationMap.put', 'KeyspaceMetadata.create', 'KeyspaceParams.create', 'MigrationManager.announceKeyspaceUpdate', 'Schema.instance.getKSMetaData', 'assertEquals', 'assertFalse', 'newFetchedKs.params.replication.klass.equals']
['SchemaKeyspace.makeCreateKeyspaceMutation', '.', 'Schema.instance.getKSMetaData', 'FBUtilities.timestampMicros', 'Keyspace.open', '.', 'QueryProcessor.executeInternal', 'String.format', 'cfs.forceBlockingFlush', 'cfs.indexManager.getIndexByName', '.', '.', 'throwAssert', 'indexCfs.getLiveSSTables', '.', '.', 'cfs.metadata.copy', 'cfs.metadata.getIndexes', '.', '.', 'throwAssert', 'meta.indexes', 'meta.getIndexes', '.', 'MigrationManager.announceColumnFamilyUpdate', 'assertTrue', 'cfs.indexManager.listIndexes', '.', 'LifecycleTransaction.waitForDeletions', 'assertFalse', '.', 'desc.filenameFor']
['CFMetaData.Builder.create', '.', '.', '.', '.', 'newCFMD.comment', '.']
['getRegularOperations', 'getStaticOperations', 'checkTrue', 'regularDeletions.isEmpty', 'staticDeletions.isEmpty', 'update.add', 'params.makeRangeTombstone']
['getColumnDefinition', 'deletion.affectedColumn', 'checkFalse', 'def.isPrimaryKeyColumn', 'deletion.prepare', 'op.collectMarkerSpecification', 'operations.add', 'newRestrictions', 'boundNames.size', 'stmt.hasConditions', 'checkTrue', 'restrictions.hasAllPKColumnsRestrictedByEqualities']
[None]
[None]
[None]
['setTimestampIsSet']
[None]
['setTimestampIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['setSuper_column', 'org.apache.thrift.TBaseHelper.rightSize', 'super_column.array']
[None]
['setSuper_column', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetTimestamp', 'setTimestamp', 'unsetSuper_column', 'setSuper_column', 'unsetPredicate', 'setPredicate']
['Long.valueOf', 'getTimestamp', 'getSuper_column', 'getPredicate']
['isSetTimestamp', 'isSetSuper_column', 'isSetPredicate']
['.']
['.', 'that.isSetTimestamp', '.', 'that.isSetSuper_column', '.', '.', 'that.isSetPredicate', '.']
['isSetTimestamp', 'builder.append', 'builder.append', 'isSetSuper_column', 'builder.append', 'builder.append', 'isSetPredicate', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetTimestamp', 'isSetTimestamp', 'isSetTimestamp', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSuper_column', 'isSetSuper_column', 'isSetSuper_column', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPredicate', 'isSetPredicate', 'isSetPredicate', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['isSetTimestamp', 'sb.append', 'sb.append', 'isSetSuper_column', 'sb.append', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'isSetPredicate', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['predicate.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetTimestamp', 'oprot.writeFieldBegin', 'oprot.writeI64', 'oprot.writeFieldEnd', 'struct.isSetSuper_column', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'struct.isSetPredicate', 'oprot.writeFieldBegin', 'struct.predicate.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetTimestamp', 'optionals.set', 'struct.isSetSuper_column', 'optionals.set', 'struct.isSetPredicate', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetTimestamp', 'oprot.writeI64', 'struct.isSetSuper_column', 'oprot.writeBinary', 'struct.isSetPredicate', 'struct.predicate.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI64', 'struct.setTimestampIsSet', 'incoming.get', 'iprot.readBinary', 'struct.setSuper_columnIsSet', 'incoming.get', 'struct.predicate.read', 'struct.setPredicateIsSet']
['CFMetaData.generateLegacyCfId', 'CFM.add', 'CFMetaData.Builder.create', '.', '.', '.', '.', 'File.createTempFile', 'tempDataDir.mkdir', 'Directories.overrideDataDirectoriesForTest', 'tempDataDir.getPath', 'createTestFiles']
['Directories.resetDataDirectoriesAfterTest', 'FileUtils.deleteRecursive']
['files.put', 'cfDir', 'dir.mkdirs', 'createFakeSSTable', 'createFakeSSTable', 'backupDir.mkdir', 'createFakeSSTable', 'snapshotDir.mkdirs', 'createFakeSSTable']
['desc.filenameFor', 'f.createNewFile', 'addTo.add']
['ByteBufferUtil.bytesToHex', 'ByteBufferUtil.bytes', 'metadata.cfName.indexOf', 'metadata.cfName.substring', 'metadata.cfName.substring']
['assertEquals', 'cfDir', 'directories.getDirectoryForNewSSTables', 'cfDir', 'cfDir', 'assertEquals', 'Directories.getSnapshotDirectory', 'cfDir', 'assertEquals', 'Directories.getBackupsDirectory']
['CFMetaData.generateLegacyCfId', 'CFMetaData.Builder.create', '.', '.', '.', '.', 'PARENT_CFM.getColumnDefinition', 'ByteBufferUtil.bytes', 'IndexMetadata.fromIndexTargets', 'Collections.singletonList', 'Collections.emptyMap', 'PARENT_CFM.indexes', 'PARENT_CFM.getIndexes', '.', 'CassandraIndex.indexCfsMetadata', 'indexDirectories.getCFDirectories', 'assertEquals', 'cfDir', 'parentDirectories.getDirectoryForNewSSTables', 'indexDirectories.getDirectoryForNewSSTables', 'Directories.getSnapshotDirectory', 'Directories.getSnapshotDirectory', 'assertEquals', 'indexSnapshotDirectory.getParentFile', 'parentSnapshotDirectory.mkdirs', 'assertTrue', 'parentDirectories.snapshotExists', 'assertTrue', 'indexDirectories.snapshotExists', 'assertEquals', 'parentDirectories.snapshotCreationTime', 'indexDirectories.snapshotCreationTime', 'createFile', 'parentSnapshot.filenameFor', 'createFile', 'indexSnapshot.filenameFor', 'assertEquals', 'parentDirectories.trueSnapshotsSize', 'assertEquals', 'indexDirectories.trueSnapshotsSize', 'parentDirectories.getSnapshotDetails', 'assertTrue', 'parentSnapshotDetail.containsKey', 'assertEquals', 'parentSnapshotDetail.get', '.', 'indexDirectories.getSnapshotDetails', 'assertTrue', 'indexSnapshotDetail.containsKey', 'assertEquals', 'indexSnapshotDetail.get', '.', 'Directories.getBackupsDirectory', 'Directories.getBackupsDirectory', 'assertEquals', 'indexBackupDirectory.getParentFile']
['writer.write', 'writer.flush']
['directories.sstableLister', 'lister.listFiles', 'files.get', 'f.getPath', '.', 'f.getPath', '.', 'listed.contains', 'listed.contains', 'directories.sstableLister', '.', 'lister.listFiles', 'files.get', 'f.getPath', '.', 'listed.contains', 'listed.contains', 'directories.sstableLister', '.', 'lister.listFiles', 'files.get', 'f.getPath', '.', 'f.getPath', '.', 'listed.contains', 'f.getName', '.', 'listed.contains', 'listed.contains']
['DatabaseDescriptor.getDiskFailurePolicy', 'DatabaseDescriptor.setDiskFailurePolicy', 'StringUtils.join', 'FileUtils.handleFSError', '.', 'assertTrue', 'BlacklistedDirectories.isUnwritable', 'DatabaseDescriptor.setDiskFailurePolicy']
['assertEquals', 'cfDir', 'directories.getDirectoryForNewSSTables', 'Long.toString', 'System.nanoTime', 'cfDir', 'Directories.getSnapshotDirectory', 'Executors.newFixedThreadPool', '.', 'Arrays.asList', 'assertTrue', 'fut.get', '.']
['getWriteableDirectories', 'getWriteableDirectories', 'assertEquals', 'candidates.size', 'Directories.pickWriteableDirectory', 'testMap.put', 'assertFalse', 'testMap.size', 'testMap.size', 'fail', 'testMap.clear', 'getWriteableDirectories', 'assertEquals', 'candidates.size', 'assertTrue', 'candidate.dataDirectory.getAvailableSpace', 'Directories.pickWriteableDirectory', 'testMap.put', 'assertFalse', 'testMap.size', 'testMap.size', 'fail']
[None]
[None]
[None]
[None]
[None]
['candidates.add', 'Directories.sortWriteableCandidates']
['probe.setIncrementalBackupsEnabled']
['probe.stopNativeTransport']
['probe.disableHintedHandoff']
['wrapped.next']
['wrapped.nextDouble']
['wrapped.inverseCumProb']
['wrapped.setSeed']
[None]
['quanta', 'delegate.next', 'random.nextDouble']
[None]
['delegate.inverseCumProb', 'quanta']
['Arrays.binarySearch']
['delegate.setSeed']
['Stress.main']
['samplePatternCache.get', 'Arrays.asList', 'getSamplingPattern', 'startIndices.add', 'startIndices.add', 'samplePatternCache.put']
['originalIndexCache.get', 'getSamplingPattern', '.', 'pattern.contains', 'originalIndexes.add', 'originalIndexCache.put']
['getOriginalIndexes', 'originalIndexes.size', 'originalIndexes.get', 'originalIndexes.get']
['getSamplingPattern', 'Math.abs', 'allStartPoints.get', 'allStartPoints.get']
['functionName.hasKeyspace', 'state.getRawKeyspace', 'state.getKeyspace', 'functionName.hasKeyspace', 'ThriftValidation.validateKeyspaceNotSystem']
['state.hasKeyspaceAccess']
[None]
['Schema.instance.getFunctions', 'olds.size', 'String.format', 'Schema.instance.getKSMetaData', 'argRawTypes.size', 'argTypes.add', 'prepareType', 'Schema.instance.findFunction', '.', 'sb.length', 'sb.append', 'sb.append', 'String.format', 'olds.isEmpty', 'olds.iterator', '.', 'String.format', 'olds.iterator', '.', 'old.isNative', 'String.format', 'MigrationManager.announceAggregateDrop', 'old.name', 'old.name', 'AbstractType.asCQLTypeStringList', 'old.argTypes']
['rawType.isFrozen', 'String.format', 'rawType.canBeNonFrozen', 'rawType.freeze', 'rawType.prepare', '.']
['lookupIndexedTable']
['lookupIndexedTable', 'state.hasColumnFamilyAccess']
[None]
['announceMigration']
['lookupIndexedTable', 'cfm.copy', 'updatedCfm.indexes', 'updatedCfm.getIndexes', '.', 'MigrationManager.announceColumnFamilyUpdate']
['Schema.instance.getKSMetaData', 'keyspace', 'keyspace', 'ksm.findIndexedTable', '.', 'String.format', 'keyspace']
['assertInvalidMessage', 'assertInvalidMessage', 'execute', 'execute']
['View.findBaseTable', 'keyspace', 'columnFamily', 'state.hasColumnFamilyAccess', 'keyspace']
[None]
['MigrationManager.announceViewDrop', 'keyspace', 'columnFamily', 'keyspace', 'columnFamily']
['updateScores']
['reset']
['ManagementFactory.getPlatformMBeanServer', 'mbs.registerMBean']
['ManagementFactory.getPlatformMBeanServer', 'mbs.unregisterMBean']
['subsnitch.gossiperStarting']
['subsnitch.getRack']
['subsnitch.getDatacenter']
['sortByProximity']
['sortByProximityWithScore', 'sortByProximityWithBadness']
['Collections.sort', 'compareEndpoints']
['compareEndpoints']
['addresses.size', 'subsnitch.sortByProximity', 'addresses.size', 'scores.get', 'subsnitchOrderedScores.add', 'Collections.sort', 'sortedScores.iterator', 'sortedScoreIterator.next', 'sortByProximityWithScore']
['scores.get', 'scores.get', 'receiveTiming', 'receiveTiming', 'scored1.equals', 'subsnitch.compareEndpoints']
[None]
['samples.clear']
[None]
[None]
[None]
[None]
['subsnitch.getClass', '.']
['InetAddress.getByName', 'samples.get', 'sample.getSnapshot', '.', 'timings.add']
['StorageService.instance.reportManualSeverity']
['StorageService.instance.getSeverity', 'FBUtilities.getBroadcastAddress']
['subsnitch.isWorthMergingForRangeQuery', 'l1.size', 'l2.size', 'l1.get', '.', 'l2.get', 'maxScore', 'maxScore', 'maxScore']
['scores.get']
['DatabaseDescriptor.getDynamicBadnessThreshold', 'DatabaseDescriptor.setDynamicBadnessThreshold', 'StorageService.instance.unsafeInitialize', 'String.valueOf', 'ss.hashCode', 'FBUtilities.getBroadcastAddress', 'hosts.add', 'InetAddress.getByAddress', 'updater.start', 'dsnitch.getSortedListByProximity', 'updater.join', 'DatabaseDescriptor.setDynamicBadnessThreshold']
['hosts.get', 'random.nextInt', 'hosts.size', 'random.nextInt', 'dsnitch.receiveTiming']
[None]
[None]
[None]
[None]
[None]
['prev.height', 'prev.prev']
['Integer.bitCount', 'ThreadLocalRandom.current', '.']
['append']
['randomLevel', 'newTail.height', 'tail.next', 'newTail.height', 'tail.next', 'tail.setNext', 'newTail.setPrev']
['node.height', 'node.prev', 'node.next', 'prev.setNext', 'next.setPrev', 'node.height', 'node.height', 'node.prev']
['finger.next']
[None]
['node.next', 'node.prev', 'node.prev', '.', 'node.next', 'node.next', '.', 'node.parent', '.', 'node.next', 'node.parent']
['nodes.put', 'list.append', 'canon.add', 'ThreadLocalRandom.current', 'list.isWellFormed', 'System.out.println', 'rand.nextInt', 'list.get', 'list.remove', 'nodes.remove', 'canon.remove', 'nodes.put', 'list.append', 'canon.add', 'list.isWellFormed']
['Gossiper.instance.addLocalApplicationState', 'StorageService.instance.valueFactory.internalIP', 'Gossiper.instance.register']
[None]
[None]
[None]
[None]
[None]
['bytes.remaining']
[None]
[None]
['probe.startGossiping']
[None]
['UUIDSerializer.serializer.serializedSize', 'TypeSizes.sizeofUnsignedVInt', 'message.hint.remaining', 'message.hint.remaining']
['UUIDSerializer.serializer.serialize', 'out.writeUnsignedVInt', 'message.hint.remaining', 'out.write']
[None]
['Math.min', 'Math.min', 'Math.min']
['getClass', 'o.getClass']
['Objects.hash']
['String.format']
['info.isEmpty', 'updateTimestamp', 'info.timestamp', 'info.isExpiring', 'updateTTL', 'info.ttl', 'updateLocalDeletionTime', 'info.localExpirationTime']
['updateTimestamp', 'cell.timestamp', 'cell.isExpiring', 'updateTTL', 'cell.ttl', 'updateLocalDeletionTime', 'cell.localDeletionTime', 'cell.isTombstone', 'updateLocalDeletionTime', 'cell.localDeletionTime']
['deletionTime.isLive', 'updateTimestamp', 'deletionTime.markedForDeleteAt', 'updateLocalDeletionTime', 'deletionTime.localDeletionTime']
['Math.min']
['Math.min']
['Math.min']
[None]
[None]
[None]
['deletionInfo.collectStats', 'staticRow.isEmpty', 'Rows.collectStats', 'rows.hasNext', 'Rows.collectStats', 'rows.next', 'collector.get']
['out.writeUnsignedVInt', 'out.writeUnsignedVInt', 'out.writeUnsignedVInt']
['TypeSizes.sizeofUnsignedVInt', 'TypeSizes.sizeofUnsignedVInt', 'TypeSizes.sizeofUnsignedVInt']
['in.readUnsignedVInt', 'in.readUnsignedVInt', 'in.readUnsignedVInt']
['innerTestMultiThreadedReadConsistency']
['DatabaseDescriptor.getPartitioner', '.', 'Collections.singletonList', 'state.addApplicationState', 'valueFactory.tokens', 'state.addApplicationState', 'valueFactory.normal', 'state.states', 'values.put', 'entry.getKey', 'entry.getValue', 'values.containsKey', 'values.containsKey', 'numFailures.incrementAndGet', 'System.out.println', 'String.format', 't1.start', 't2.start', 't1.join', 't2.join', 'assertTrue', 'numFailures.get']
['state.addApplicationState', 'valueFactory.tokens', 'state.addApplicationState', 'valueFactory.normal']
['state.states', 'values.put', 'entry.getKey', 'entry.getValue', 'values.containsKey', 'values.containsKey', 'numFailures.incrementAndGet', 'System.out.println', 'String.format']
['innerTestMultiThreadWriteConsistency']
['DatabaseDescriptor.getPartitioner', '.', 'Collections.singletonList', 'UUID.randomUUID', 'states.put', 'valueFactory.tokens', 'states.put', 'valueFactory.normal', 'state.addApplicationStates', 'states.put', 'valueFactory.internalIP', 'states.put', 'valueFactory.hostId', 'state.addApplicationStates', 't1.start', 't2.start', 't1.join', 't2.join', 'state.states', 'assertEquals', 'states.size', 'values.put', 'entry.getKey', 'entry.getValue', 'assertTrue', 'values.containsKey', 'assertTrue', 'values.containsKey', 'assertTrue', 'values.containsKey', 'assertTrue', 'values.containsKey']
['states.put', 'valueFactory.tokens', 'states.put', 'valueFactory.normal', 'state.addApplicationStates']
['states.put', 'valueFactory.internalIP', 'states.put', 'valueFactory.hostId', 'state.addApplicationStates']
['Event.deserialize']
['msg.event.serialize']
['msg.event.serializedSize']
[None]
['valueToCode.get', 'String.format']
['System.getProperty', 'Long.parseLong', 'System.getProperty', 'logger.warn']
['System.getProperty', 'logger.info', 'Integer.parseInt']
['Gossiper.instance.endpointStateMap.entrySet', 'sb.append', '.', 'entry.getKey', 'appendEndpointState', 'entry.getValue', 'sb.toString']
['Gossiper.instance.endpointStateMap.size', 'Gossiper.instance.endpointStateMap.entrySet', 'entry.getValue', '.', 'nodesStatus.put', 'entry.getKey', '.', 'nodesStatus.put', 'entry.getKey', '.']
['Gossiper.instance.endpointStateMap.entrySet', 'entry.getValue', '.']
['Gossiper.instance.endpointStateMap.entrySet', 'entry.getValue', '.']
['arrivalSamples.entrySet', 'entry.getValue', 'window.mean', 'window.getLastReportedPhi', 'entry.getKey', '.', 'results.put']
['Gossiper.instance.getEndpointStateForEndpoint', 'InetAddress.getByName', 'appendEndpointState', 'sb.toString']
['sb.append', '.', 'endpointState.getHeartBeatState', '.', '.', 'sb.append', '.', 'endpointState.getHeartBeatState', '.', '.', 'endpointState.states', 'state.getKey', 'sb.append', '.', 'state.getKey', '.', '.', 'state.getValue', '.', '.', 'state.getValue', '.', 'endpointState.getApplicationState', 'sb.append', '.', '.', 'sb.append']
['FileUtils.createTempFile', 'os.write', 'toString', '.']
['DatabaseDescriptor.setPhiConvictThreshold']
['DatabaseDescriptor.getPhiConvictThreshold']
['ep.equals', 'FBUtilities.getBroadcastAddress', 'Gossiper.instance.getEndpointStateForEndpoint', 'logger.error', 'epState.isAlive']
['System.nanoTime', 'arrivalSamples.get', 'heartbeatWindow.add', 'arrivalSamples.putIfAbsent', 'heartbeatWindow.add', 'heartbeatWindow.add', 'logger.isTraceEnabled', 'logger.info', 'heartbeatWindow.mean']
['arrivalSamples.get', 'System.nanoTime', 'logger.warn', 'System.nanoTime', 'logger.debug', 'hbWnd.phi', 'logger.isTraceEnabled', 'logger.trace', 'getPhiConvictThreshold', 'logger.isTraceEnabled', 'logger.trace', 'getPhiConvictThreshold', 'hbWnd.mean', 'listener.convict', 'logger.isDebugEnabled', 'getPhiConvictThreshold', 'logger.debug', 'logger.isTraceEnabled', 'logger.trace', 'logger.trace', 'hbWnd.mean']
['logger.debug', 'listener.convict', 'getPhiConvictThreshold']
['arrivalSamples.remove']
['fdEvntListeners.add']
['fdEvntListeners.remove']
['arrivalSamples.keySet', 'sb.append', 'arrivalSamples.get', 'sb.append', 'sb.append', 'sb.append', 'System.getProperty', 'sb.append', 'sb.toString']
['size']
[None]
[None]
[None]
['System.getProperty', 'logger.info', 'TimeUnit.NANOSECONDS.convert', 'Integer.parseInt']
['arrivalIntervals.add', 'logger.trace', 'logger.debug', 'arrivalIntervals.add']
['arrivalIntervals.mean']
['mean']
[None]
['Arrays.toString', 'arrivalIntervals.getArrivalIntervals']
[None]
[None]
[None]
[None]
[None]
['System.arraycopy']
[None]
[None]
['setSeed']
['setSeed', 'setSeed']
['rollover']
['random.setSeed', 'random.nextLong']
['nextLong']
['nextLong']
['Math.abs', 'nextLong']
['rollover']
['nextLong']
['Float.intBitsToFloat', 'nextLong']
['Double.longBitsToDouble', 'nextLong']
['random.nextGaussian']
[None]
['sb.append', '.', 'sb.append', '.', 'sb.append', '.', 'sb.append', '.', 'sb.append', '.', 'sb.append', '.', 'size', 'sb.append', '.', 'isCompressed', 'sb.append', '.', 'sb.append', '.', 'sb.append', 'sb.toString']
['getClass', 'o.getClass', 'cfId.equals']
['cfId.hashCode']
['UUIDSerializer.serializer.serialize', 'out.writeInt', 'out.writeUTF', 'header.version.toString', 'out.writeUTF', 'out.writeLong', 'out.writeInt', 'header.sections.size', 'out.writeLong', 'out.writeLong', 'header.compressionMetadata.getChunksForSections', 'CompressionInfo.serializer.serialize', 'out.writeLong', 'out.writeInt', 'SerializationHeader.serializer.serialize']
['UUIDSerializer.serializer.deserialize', 'in.readInt', 'DatabaseDescriptor.getSSTableFormat', '.', 'in.readUTF', 'SSTableFormat.Type.validate', 'in.readUTF', 'in.readLong', 'in.readInt', 'sections.add', 'Pair.create', 'in.readLong', 'in.readLong', 'CompressionInfo.serializer.deserialize', 'in.readLong', 'in.readInt', 'SerializationHeader.serializer.deserialize']
['UUIDSerializer.serializer.serializedSize', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'header.version.toString', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'header.sections.size', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'CompressionInfo.serializer.serializedSize', 'TypeSizes.sizeof', 'SerializationHeader.serializer.serializedSize']
[None]
['buffer.capacity']
['buffer.hasRemaining']
['buffer.remaining']
['size', 'String.format', 'getPath', 'size', 'buffer.position']
[None]
[None]
[None]
['buffer.position']
['createHardLink']
['to.exists', 'from.exists', 'Files.createLink', 'to.toPath', 'from.toPath']
['File.createTempFile']
['createTempFile', 'System.getProperty']
['deleteWithConfirm']
['file.exists', 'file.getName', 'Files.delete', 'file.toPath', 'merge']
['deleteWithConfirm']
['maybeFail', 'deleteWithConfirm']
['atomicMoveWithFallback', '.', '.', 'logger.isTraceEnabled', 'logger.trace']
['renameWithConfirm']
['from.exists', 'logger.isTraceEnabled', 'logger.trace', 'String.format', 'from.getPath', 'to.getPath', 'atomicMoveWithFallback', 'from.toPath', 'to.toPath', 'String.format', 'from.getPath', 'to.getPath']
['Files.move', 'logger.trace', 'Files.move']
['FileChannel.open', 'Paths.get', 'channel.truncate']
['c.close', 'logger.warn']
['c.close', 'logger.warn']
['close', 'Arrays.asList']
['c.close', 'logger.warn']
['c.close', 'logger.warn']
['.']
['file.getCanonicalPath']
['getCanonicalPath', 'getCanonicalPath', 'filePath.startsWith']
['Paths.get', '.', 'Paths.get', '.', 'FileUtils.getCanonicalPath', 'Paths.get', '.', 'Paths.get', '.']
[None]
['isCleanerAvailable', 'buffer.isDirect', 'db.cleaner', 'db.cleaner', '.']
['createDirectory']
['directory.exists', 'directory.mkdirs']
['f.delete']
['file.delete']
['deleteWithConfirm', 'ScheduledExecutors.nonPeriodicTasks.execute']
['deleteWithConfirm']
['df.format', 'df.format', 'df.format', 'df.format', 'df.format']
['dir.isDirectory', 'dir.list', 'deleteRecursive', 'deleteWithConfirm']
['dir.isDirectory', 'dir.list', 'deleteRecursiveOnExit', 'logger.trace', 'dir.deleteOnExit']
['StorageService.instance.isSetupCompleted', 'handleStartupFSError', 'JVMStabilityInspector.inspectThrowable', 'DatabaseDescriptor.getDiskFailurePolicy', 'StorageService.instance.stopTransports']
['StorageService.instance.isSetupCompleted', 'handleStartupFSError', 'JVMStabilityInspector.inspectThrowable', 'DatabaseDescriptor.getDiskFailurePolicy', 'StorageService.instance.stopTransports', 'BlacklistedDirectories.maybeMarkUnwritable', 'BlacklistedDirectories.maybeMarkUnreadable', 'Keyspace.removeUnreadableSSTables']
['DatabaseDescriptor.getDiskFailurePolicy', 'logger.error', 'DatabaseDescriptor.getDiskFailurePolicy', 'JVMStabilityInspector.killCurrentJVM']
['Files.walkFileTree', 'folder.toPath', 'attrs.size', 'logger.error']
['attrs.size']
['in.readFully', 'out.write', 'in.readFully', 'out.write']
['parent.getCanonicalFile', 'child.getCanonicalFile', 'parent.equals', 'toCheck.getParentFile']
['file.exists', 'write', 'Arrays.asList', 'write', 'Arrays.asList']
['file.exists', 'write', 'Arrays.asList', 'write', 'Arrays.asList']
['write', 'Arrays.asList']
['Files.write', 'file.toPath']
['Files.readAllLines', 'file.toPath', 'Collections.emptyList']
['FileUtils.createTempFile', 'Files.write', 'file.toPath', 'expected.getBytes', 'assertTrue', 'file.exists', 'Files.readAllBytes', 'file.toPath', 'assertEquals', 'Charset.forName', 'FileUtils.truncate', 'file.getAbsolutePath', 'Files.readAllBytes', 'file.toPath', 'assertEquals', 'Charset.forName', 'FileUtils.truncate', 'file.getAbsolutePath', 'Files.readAllBytes', 'file.toPath', 'assertEquals']
['createFolder', 'Paths.get', 'DatabaseDescriptor.getAllDataFileLocations', 'folder.deleteOnExit', 'createFolder', 'Paths.get', 'folder.getPath', 'createFile', 'createFile', 'createFile', 'createFile', 'createFile', 'assertEquals', 'FileUtils.folderSize', 'assertEquals', '.', 'FileUtils.folderSize', 'FileUtils.folderSize', 'assertEquals', 'Arrays.stream', '.', 'f.length', '.']
['path.toFile', 'FileUtils.createDirectory']
['f.setLength', 'System.err.println']
['closeIfEmpty']
['row.isEmpty', 'row.purge']
['row.purge']
[None]
['iter.isEmpty', 'iter.close']
[None]
['iterator', '.', '.', 'iter.hasNext', 'iter.next', 'staticRow', '.', 'hasRows']
[None]
[None]
['.']
[None]
['.']
[None]
['iter.hasNext']
['iter.next']
['staticRow', '.', 'hasRows']
['staticRow', '.', 'hasNext']
['.']
['identityDistribution.nextDouble']
['parseOptionalKeyspace', 'parseOptionalTables', 'probe.forceKeyspaceFlush']
['body.retain']
['body.release']
[None]
['EnumSet.noneOf', 'set.add']
['flag.ordinal']
[None]
['String.format', 'ErrorMessage.wrap']
['Math.min', 'buffer.readableBytes', 'buffer.skipBytes']
['CBUtil.readRawBytes', 'CBUtil.allocator.heapBuffer', 'Snappy.maxCompressedLength', 'Snappy.compress', 'output.array', 'output.arrayOffset', 'output.writerIndex', 'output.release', 'frame.release', 'frame.with']
['CBUtil.readRawBytes', 'Snappy.isValidCompressedBuffer', 'CBUtil.allocator.heapBuffer', 'Snappy.uncompressedLength', 'Snappy.uncompress', 'output.array', 'output.arrayOffset', 'output.writerIndex', 'output.release', 'frame.release', 'frame.with']
['CBUtil.readRawBytes', 'compressor.maxCompressedLength', 'CBUtil.allocator.heapBuffer', 'outputBuf.array', 'outputBuf.arrayOffset', 'compressor.compress', 'outputBuf.writerIndex', 'frame.with', 'outputBuf.release', 'frame.release']
['CBUtil.readRawBytes', 'CBUtil.allocator.heapBuffer', 'decompressor.decompress', 'output.array', 'output.arrayOffset', 'output.writerIndex', 'frame.with', 'output.release', 'frame.release']
['t.getCause']
[None]
[None]
['AbstractType.asCQLTypeStringList', 'function.argTypes', 'function.name', 'cause.toString', 'fee.initCause']
['probe.getAndResetGCStats', 'Math.sqrt', 'System.out.printf', 'System.out.printf']
[None]
[None]
[None]
['checkArgument', 'args.size', 'args.get', 'args.get', 'probe.getCfsProxy', 'System.out.println', 'cfsProxy.getMinimumCompactionThreshold', 'cfsProxy.getMaximumCompactionThreshold']
['checkArgument', 'args.size', 'args.get', 'args.get', 'args.get', 'probe.getEndpoints', 'System.out.println', 'endpoint.getHostAddress']
[None]
['.', 'conn.setRequestMethod', 'conn.setRequestProperty', 'conn.getResponseCode', 'conn.getContentLength', 'conn.getContent', 'd.readFully', 'FileUtils.close', 'conn.disconnect']
['endpoint.equals', 'FBUtilities.getBroadcastAddress', 'Gossiper.instance.getEndpointStateForEndpoint', 'state.getApplicationState', 'SystemKeyspace.loadDcRackInfo', 'savedEndpoints.containsKey', 'savedEndpoints.get', '.', 'state.getApplicationState']
['endpoint.equals', 'FBUtilities.getBroadcastAddress', 'Gossiper.instance.getEndpointStateForEndpoint', 'state.getApplicationState', 'SystemKeyspace.loadDcRackInfo', 'savedEndpoints.containsKey', 'savedEndpoints.get', '.', 'state.getApplicationState']
[None]
[None]
['GossipDigestSerializationHelper.serialize', 'out.writeInt', 'gDigestAckMessage.epStateMap.size', 'gDigestAckMessage.epStateMap.entrySet', 'entry.getKey', 'CompactEndpointSerializationHelper.serialize', 'EndpointState.serializer.serialize', 'entry.getValue']
['GossipDigestSerializationHelper.deserialize', 'in.readInt', 'CompactEndpointSerializationHelper.deserialize', 'EndpointState.serializer.deserialize', 'epStateMap.put']
['GossipDigestSerializationHelper.serializedSize', 'TypeSizes.sizeof', 'ack.epStateMap.size', 'ack.epStateMap.entrySet', 'CompactEndpointSerializationHelper.serializedSize', 'entry.getKey', 'EndpointState.serializer.serializedSize', 'entry.getValue']
['logger.isTraceEnabled', 'logger.trace', 'Gossiper.instance.isEnabled', 'Gossiper.instance.isInShadowRound', 'logger.isTraceEnabled', 'logger.trace', 'gDigestAckMessage.getGossipDigestList', 'gDigestAckMessage.getEndpointStateMap', 'logger.trace', 'gDigestList.size', 'epStateMap.size', 'epStateMap.size', 'Gossiper.instance.notifyFailureDetector', 'Gossiper.instance.applyStateLocally', 'Gossiper.instance.isInShadowRound', 'logger.isDebugEnabled', 'logger.debug', 'Gossiper.instance.finishShadowRound', 'gDigest.getEndpoint', 'Gossiper.instance.getStateForVersionBiggerThan', 'gDigest.getMaxVersion', 'deltaEpStateMap.put', 'logger.isTraceEnabled', 'logger.trace', 'MessagingService.instance', '.']
['DatabaseDescriptor.getAuthorizer', '.', 'state.getUser']
['options', 'option.accept']
['options', 'option.happy']
[None]
['grouping.accept', 'grouping.happy']
['out.println', 'out.println', '.', 'grouping.options', 'sb.append', 'sb.append', 'option.shortDisplay', 'out.println', 'sb.toString', 'out.println', 'grouping.options', 'printed.add', 'option.longDisplay', 'out.println', 'option.longDisplay', 'option.multiLineDisplay', 'out.println']
['ImmutableList.builder', 'builder.add', 'builder.add', 'builder.build']
['String.format']
['String.format']
['constructor.newInstance']
['ByteBuffer.allocate']
[None]
['VersionGenerator.getNextVersion']
[None]
[None]
[None]
['String.format']
['out.writeInt', 'hbState.getGeneration', 'out.writeInt', 'hbState.getHeartBeatVersion']
['in.readInt', 'in.readInt']
['TypeSizes.sizeof', 'state.getGeneration', 'TypeSizes.sizeof', 'state.getHeartBeatVersion']
['MockSchema.cleanup']
['check', 'Helpers.filterIn', 'check', 'Helpers.filterIn', 'set', 'check', 'Helpers.filterIn', 'set']
['check', 'Helpers.filterOut', 'set', 'check', 'Helpers.filterOut', 'set', 'check', 'Helpers.filterOut', 'set']
['check', 'Helpers.concatUniq']
['Helpers.identityMap', 'set', 'Assert.assertEquals', 'identity.size', 'Assert.assertSame', 'identity.get', 'Assert.assertSame', 'identity.get', 'Assert.assertSame', 'identity.get']
['Helpers.replace', 'Assert.assertTrue', 'Helpers.replace', 'Assert.assertTrue', 'ImmutableMap.of', 'Helpers.replace', 'Assert.assertTrue', 'check', 'Helpers.replace']
['ImmutableSet.copyOf']
['Assert.assertEquals', 'ImmutableSet.copyOf']
['MockSchema.newCFS', 'Lists.newArrayList', 'MockSchema.sstable', 'MockSchema.sstable', 'Helpers.setReplaced', 'Assert.assertNull', 'Assert.assertTrue', 'reader.isReplaced', 'Helpers.setReplaced', 'assertNotNull']
['MockSchema.newCFS', 'Lists.newArrayList', 'MockSchema.sstable', 'MockSchema.sstable', 'Assert.assertNull', 'Helpers.prepareForObsoletion', 'assertNotNull', 'assertEquals', 'obsoletions.size', 'Helpers.markObsolete', 'Assert.assertNull', 'Assert.assertTrue', 'reader.isMarkedCompacted', 'Helpers.markObsolete', 'assertNotNull', 'txnLogs.finish']
['identityDistribution.next', 'sizeDistribution.setSeed', 'sizeDistribution.next', 'identityDistribution.next', 'ByteBuffer.wrap', 'Arrays.copyOf']
['DatabaseDescriptor.getHintsDirectory', '.', 'HintsService.instance.metrics.incrPastWindow', 'InetAddress.getLocalHost', 'HintsService.instance.metrics.log', 'executeInternal', 'rows.one', '.', 'assertEquals', 'Iterators.getLast', '.', 'returned.values', '.']
['isPaused.get', 'catalog.stores', '.', 'isScheduled', '.', '.', 'store.isWriting', 'store.hasFiles', '.', 'Gossiper.instance.valuesEqual', 'getBroadcastAddress', 'store.address', '.']
['store.hasFiles', 'dispatchExecutor.dispatch', 'store.isWriting', 'writeExecutor.closeWriter']
['dispatchExecutor.isScheduled']
['ChecksummedDataInput.open', 'HintsDescriptor.deserialize', 'descriptor.isCompressed', 'CompressedChecksummedDataInput.upgradeInput', 'descriptor.createCompressor', 'reader.close']
['open']
['input.close']
[None]
['input.seek']
[None]
[None]
[None]
[None]
['CLibrary.trySkipCache', 'input.getChannel', '.', 'input.getFilePointer', 'input.getPath', 'input.isEOF', 'endOfData', 'input.getFilePointer']
['input.getFilePointer', 'input.isEOF', 'computeNextInternal']
['input.resetCrc', 'input.resetLimit', 'input.readInt', 'input.checkCrc', 'readHint']
['rateLimiter.acquire', 'input.limit', 'Hint.serializer.deserialize', 'descriptor.messagingVersion', 'input.checkLimit', 'logger.warn', 'descriptor.fileName', 'input.skipBytes', 'Ints.checkedCast', 'input.bytesPastLimit', 'input.checkCrc', 'logger.warn', 'input.getPosition', 'descriptor.fileName']
['input.getFilePointer', 'input.isEOF', 'computeNextInternal']
['input.resetCrc', 'input.resetLimit', 'input.readInt', 'input.checkCrc', 'readBuffer']
['rateLimiter.acquire', 'input.limit', 'ByteBufferUtil.read', 'input.checkCrc', 'logger.warn', 'input.getPosition', 'descriptor.fileName']
['executor.shutdown', 'executor.awaitTermination']
['executor.submit']
['executor.submit']
['executor.submit']
['executor.submit', '.']
['executor.submit']
['executor.submit', 'catalog.stores', '.']
['buffer.waitForModifications', 'flush', 'buffer.recycle', 'bufferPool.offer', 'recycledBuffer.free']
['bufferPool.currentBuffer', 'buffer.waitForModifications', 'flush']
['bufferPool.currentBuffer', 'buffer.waitForModifications', 'stores.forEach', 'flush', 'buffer.consumingHintsIterator']
['stores.forEach', 'catalog.fsyncDirectory']
['buffer.hostIds', '.', 'flush', 'buffer.consumingHintsIterator', 'catalog.get']
['flushInternal', 'iterator.hasNext', 'store.closeWriter']
['DatabaseDescriptor.getMaxHintsFileSize', 'store.getOrOpenWriter', 'writer.newSession', 'iterator.hasNext', 'session.append', 'iterator.next', 'session.position', 'writer.descriptor', '.']
['logger.trace', 'reply', 'hint.mutation.getPartitionUpdates', '.', 'logger.warn', 'reply', 'hostId.equals', 'StorageService.instance.getLocalHostUUID', 'hint.apply', 'HintsService.instance.write', 'reply']
['MessagingService.instance', '.']
['request.addExist']
[None]
['create']
['iterator.metadata', 'iterator.partitionKey', 'build']
[None]
[None]
['Channels.newInputStream', 'FileMessageHeader.serializer.deserialize', 'header.isCompressed', 'reader.read', 'cause.getCause', 'JVMStabilityInspector.inspectThrowable', 'session.doRetry']
[None]
['sstable.getFilename']
[None]
[None]
[None]
[None]
[None]
['setColumn_name', 'org.apache.thrift.TBaseHelper.rightSize', 'column_name.array']
[None]
['setColumn_name', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['setValue', 'org.apache.thrift.TBaseHelper.rightSize', 'value.array']
[None]
['setValue', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
['unsetColumn_name', 'setColumn_name', 'unsetOp', 'setOp', 'unsetValue', 'setValue']
['getColumn_name', 'getOp', 'getValue']
['isSetColumn_name', 'isSetOp', 'isSetValue']
['.']
['.', 'that.isSetColumn_name', '.', '.', 'that.isSetOp', '.', '.', 'that.isSetValue', '.']
['isSetColumn_name', 'builder.append', 'builder.append', 'isSetOp', 'builder.append', 'builder.append', 'op.getValue', 'isSetValue', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_name', 'isSetColumn_name', 'isSetColumn_name', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetOp', 'isSetOp', 'isSetOp', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetValue', 'isSetValue', 'isSetValue', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.op.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32', 'struct.op.getValue', 'oprot.writeBinary']
['iprot.readBinary', 'struct.setColumn_nameIsSet', 'IndexOperator.findByValue', 'iprot.readI32', 'struct.setOpIsSet', 'iprot.readBinary', 'struct.setValueIsSet']
['indexList.size', 'indexList.subList', 'indexList.subList', 'indexList.size', 'Collections.binarySearch', 'comparator.indexComparator']
['version.storeRows', 'clusteringSerializer.serialize', 'clusteringSerializer.serialize', 'out.writeUnsignedVInt', 'out.writeVInt', 'out.writeBoolean', 'DeletionTime.serializer.serialize']
['clusteringSerializer.deserialize', 'clusteringSerializer.deserialize', 'version.storeRows', 'in.readUnsignedVInt', 'in.readVInt', 'in.readBoolean', 'DeletionTime.serializer.deserialize', 'in.readLong', 'in.readLong']
['version.storeRows', 'clusteringSerializer.serializedSize', 'clusteringSerializer.serializedSize', 'TypeSizes.sizeofUnsignedVInt', 'TypeSizes.sizeofVInt', 'TypeSizes.sizeof', 'DeletionTime.serializer.serializedSize']
['firstName.unsharedHeapSize', 'lastName.unsharedHeapSize', 'endOpenMarker.unsharedHeapSize']
['toInternalName']
[None]
['hasKeyspace', 'cfName.setKeyspace', 'getKeyspace']
[None]
['refreshReadableBoundary']
['refreshReadableBoundary']
['lastReadableByData.floorEntry', 'lastReadableByIndex.floorEntry', 'byIndex.getValue', 'byData.getValue', 'byIndex.getValue', 'byData.getValue', 'lastReadableByData.headMap', '.', 'lastReadableByIndex.headMap', '.']
[None]
['maybeAddEntry']
['entries.length', 'offsets.writeInt', 'entries.length', 'entries.write', 'decoratedKey.getKey', 'entries.writeLong', 'setNextSamplePosition', 'offsets.length', 'entries.length', 'lastReadableByData.put', 'lastReadableByIndex.put']
[None]
['entries.setCapacity', 'entries.length', 'offsets.setCapacity', 'offsets.length']
['build']
['entries.length', 'offsets.length', 'entries.length', 'Math.ceil', 'offsets.currentBuffer', '.', 'entries.currentBuffer', '.']
['entries.close', 'offsets.close']
['entries.close', 'offsets.close']
['Math.ceil']
['Math.max', 'Math.ceil', 'Math.min', 'Math.max']
['existing.getSamplingLevel', 'existing.getMinIndexInterval', 'Downsampling.getStartPoints', 'existing.size', 'existing.getEntriesLength', 'existing.size', 'existing.getEndInSummary', 'existing.getPositionInSummary', 'existing.getEntries', 'Memory.allocate', 'Memory.allocate', 'existing.size', 'newOffsets.setInt', 'existing.getPositionInSummary', 'existing.getEndInSummary', 'newEntries.put', 'existing.getMaxNumberOfEntries']
[None]
['Math.max', 'future.getDelay', 'future.cancel', 'executor.scheduleWithFixedDelay', 'redistributeSummaries']
['redistributeSummaries']
['future.getDelay']
[None]
['getAllSSTables', 'sstables.size', 'intervals.put', 'sstable.getFilename', 'Math.round', 'sstable.getEffectiveIndexInterval']
['getAllSSTables', 'sstable.getEffectiveIndexInterval', 'sstables.size']
[None]
['getAllSSTables', 'sstable.getIndexSummaryOffHeapSize']
['Keyspace.all', 'ks.getColumnFamilyStores', 'result.addAll', 'cfStore.getLiveSSTables']
['Keyspace.all', 'ks.getColumnFamilyStores', 'cfStore.getTracker', '.', 'cfStore.getTracker', '.', 'ImmutableSet.copyOf', 'view.sstables', 'ImmutableSet.copyOf', 'view.getUncompacting', 'allNonCompacting.put', 'allCompacting.addAll', 'Sets.difference', 'Pair.create']
['getCompactingAndNonCompactingSSTables', 'redistributeSummaries', 'compactingAndNonCompacting.right.values', 'modifier.close']
['CompactionManager.instance.runIndexSummaryRedistribution']
['generateRandomIndex', 'assertEquals', 'random.left.get', '.', 'ByteBuffer.wrap', 'random.right.getKey', 'random.right.close']
['generateRandomIndex', 'assertEquals', 'random.right.binarySearch', 'random.left.get', 'random.right.close']
['generateRandomIndex', 'assertEquals', 'random.right.getPosition', 'random.right.close']
['generateRandomIndex', 'IndexSummary.serializer.serialize', 'dos.writeUTF', 'dos.writeUTF', 'FileUtils.closeQuietly', 'dos.toByteArray', 'IndexSummary.serializer.deserialize', 'assertEquals', 'is.binarySearch', 'random.left.get', 'assertEquals', 'dis.readUTF', 'assertEquals', 'dis.readUTF', 'is.close', 'FileUtils.closeQuietly', 'random.right.close']
['builder.maybeAddEntry', 'p.decorateKey', 'builder.build', 'assertEquals', 'summary.size', 'assertEquals', 'summary.getPosition', 'assertArrayEquals', 'summary.getKey', 'IndexSummary.serializer.serialize', 'dos.toByteArray', 'IndexSummary.serializer.deserialize', 'assertEquals', 'loaded.size', 'assertEquals', 'summary.getPosition', 'loaded.getPosition', 'assertArrayEquals', 'summary.getKey', 'summary.getKey', 'summary.close', 'loaded.close']
['Lists.newArrayList', 'list.size', 'UUID.randomUUID', 'partitioner.decorateKey', 'ByteBufferUtil.bytes', 'list.add', 'Collections.sort', 'builder.maybeAddEntry', 'list.get', 'builder.build', 'Pair.create']
['assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern', 'assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern', 'assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern', 'assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern', 'assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern', 'assertEquals', 'Arrays.asList', 'Downsampling.getSamplingPattern']
[None]
['generateRandomIndex', 'assertEquals', 'keys.get', '.', 'ByteBuffer.wrap', 'original.getKey', 'Downsampling.getSamplingPattern', 'downsample', 'assertEquals', 'entriesAtSamplingLevel', 'original.getMaxNumberOfEntries', 'downsampled.size', 'samplePattern.subList', 'shouldSkip', 'assertEquals', 'keys.get', '.', 'ByteBuffer.wrap', 'downsampled.getKey', 'testPosition', 'downsample', 'previous.close', 'assertEquals', 'entriesAtSamplingLevel', 'original.getMaxNumberOfEntries', 'downsampled.size', 'samplePattern.subList', 'shouldSkip', 'assertEquals', 'keys.get', '.', 'ByteBuffer.wrap', 'downsampled.getKey', 'testPosition', 'previous.close', 'original.close']
['SSTableReader.getIndexScanPositionFromBinarySearchResult', 'original.binarySearch', 'downsampled.binarySearch', 'SSTableReader.getIndexSummaryIndexFromBinarySearchResult', 'SSTableReader.getIndexScanPositionFromBinarySearchResult', 'downsampled.getEffectiveIndexIntervalAfterIndex', 'keys.size', 'keys.get']
['assertEquals', 'Downsampling.getOriginalIndexes', '.', 'full.add', 'assertEquals', 'Downsampling.getOriginalIndexes', 'assertEquals', 'full.subList', 'full.size', 'Downsampling.getOriginalIndexes', 'assertEquals', 'assertEquals', 'Arrays.asList', 'Downsampling.getOriginalIndexes', 'assertEquals', 'Arrays.asList', 'Downsampling.getOriginalIndexes', 'assertEquals', 'Arrays.asList', 'Downsampling.getOriginalIndexes']
['assertEquals', 'Downsampling.getEffectiveIndexIntervalAfterIndex', 'assertEquals', 'Downsampling.getEffectiveIndexIntervalAfterIndex', 'assertEquals', 'Downsampling.getEffectiveIndexIntervalAfterIndex', 'assertEquals', 'assertEquals', 'Downsampling.getEffectiveIndexIntervalAfterIndex', 'assertEquals', 'Downsampling.getEffectiveIndexIntervalAfterIndex']
[None]
['source.isEmpty', 'InetAddress.getByName', 'String.format', 'decompose']
['InetAddressType.instance.fromString', 'String.format', 'parsed.getClass', '.']
['getSerializer', '.', '.']
[None]
[None]
['identityDistribution.next', 'InetAddress.getByAddress']
['Math.signum', 'Integer.toString', 'Integer.toString']
['ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertEquals', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertEquals', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertEquals', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare']
['comparator.compare', 'ByteBuffer.wrap']
['comparator.compare', 'ByteBuffer.wrap']
['comparator.compare']
['assertSignum', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare', 'ByteBuffer.wrap', 'ByteBuffer.wrap']
['ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare']
['ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare', 'assertSignum', 'comparator.compare']
['ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'Arrays.sort', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.']
['ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'ByteBuffer.wrap', 'Arrays.sort', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.', 'assertArrayEquals', '.']
['ByteBuffer.allocate', 'rng.nextInt', 'rng.nextBytes', '.', 'Arrays.sort', '.', '.', 'assertTrue', 'i0.compareTo']
['intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'IntervalTree.build', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'assertEquals', 'it.search', '.', 'Interval.<', 'intervals2.add', 'Interval.<', 'intervals2.add', 'Interval.<', 'intervals2.add', 'Interval.<', 'intervals2.add', 'Interval.<', 'intervals2.add', 'Interval.<', 'intervals2.add', 'Interval.<', 'IntervalTree.build', 'assertEquals', 'it2.search', '.', 'Interval.<', 'it2.search', 'Interval.<', 'assertEquals', 'intersection1.size', 'it2.search', 'Interval.<', 'assertEquals', 'intersection1.size']
['intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'IntervalTree.build', 'Collections.sort', 'Interval.<', 'l.add', 'assertEquals']
['intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'intervals.add', 'Interval.<', 'IntervalTree.build', 'IntervalTree.serializer', 'out.writeInt', 'in.readInt', 'out.writeUTF', 'in.readUTF', 'v.length', '.', 'serializer.serialize', 'out.toByteArray', 'serializer.deserialize', 'intervals2.add', 'assertEquals']
['out.writeInt']
['in.readInt']
[None]
['out.writeUTF']
['in.readUTF']
['v.length']
['probe.invalidateKeyCache']
[None]
[None]
['javaUDF.executeImpl']
['javaSource.length', 'javaSource.charAt']
['name.toString', 'qualifiedName.length', 'sb.append', 'qualifiedName.length', 'qualifiedName.charAt', 'Character.isJavaIdentifierPart', 'sb.append', 'sb.append', 'Integer.toHexString', 'sb.append', '.', 'ThreadLocalRandom.current', '.', '.', '.', 'classSequence.incrementAndGet', 'sb.toString']
['type.getName', 'n.startsWith', 'type.getSimpleName']
['code.append', 'code.append', '.', '.', 'argNames.get', 'javaSourceName', 'code.toString']
['code.append', 'logger.isTraceEnabled', 'code.append', '.', 'argNames.get', '.', 'code.append', '.', 'javaSourceName', '.', '.', 'composeMethod', '.', '.', '.', '.', '.', 'code.toString']
['type.isPrimitive', 'type.getName']
[None]
[None]
['className.lastIndexOf', 'className.substring']
['izer.countTokens', 'izer.nextToken', '.']
[None]
['result.hasErrors', 'result.getProblems', 'Collections.addAll', 'result.getClassFiles', 'targetClassLoader.addClass', 'classFile.getBytes']
['result.append', 'result.append', 'findType', 'result.toString']
['result.append', 'result.append', 'result.append', 'result.append', 'findType', 'result.toString']
['className.equals', 'className.replace', 'UDFunction.udfClassLoader.getResourceAsStream', 'ByteStreams.toByteArray', 'className.toCharArray']
['result.equals', 'result.replace', 'UDFunction.udfClassLoader.getResourceAsStream']
['result.append', 'result.append', 'Character.isUpperCase', 'isPackage', 'result.toString', 'result.append', 'result.append', 'isPackage', 'result.toString']
[None]
['classes.put']
['classes.get']
['classes.remove', 'defineClass', 'getParent', '.']
[None]
['keyAlias.toLowerCase', 'options.get', 'password.isEmpty', 'options.get', 'store.getKey', 'password.toCharArray', 'String.format']
[None]
[None]
['futures.add', 'TPE.submit', 'probe.getAndResetGCStats', 'results.add', 'future.get', 'GcStats.aggregate']
['probe.getAndResetGCStats']
['notificationSerialNumber.getAndIncrement', 'System.currentTimeMillis', 'event.getMessage', 'userData.put', 'event.getType', '.', 'userData.put', 'event.getProgressCount', 'userData.put', 'event.getTotal', 'notification.setUserData', 'broadcaster.sendNotification']
['checkState', 'probe.isJoined', 'probe.joinRing']
['createTable', 'Integer.toString', 'execute', 'makeStringValue', 'StorageService.instance.forceKeyspaceFlush', 'Integer.toString', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertRows', 'execute', 'makeStringValue', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute', 'assertClusterRows', 'execute']
['rows.iterator', 'assertTrue', 'iter.hasNext', 'iter.next', 'assertEquals', 'makeStringValue', 'row.getString', 'assertEquals', 'row.getString', 'assertEquals', 'row.getInt', 'assertEquals', 'row.getInt', 'assertFalse', 'iter.hasNext']
[None]
['createTable', 'createIndex', 'insertData', 'clearCache', 'CacheService.instance.keyCache.getMetrics', 'execute', 'assertEquals', 'result.size', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'execute', 'assertEquals', 'result.size', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'CacheService.instance.keyCache.submitWrite', '.', 'CacheService.instance.keyCache.size', 'CacheService.instance.keyCache.clear', 'Assert.assertEquals', 'CacheService.instance.keyCache.size', 'CacheService.instance.keyCache.loadSaved', 'assertEquals', 'CacheService.instance.keyCache.size', 'execute', 'assertEquals', 'result.size', 'assertNull', 'Schema.instance.getColumnFamilyStoreIncludingIndexes', 'Pair.create', 'assertNull', 'Schema.instance.getColumnFamilyStoreIncludingIndexes', 'Pair.create', 'dropTable', 'Schema.instance.updateVersion', 'CacheService.instance.keyCache.clear', 'CacheService.instance.keyCache.loadSaved', 'assertEquals', 'CacheService.instance.keyCache.size']
['createTable', 'createIndex', 'insertData', 'clearCache', 'CacheService.instance.keyCache.getMetrics', 'execute', 'assertEquals', 'result.size', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'execute', 'assertEquals', 'result.size', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'dropTable', 'CacheService.instance.keyCache.submitWrite', '.', 'CacheService.instance.keyCache.clear', 'Assert.assertEquals', 'CacheService.instance.keyCache.size', 'CacheService.instance.keyCache.loadSaved', 'CacheService.instance.keyCache.keyIterator', 'iter.hasNext', 'iter.next', 'Assert.assertFalse', 'key.ksAndCFName.left.equals', 'Assert.assertFalse', 'key.ksAndCFName.right.startsWith']
['createTable', 'insertData', 'clearCache', 'assertRows', 'execute', 'Integer.toOctalString', 'String.valueOf', 'String.valueOf', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'assertRows', 'execute', 'Integer.toOctalString', 'String.valueOf', 'String.valueOf', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals']
['createTable', 'insertData', 'clearCache', 'assertEquals', 'execute', '.', 'Integer.toOctalString', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'assertEquals', 'execute', '.', 'Integer.toOctalString', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'assertRows', 'execute', 'Integer.toOctalString', 'String.valueOf', 'String.valueOf', 'CacheService.instance.keyCache.getMetrics', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals', 'assertRows', 'execute', 'Integer.toOctalString', 'String.valueOf', 'String.valueOf', 'metrics.hits.getCount', 'metrics.requests.getCount', 'assertEquals', 'assertEquals']
['prepareTable', 'StorageService.instance.disableAutoCompaction', 'Keyspace.open', '.', '.', '.', '.', 'Integer.toOctalString', 'Integer.toOctalString', 'makeList', 'String.valueOf', 'String.valueOf', 'execute', 'Keyspace.open', '.', '.', '.', 'Keyspace.open', '.', '.', '.', '.']
['StorageService.instance.disableAutoCompaction', 'Keyspace.open', '.', '.', '.', 'Keyspace.open', '.', '.']
['list.add']
['CassandraMetricsRegistry.Metrics.getNames', '.', 'CacheService.instance.keyCache.clear', 'CacheService.instance.keyCache.getMetrics', 'Assert.assertEquals', 'metrics.entries.getValue', '.', 'Assert.assertEquals', 'metrics.hits.getCount', 'Assert.assertEquals', 'metrics.requests.getCount', 'Assert.assertEquals', 'metrics.size.getValue', '.']
['String.format', 'ByteBufferUtil.bytesToHex', 'ByteBuffer.wrap']
['ObjectSizes.sizeOfArray']
['getClass', 'o.getClass', 'ksAndCFName.equals', 'desc.equals', 'Arrays.equals']
['ksAndCFName.hashCode', 'desc.hashCode', 'Arrays.hashCode']
['StorageService.instance.setPartitionerUnsafe', 'SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['DatabaseDescriptor.setPartitionerUnsafe']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'cfs.clearUnsafe', 'Util.getAll', 'Util.cmd', '.', '.', '.', 'partitions.get', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.get', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.get', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.get', '.', '.', '.', 'ByteBufferUtil.bytes']
['insert']
['Schema.instance.getCFMetaData', 'FBUtilities.timestampMicros', 'builder.clustering', '.', '.', '.']
[None]
[None]
[None]
[None]
[None]
['setCountIsSet']
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
['setCountIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['unsetKey', 'setKey', 'unsetCount', 'setCount']
['getKey', 'Integer.valueOf', 'getCount']
['isSetKey', 'isSetCount']
['.']
['.', 'that.isSetKey', '.']
['isSetKey', 'builder.append', 'builder.append', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCount', 'isSetCount', 'isSetCount', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeBinary', 'oprot.writeI32']
['iprot.readBinary', 'struct.setKeyIsSet', 'iprot.readI32', 'struct.setCountIsSet']
['validate']
['getAllReplicationOptions', '.']
['getAllReplicationOptions', 'replication.remove']
['getMap', 'Option.REPLICATION.toString', 'Collections.emptyMap']
['getBoolean', 'Option.DURABLE_WRITES.toString', 'KeyspaceParams.create', 'getAllReplicationOptions']
['getBoolean', 'Option.DURABLE_WRITES.toString', 'getReplicationStrategyClass', 'ReplicationParams.fromMap', 'getAllReplicationOptions']
['toInternalName']
[None]
[None]
['name.toLowerCase']
['hasKeyspace', 'getKeyspace']
['Tables.none', 'Views.none', 'Types.none', 'Functions.none']
['Views.none', 'Types.none', 'Functions.none']
[None]
[None]
[None]
[None]
[None]
[None]
['Iterables.concat', 'views.metadatas']
['views.getNullable', 'tables.getNullable']
['table.cfName.equals', 'table.getIndexes', 'indexNames.add']
['tablesAndViews', 'cfm.getIndexes', '.', 'Optional.of', 'Optional.empty']
['Objects.hashCode']
['name.equals', 'params.equals', 'tables.equals', 'views.equals', 'functions.equals', 'types.equals']
['Objects.toStringHelper', '.', '.', '.', '.', '.', '.', '.']
['CFMetaData.isNameValid', 'String.format', 'params.validate', 'tablesAndViews', '.']
['createTable', 'execute', 'Keyspace.open', '.', 'Util.assertEmpty', 'Util.cmd', '.', '.', '.', 'Util.assertEmpty', 'Util.cmd', '.', '.', '.', '.', 'Util.assertEmpty', 'Util.cmd', '.', '.', '.', 'cfs.forceBlockingFlush']
['createTable', 'execute', 'Keyspace.open', '.', 'Util.getOnlyRow', 'Util.cmd', '.', '.', '.', 'assertEquals', 'ByteBufferUtil.bytes', 'row.getCell', '.', 'cfs.metadata.getColumnDefinition', 'Util.getOnlyRow', 'Util.cmd', '.', '.', '.', 'assertEquals', 'ByteBufferUtil.bytes', 'row.getCell', '.', 'cfs.metadata.getColumnDefinition', 'Util.getOnlyRow', 'Util.cmd', '.', '.', '.', '.', 'assertEquals', 'ByteBufferUtil.bytes', 'row.getCell', '.', 'cfs.metadata.getColumnDefinition', 'cfs.forceBlockingFlush']
['createTable', 'execute', 'Keyspace.open', '.', 'Util.assertEmpty', 'Util.cmd', '.', 'cfs.forceBlockingFlush', 'Util.assertEmpty', 'Util.cmd', '.', 'cfs.getLiveSSTables', 'assertEquals', 'sstables.size', 'sstables.iterator', '.', '.', 'Util.assertEmpty', 'Util.cmd', '.']
['ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'Slices.with', 'cfs.getComparator', 'Slice.make', 'singlePartitionSlice', 'command.executionController', 'command.executeInternal', 'iterator.next', 'rowIterator.next', 'row.getCell', 'cfs.metadata.getColumnDefinition', 'assertEquals', 'ByteBufferUtil.bytes', 'cell.value', 'rowIterator.next', 'row.getCell', 'cfs.metadata.getColumnDefinition', 'assertEquals', 'ByteBufferUtil.bytes', 'cell.value', 'assertFalse', 'rowIterator.hasNext']
['createTable', 'execute', 'Keyspace.open', '.', 'assertRowsInSlice', 'assertRowsInSlice', 'assertRowsInSlice', 'assertRowsInSlice', 'assertRowsInSlice', 'assertRowsInSlice', 'cfs.forceBlockingFlush']
['createTable', 'Keyspace.open', '.', 'execute', 'cfs.forceBlockingFlush', 'execute', 'PartitionColumns.of', 'cfs.metadata.getColumnDefinition', 'singlePartitionSlice', 'command.executionController', 'command.executeInternal', 'iterator.next', 'rowIterator.next', 'row.getCell', 'cfs.metadata.getColumnDefinition', 'assertEquals', 'ByteBufferUtil.bytes', 'cell.value']
['command.executionController', 'command.executeInternal', 'iterator.hasNext', 'fail', 'iterator.next', '.', '.', 'iterator.next', 'rowIterator.next', 'row.getCell', 'cfs.metadata.getColumnDefinition', 'assertEquals', 'String.format', 'ByteBufferUtil.bytesToHex', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytesToHex', 'cell.value', 'ByteBufferUtil.bytes', 'cell.value', 'assertFalse', 'rowIterator.hasNext']
['Slice.Bound.create', 'ByteBufferUtil.bytes', 'Slice.Bound.create', 'ByteBufferUtil.bytes', 'Slices.with', 'cfs.getComparator', 'Slice.make']
['DataLimits.cqlLimits', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'Util.dk']
['createTable', 'Keyspace.open', '.', 'execute', 'execute', 'slices', 'singlePartitionSlice', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'cfs.forceBlockingFlush']
['createTable', 'Keyspace.open', '.', 'execute', 'execute', 'execute', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'cfs.forceBlockingFlush']
['createTable', 'Keyspace.open', '.', 'execute', 'cfs.forceBlockingFlush', 'execute', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'cfs.forceBlockingFlush']
['createTable', 'Keyspace.open', '.', 'execute', 'cfs.forceBlockingFlush', 'validateSliceLarge', 'cfs.getLiveSSTables', '.', 'CompactionManager.instance.performMaximal', 'cfs.getLiveSSTables', '.', '.', 'sstable.getPosition', 'Util.dk', 'indexEntry.columnsIndex', '.', 'validateSliceLarge']
['createTable', 'Keyspace.open', '.', 'cfs.disableAutoCompaction', 'execute', 'cfs.forceBlockingFlush', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'assertEquals', 'cfs.metric.sstablesPerReadHistogram.cf.getSnapshot', '.', 'singlePartitionSlice', 'slices', 'assertRowsInResult', 'assertEquals', 'cfs.metric.sstablesPerReadHistogram.cf.getSnapshot', '.', 'singlePartitionSlice', 'slices', 'assertRowsInResult']
['createTable', 'Keyspace.open', '.', 'cfs.disableAutoCompaction', 'execute', 'cfs.forceBlockingFlush', 'assertRows', 'execute', 'row', 'row', 'assertEquals', 'cfs.metric.sstablesPerReadHistogram.cf.getSnapshot', '.']
['slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult', 'slices', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'ColumnFilter.all', 'DataLimits.cqlLimits', 'Util.dk', 'assertRowsInResult']
['createTable']
['ByteBuffer.wrap', 'execute', 'ByteBuffer.wrap', 'execute', 'flush', 'assertRows', 'execute', 'row', 'row']
['latency.update', 'totalLatency.inc', 'parent.addNano']
['Metrics.remove', 'factory.createMetricName', 'Metrics.remove', 'factory.createMetricName', 'Metrics.remove', 'factory.createMetricName', 'aliasFactory.createMetricName', 'Metrics.remove', 'factory.createMetricName', 'aliasFactory.createMetricName']
['Util.switchPartitioner', 'SchemaLoader.loadSchema', 'SchemaLoader.schemaDefinition']
['partitionerSwitcher.close']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'Schema.instance.getNonSystemKeyspaces', 'TokenMetadata.ringIterator', 'tmd.sortedTokens', 'tokenIter.hasNext', 'endpoints.add', 'tmd.getEndpoint', 'tokenIter.next', 'expectedEndpoints.put', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'endpointTokens.get', 'assertTrue', 'tmd.isLeaving', 'hosts.get', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'Schema.instance.getNonSystemKeyspaces', 'getStrategy', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'strategy.calculateNaturalEndpoints', 'tmd.cloneOnlyTokenMap', 'expected.add', 'expectedEndpoints.get', '.', 'expected.contains', 'hosts.get', 'expected.add', 'expectedEndpoints.get', '.', 'assertEquals']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'endpointTokens.get', 'InetAddress.getByName', 'Gossiper.instance.initializeNodeUnsafe', 'UUID.randomUUID', 'Gossiper.instance.injectApplicationState', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'InetAddress.getByName', 'Gossiper.instance.initializeNodeUnsafe', 'UUID.randomUUID', 'Gossiper.instance.injectApplicationState', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'keyspaceStrategyMap.put', 'getStrategy', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'keyspaceStrategyMap.entrySet', 'keyspaceStrategy.getKey', 'keyspaceStrategy.getValue', 'keyTokens.size', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'expectedEndpoints.get', '.', 'keyTokens.get', '.', 'endpoints.size', 'assertTrue', 'expectedEndpoints.get', '.', 'keyTokens.get', '.', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'endpointTokens.get', 'Gossiper.computeExpireTime', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'endpointTokens.get', 'Gossiper.computeExpireTime', 'ss.onChange', 'valueFactory.normal', 'Collections.singleton', 'keyTokens.get', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'expectedEndpoints.get', '.', '.', 'makeAddrs', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'keyspaceStrategyMap.entrySet', 'keyspaceStrategy.getKey', 'keyspaceStrategy.getValue', 'keyTokens.size', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'expectedEndpoints.get', '.', 'keyTokens.get', '.', 'endpoints.size', 'assertTrue', 'expectedEndpoints.get', '.', 'keyTokens.get', '.', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'endpointTokens.get', 'assertTrue', 'tmd.isMember', 'hosts.get', 'assertTrue', 'tmd.isLeaving', 'hosts.get', 'assertTrue', 'tmd.getBootstrapTokens', '.', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'assertNull', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'keyTokens.get', 'assertTrue', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'keyTokens.get', 'tmd.getToken', 'hosts.get', 'assertTrue', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'keyTokens.get', 'tmd.getToken', 'hosts.get', 'assertTrue', 'tmd.getBootstrapTokens', '.']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'endpointTokens.get', 'assertTrue', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'endpointTokens.get', 'tmd.getToken', 'hosts.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'keyTokens.get', 'assertTrue', 'tmd.getLeavingEndpoints', '.', 'assertEquals', 'keyTokens.get', 'tmd.getToken', 'hosts.get', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'keyTokens.get', 'Gossiper.computeExpireTime', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'keyTokens.get', 'assertTrue', 'tmd.getBootstrapTokens', '.', 'assertTrue', 'tmd.getLeavingEndpoints', '.', 'assertEquals', 'keyTokens.get', 'tmd.getToken', 'hosts.get']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'keyTokens.get', 'assertEquals', 'keyTokens.get', 'tmd.getToken', 'hosts.get', 'assertTrue', 'tmd.isLeaving', 'hosts.get', 'assertNull', 'tmd.getEndpoint', 'endpointTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get', 'assertEquals', 'tmd.getBootstrapTokens', '.', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.leaving', 'Collections.singleton', 'keyTokens.get', 'assertEquals', 'hosts.get', 'tmd.getEndpoint', 'keyTokens.get', 'assertTrue', 'tmd.isLeaving', 'hosts.get', 'assertTrue', 'tmd.getBootstrapTokens', '.', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'keyTokens.get', 'Gossiper.computeExpireTime', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get']
['ss.getTokenMetadata', 'tmd.clearUnsafe', 'Util.createInitialRing', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'endpointTokens.get', 'Gossiper.computeExpireTime', 'assertFalse', 'tmd.isMember', 'hosts.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertEquals', 'tmd.getBootstrapTokens', '.', 'assertEquals', 'hosts.get', 'tmd.getBootstrapTokens', '.', 'keyTokens.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'hosts.get', 'valueFactory.left', 'Collections.singleton', 'keyTokens.get', 'Gossiper.computeExpireTime', 'assertTrue', 'tmd.getBootstrapTokens', '.', 'assertFalse', 'tmd.isMember', 'hosts.get', 'assertFalse', 'tmd.isLeaving', 'hosts.get']
['Util.createInitialRing', 'hosts.get', 'SystemKeyspace.updatePeerInfo', 'SystemKeyspace.updatePeerInfo', 'assertEquals', 'SystemKeyspace.loadDcRackInfo', '.', '.', 'Gossiper.instance.injectApplicationState', 'valueFactory.left', 'Collections.singleton', 'endpointTokens.get', 'Gossiper.computeExpireTime', 'assertTrue', 'Gossiper.instance.isDeadState', 'Gossiper.instance.getEndpointStateForEndpoint', 'hosts.get', 'ss.onChange', 'hosts.get', 'valueFactory.rack', 'assertEquals', 'SystemKeyspace.loadDcRackInfo', '.', '.']
['Util.createInitialRing', 'ss.onChange', 'InetAddress.getByName', 'valueFactory.removingNonlocal', 'UUID.randomUUID']
['addrs.add', 'InetAddress.getByName']
['Schema.instance.getKSMetaData', 'AbstractReplicationStrategy.createReplicationStrategy']
['CFMetaData.compile', 'LegacyLayout.decodeCellName', 'LegacyLayout.makeLegacyComparator', '.', 'assertTrue', 'cellName.column.isRegular']
['CFMetaData.compile', 'LegacyLayout.decodeCellName', 'LegacyLayout.makeLegacyComparator', '.', 'assertTrue', 'cellName.column.isRegular']
['CFMetaData.compile', 'LegacyLayout.decodeCellName', 'LegacyLayout.makeLegacyComparator', '.']
['CFMetaData.compile', 'LegacyLayout.decodeCellName', 'LegacyLayout.makeLegacyComparator', '.']
['legacyHintsTable.getMeanColumns', 'legacyHintsTable.getMeanPartitionSize', 'Math.max', 'Math.min']
['legacyHintsTable.isEmpty', 'logger.info', 'logger.info', 'compactLegacyHints', 'logger.info', 'migrateLegacyHints', 'logger.info', 'legacyHintsTable.truncateBlocking']
['legacyHintsTable.getTracker', '.', '.', 'descriptors.add', 'descriptors.isEmpty', 'forceCompaction']
['CompactionManager.instance.submitUserDefined', '.', 'FBUtilities.nowInSeconds']
['ByteBuffer.allocateDirect', 'String.format', 'QueryProcessor.executeInternal', '.', 'migrateLegacyHints', 'row.getUUID', 'FileUtils.clean']
['String.format', 'QueryProcessor.executeInternalWithPaging', 'migrateLegacyHints', 'deleteLegacyHintsPartition']
['migrateLegacyHints', 'rows.iterator']
['iterator.hasNext', 'migrateLegacyHintsInternal']
['System.currentTimeMillis', 'HintsWriter.create', 'writer.newSession', 'iterator.hasNext', 'convertLegacyHint', 'iterator.next', 'session.append', 'session.position', 'descriptor.fileName']
['deserializeLegacyMutation', 'FBUtilities.nowInSeconds', 'row.getInt', 'TimeUnit.MILLISECONDS.toSeconds', 'Math.min', 'mutation.smallestGCGS', 'Hint.create']
['row.getBlob', 'Mutation.serializer.deserialize', 'row.getInt', 'mutation.getPartitionUpdates', '.', 'logger.error', 'row.getUUID', 'logger.warn', 'row.getUUID']
['PartitionUpdate.fullPartitionDelete', 'UUIDType.instance.decompose', 'System.currentTimeMillis', 'FBUtilities.nowInSeconds', 'mutation.applyUnsafe']
['CQLTester.cleanupAndLeaveDirs', 'keyspacesToMigrate', 'expected.forEach', 'LegacySchemaMigrator.migrate', 'SchemaKeyspace.fetchNonSystemKeyspaces', 'loadLegacySchemaTables', 'format', 'assertTrue', 'executeOnceInternal', '.', 'assertEquals']
['Schema.instance.getKSMetaData', 'systemTables.with', 'LegacySchemaMigrator.LegacySchemaTables.forEach', 'Schema.instance.setKeyspaceMetadata', 'systemKeyspace.withSwapped']
['Keyspaces.builder', 'compactionOptions.put', 'leveledOptions.put', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', '.', 'CompactionParams.scts', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.standardCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.keysIndexCFMD', 'SchemaLoader.keysIndexCFMD', 'SchemaLoader.superCFMD', '.', 'SchemaLoader.jdbcCFMD', '.', 'SchemaLoader.utf8Column', 'SchemaLoader.jdbcCFMD', 'SchemaLoader.jdbcCFMD', 'SchemaLoader.jdbcCFMD', 'SchemaLoader.standardCFMD', '.', 'CompactionParams.lcs', 'SchemaLoader.standardCFMD', '.', 'CompactionParams.lcs', 'SchemaLoader.standardCFMD', '.', '.', '.', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.keysIndexCFMD', 'SchemaLoader.compositeIndexCFMD', 'SchemaLoader.compositeIndexCFMD', '.', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', 'SchemaLoader.keysIndexCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'SchemaLoader.superCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.keysIndexCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.standardCFMD', '.', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simpleTransient', 'Tables.of', 'SchemaLoader.standardCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'SchemaLoader.perRowIndexedCFMD', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'CFMetaData.compile', 'CFMetaData.compile', 'CFMetaData.compile', 'CFMetaData.compile', 'CFMetaData.compile', 'keyspaces.add', 'KeyspaceMetadata.create', 'KeyspaceParams.nts', 'keyspaces.add', 'keyspaceWithDroppedCollections', 'keyspaces.add', 'keyspaceWithTriggers', 'keyspaces.add', 'keyspaceWithUDTs', 'keyspaces.add', 'keyspaceWithUDFs', 'keyspaces.add', 'keyspaceWithUDFsAndUDTs', 'keyspaces.add', 'keyspaceWithUDAs', 'keyspaces.add', 'keyspaceWithUDAsAndUDTs', 'keyspaces.build']
['CFMetaData.compile', 'table.getColumnDefinition', 'bytes', 'table.recordColumnDrop', 'table.removeColumnDefinition', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of']
['Triggers.builder', 'SchemaLoader.standardCFMD', 'triggers.add', 'table.triggers', 'triggers.build', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of']
['bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'add', 'bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'add', 'bytes', 'add', 'bytes', 'add', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.none', 'Views.none', 'Types.of', 'Functions.none']
['UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.none', 'Views.none', 'Types.none', 'Functions.of']
['UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'Functions.builder', '.', '.', '.', '.', 'UDAggregate.create', 'ImmutableList.of', 'udf1.argTypes', '.', 'udf1.returnType', 'udf1.name', 'udf1.argTypes', '.', 'UDAggregate.create', 'ImmutableList.of', 'udf2.argTypes', '.', 'udf3.returnType', 'udf2.name', 'udf3.name', 'udf2.argTypes', '.', 'LongType.instance.decompose', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.none', 'Views.none', 'Types.none', 'Functions.of']
['bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'add', 'bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'ListType.getInstance', 'add', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'Arrays.asList', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.none', 'Views.none', 'Types.of', 'Functions.of']
['bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'add', 'bytes', 'add', 'bytes', 'add', 'bytes', 'add', 'ListType.getInstance', 'add', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'UDFunction.create', 'ImmutableList.of', 'ImmutableList.of', 'Functions.builder', '.', '.', '.', '.', 'UDAggregate.create', 'ImmutableList.of', 'udf1.argTypes', '.', 'udf1.returnType', 'udf1.name', 'udf1.argTypes', '.', 'ByteBuffer.allocate', 'twoNullEntries.putInt', 'twoNullEntries.putInt', 'twoNullEntries.flip', 'UDAggregate.create', 'ImmutableList.of', 'udf2.argTypes', '.', 'udf3.returnType', 'udf2.name', 'udf3.name', 'udf2.argTypes', '.', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.none', 'Views.none', 'Types.of', 'Functions.of']
['makeLegacyCreateKeyspaceMutation', '.']
['adder.add', '.', 'keyspace.params.replication.klass.getName', '.', 'json', 'adder.build', 'keyspace.tables.forEach', 'addTableToSchemaMutation', 'keyspace.types.forEach', 'addTypeToSchemaMutation', 'keyspace.functions.udfs', '.', 'addFunctionToSchemaMutation', 'keyspace.functions.udas', '.', 'addAggregateToSchemaMutation']
['.', 'adder.add', '.', 'table.isSuper', 'table.isSuper', 'adder.add', '.', 'table.compactValueColumn', 'table.comparator.subtype', '.', 'adder.add', 'LegacyLayout.makeLegacyComparator', '.', 'adder.add', '.', 'cachingToString', '.', '.', 'table.params.compaction.klass', '.', '.', 'json', 'table.params.compaction.options', '.', 'json', 'ThriftConversion.compressionParametersToThrift', '.', '.', '.', 'table.getKeyValidator', '.', '.', '.', 'table.params.compaction.maxCompactionThreshold', '.', '.', '.', 'table.params.compaction.minCompactionThreshold', '.', '.', '.', 'table.params.speculativeRetry.toString', 'table.getDroppedColumns', '.', 'UTF8Type.instance.getString', 'entry.getKey', 'entry.getValue', 'adder.addMapEntry', 'adder.add', 'table.isDense', 'adder.add', 'table.makeLegacyDefaultValidator', '.', 'table.allColumns', 'addColumnToSchemaMutation', 'table.getTriggers', 'addTriggerToSchemaMutation', 'adder.build']
['format', 'caching.keysAsString', 'caching.rowsPerPartitionAsString']
['table.isDense', 'column.name.toString', '.', 'adder.add', '.', 'serializeKind', 'table.isDense', '.', 'column.position', 'column.type.toString', 'findIndexForColumn', 'table.getIndexes', 'index.isPresent', 'index.get', 'adder.add', 'adder.add', 'i.kind.toString', 'adder.add', 'json', 'adder.add', 'adder.add', 'adder.add', 'adder.build']
['CassandraIndex.parseTarget', '.', 'Optional.of', 'Optional.empty']
['kind.toString', '.']
['.', '.', '.']
['.', 'type.getNameAsString', 'adder.resetCollection', '.', 'type.size', 'adder.addListEntry', '.', 'type.fieldType', '.', 'type.fieldName', 'adder.build']
['.', 'function.name', 'functionSignatureWithTypes', 'adder.add', '.', 'function.language', '.', 'function.returnType', '.', '.', 'function.isCalledOnNullInput', 'function.body', 'adder.resetCollection', '.', 'function.argNames', '.', 'adder.addListEntry', '.', 'function.argTypes', '.', '.', 'function.argNames', '.', 'adder.build']
['.', 'aggregate.name', 'functionSignatureWithTypes', 'adder.resetCollection', 'adder.add', '.', 'aggregate.stateFunction', '.', 'aggregate.returnType', '.', 'aggregate.stateType', 'adder.add', 'aggregate.stateType', '.', 'aggregate.finalFunction', 'adder.add', 'aggregate.finalFunction', '.', 'aggregate.initialCondition', 'adder.add', 'aggregate.initialCondition', 'aggregate.argTypes', 'adder.addListEntry', 'argType.toString', 'adder.build']
['fun.argTypes', '.', '.', 'argType.asCQL3Type', '.', '.', 'Collectors.toList', 'ListType.getInstance', '.']
['SchemaLoader.prepareServer', 'CFMetaData.Builder.createDense', '.', '.', '.', '.', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'beforeClass']
['Keyspace.setInitialized', 'System.getProperty', '.', 'LEGACY_SSTABLE_ROOT.isDirectory', 'TEST_DATA.add', 'Integer.toString']
[None]
['StorageService.instance.initServer', 'LEGACY_SSTABLE_ROOT.listFiles', '.', 'version.getName', 'Version.validate', 'version.getName', 'SSTableFormat.Type.LEGACY.info.getVersion', '.', 'version.getName', 'testStreaming', 'version.getName']
['SSTableReader.open', 'getDescriptor', 'sstable.getPartitioner', 'ranges.add', 'p.getMinimumToken', 'p.getToken', 'ByteBufferUtil.bytes', 'ranges.add', 'p.getToken', 'ByteBufferUtil.bytes', 'p.getMinimumToken', 'details.add', 'sstable.ref', 'sstable.getPositionsForRanges', 'sstable.estimatedKeysForRanges', 'sstable.getSSTableMetadata', '.', 'FBUtilities.getBroadcastAddress', '.', '.', 'Keyspace.open', '.', 'cfs.getLiveSSTables', '.', 'cfs.getLiveSSTables', '.', '.', 'bytes', 'sstable.iterator', 'Util.dk', 'ColumnFilter.selectionBuilder', '.', 'cfs.metadata.getColumnDefinition', 'bytes', '.', 'iter.partitionLevelDeletion', '.', 'iter.next', '.', '.', '.', 'sstable.selfRef', '.']
['LEGACY_SSTABLE_ROOT.listFiles', '.', 'version.getName', 'Version.validate', 'version.getName', 'SSTableFormat.Type.LEGACY.info.getVersion', '.', 'version.getName', 'testVersion', 'version.getName']
['Keyspace.open', '.', 'SSTableReader.open', 'getDescriptor', 'bytes', 'reader.iterator', 'Util.dk', 'ColumnFilter.selection', 'cfs.metadata.partitionColumns', 'iter.partitionLevelDeletion', '.', 'iter.next', '.', '.', '.', 'System.err.println']
['createKeyspace', 'loadLegacyTables']
['logger.info', 'createTables', 'loadLegacyTable', 'loadLegacyTable', 'loadLegacyTable', 'loadLegacyTable', 'CacheService.instance.invalidateKeyCache', 'CacheService.instance.keyCache.size', 'Integer.toString', 'logger.debug', 'Integer.toString', 'QueryProcessor.executeInternal', 'String.format', 'Assert.assertNotNull', 'Assert.assertEquals', 'rs.size', 'Assert.assertEquals', 'rs.one', '.', 'QueryProcessor.executeInternal', 'String.format', 'Assert.assertNotNull', 'Assert.assertEquals', 'rs.size', 'Assert.assertEquals', 'rs.one', '.', 'QueryProcessor.executeInternal', 'String.format', 'assertLegacyClustRows', 'Integer.toString', 'Integer.toString', 'QueryProcessor.executeInternal', 'String.format', 'assertLegacyClustRows', 'QueryProcessor.executeInternal', 'String.format', 'Assert.assertNotNull', 'Assert.assertEquals', 'rs.size', 'Assert.assertEquals', 'rs.one', '.', 'CacheService.instance.keyCache.size', 'Assert.assertTrue', 'CacheService.instance.keyCache.submitWrite', '.', 'CacheService.instance.invalidateKeyCache', 'Assert.assertEquals', 'CacheService.instance.keyCache.size', 'CacheService.instance.keyCache.loadSaved', 'BigFormat.instance.getVersion', '.', 'Assert.assertEquals', 'CacheService.instance.keyCache.size', 'Assert.assertEquals', 'CacheService.instance.keyCache.size']
['QueryProcessor.executeInternal']
['QueryProcessor.executeInternal', 'String.format', 'QueryProcessor.executeInternal', 'String.format', 'QueryProcessor.executeInternal', 'String.format', 'QueryProcessor.executeInternal', 'String.format']
['Assert.assertNotNull', 'Assert.assertEquals', 'rs.size', 'Assert.assertEquals', 'r.getString', '.']
['String.format', 'logger.info', 'Keyspace.open', '.', 'cfs.getDirectories', '.', 'copySstablesToTestData', 'cfs.loadNewSSTables']
['createKeyspace', 'createTables', 'BigFormat.latestVersion.getVersion', 'sb.append', 'rand.nextInt', 'sb.toString', 'Integer.toString', 'QueryProcessor.executeInternal', 'String.format', 'QueryProcessor.executeInternal', 'String.format', 'Integer.toString', 'QueryProcessor.executeInternal', 'String.format', 'QueryProcessor.executeInternal', 'String.format', 'StorageService.instance.forceKeyspaceFlush', 'String.format', 'ksDir.mkdirs', 'copySstablesFromTestData', 'String.format', 'copySstablesFromTestData', 'String.format', 'copySstablesFromTestData', 'String.format', 'copySstablesFromTestData', 'String.format']
['cfDir.mkdir', 'Keyspace.open', '.', '.', '.', 'srcDir.listFiles', 'copyFile']
['.', 'String.format', 'copyFile']
['file.isFile', 'file.getName', 'is.read', 'os.write']
['getToken']
['ltoken.equals', 'rtoken.equals', 'FBUtilities.midpoint']
[None]
['BigInteger.valueOf', '.']
['ByteBuffer.wrap', 'bigIntegerToken.token.toByteArray']
['ByteBufferUtil.getArray']
['bigIntegerToken.token.toString']
[None]
[None]
[None]
[None]
['key.remaining', 'BigInteger.valueOf', 'key.remaining']
['sortedTokens.get', 'sortedTokens.size', 'allTokens.put', 'sortedRanges.add', 'Schema.instance.getKeyspaces', 'Schema.instance.getTablesAndViews', 'allTokens.put', 'allTokens.get', 'StorageService.instance.getSplits', '.', 'allTokens.values', 'allTokens.entrySet', 'allTokens.put', 'row.getKey', 'row.getValue']
[None]
[None]
['create']
['manifest.add', 'manifest.getAllLevelSize', 'manifest.repairOverlappingSSTables']
['reader.getSSTableLevel', 'logDistribution', 'canAddSSTable', 'logger.trace', '.', 'reader.descriptor.getMetadataSerializer', '.', 'reader.reloadSSTableMetadata', 'logger.error', '.']
['logDistribution', 'logger.isTraceEnabled', 'logger.trace', 'toString', 'remove', 'Math.min', 'added.isEmpty', 'logger.isTraceEnabled', 'logger.trace', 'toString', 'add', 'SSTableReader.sstableOrdering.max']
['Collections.sort', 'current.first.compareTo', 'logger.warn', 'String.format', 'outOfOrderSSTables.add', 'outOfOrderSSTables.isEmpty', 'sendBackToL0']
['sstable.getSSTableLevel', 'copyLevel.add', 'Collections.sort', 'current.first.compareTo']
['remove', 'sstable.descriptor.getMetadataSerializer', '.', 'sstable.reloadSSTableMetadata', 'add']
['builder.append', '.', '.', '.', '.', 'sstable.getSSTableLevel', '.', 'builder.toString']
['Math.pow']
['StorageService.instance.isBootstrapMode', 'getSSTablesForSTCS', 'getLevel', 'mostInteresting.isEmpty', 'logger.info', 'getLevel', 'sstables.isEmpty', 'Sets.newHashSet', 'Sets.difference', 'cfs.getTracker', '.', 'SSTableReader.getTotalBytes', 'maxBytesForLevel', 'logger.trace', 'DatabaseDescriptor.getDisableSTCSInL0', 'getLevel', '.', 'getSSTablesForSTCS', 'getLevel', 'mostInteresting.isEmpty', 'logger.trace', 'getCandidatesFor', 'candidates.isEmpty', 'getNextLevel', 'getOverlappingStarvedSSTables', 'logger.isTraceEnabled', 'logger.trace', 'toString', 'cfs.getCompactionStrategyManager', '.', 'logger.trace', 'getLevel', '.', 'getCandidatesFor', 'candidates.isEmpty', 'getNextLevel', 'cfs.getCompactionStrategyManager', '.']
['cfs.getTracker', '.', 'SizeTieredCompactionStrategy.createSSTableAndLengthPairs', 'AbstractCompactionStrategy.filterSuspectSSTables', 'SizeTieredCompactionStrategy.getBuckets', 'SizeTieredCompactionStrategy.mostInterestingBucket']
['logger.isTraceEnabled', 'logger.trace', 'getLevelSize', 'candidate.first.compareTo', 'candidate.last.compareTo', 'cfs.getTracker', '.', 'getLevel', 'boundaries.contains', 'compacting.contains', 'logger.info', 'sstable.getSSTableLevel', 'withStarvedCandidate.add']
['getLevel', '.']
['getLevel', '.']
['logger.isTraceEnabled', 'getLevel', '.', 'logger.trace', 'getLevel', '.', 'SSTableReader.getTotalBytes', 'getLevel']
['reader.getSSTableLevel', '.']
['candidates.isEmpty', 'candidates.iterator', 'iter.next', 'sstable.first.getToken', 'sstable.last.getToken', 'iter.hasNext', 'iter.next', 'first.compareTo', 'sstable.first.getToken', 'sstable.first.getToken', 'last.compareTo', 'sstable.last.getToken', 'sstable.last.getToken', 'overlapping']
['overlapping', 'sstable.first.getToken', 'sstable.last.getToken']
['start.compareTo', 'candidate.first.getToken', 'candidate.last.getToken', 'candidateBounds.intersects', 'overlapped.add']
['candidate.isMarkedSuspect']
['getLevel', '.', 'logger.trace', 'cfs.getTracker', '.', 'getCompacting', 'candidate.first.compareTo', 'candidate.last.compareTo', 'Iterables.addAll', 'Iterables.filter', 'getLevel', 'Predicates.not', 'ageSortedSSTables', 'candidates.contains', 'Sets.union', 'Collections.singleton', 'overlapping', 'Sets.intersection', '.', 'overlapping', '.', 'firstCompactingKey.getToken', 'lastCompactingKey.getToken', 'Arrays.asList', 'candidates.add', 'remaining.remove', 'candidates.size', 'ageSortedSSTables', '.', 'SSTableReader.getTotalBytes', 'overlapping', 'getLevel', 'Sets.intersection', '.', 'Collections.emptyList', 'overlapping', '.', 'Collections.emptyList', 'Sets.union', 'candidates.size', 'Collections.emptyList', 'Collections.sort', 'getLevel', 'getLevel', '.', 'getLevel', '.', 'sstable.first.compareTo', 'getLevel', '.', 'getLevel', '.', 'getLevel', '.', 'Sets.union', 'Collections.singleton', 'overlapping', 'getLevel', 'Iterables.any', 'Sets.intersection', '.', 'Collections.emptyList']
['getLevel', 'cfs.getTracker', '.', 'levelSSTables.contains', 'sstables.add']
['Collections.sort']
['hashCode']
['getLevel', '.']
['ImmutableSortedSet.copyOf', 'getLevel']
[None]
['getLevel', 'Math.ceil', 'Math.max', 'SSTableReader.getTotalBytes', 'maxBytesForLevel', 'logger.trace', 'Arrays.toString', 'cfs.keyspace.getName', 'Ints.checkedCast']
['Math.max', 'sstable.getSSTableLevel', 'Math.min', 'sstable.getSSTableLevel', 'SSTableReader.getTotalBytes']
['sstables.addAll']
['MockSchema.cleanup']
['DatabaseDescriptor.isIncrementalBackupsEnabled', 'DatabaseDescriptor.setIncrementalBackupsEnabled']
['DatabaseDescriptor.setIncrementalBackupsEnabled']
['MockSchema.newCFS', 'readers', 'tracker.addInitialSSTables', 'tracker.tryModify', 'readers.get', 'readers', '.', 'readers', '.', 'readers', '.', 'txn.cancel', 'txn.update', 'txn.update', 'testBadCancel', 'testBadCancel', 'testBadCancel', 'testBadCancel', 'Assert.assertEquals', 'txn.originals', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertTrue', 'all', 'readers.subList', 'idIn', 'tracker.getView', 'txn.checkpoint', 'testBadCancel', 'testBadCancel', 'testBadCancel', 'testBadCancel', 'Assert.assertEquals', 'txn.originals', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'size', 'txn.current', 'Assert.assertTrue', 'all', 'concat', 'readers.subList', 'of', 'idIn', 'tracker.getView', 'txn.cancel', 'readers.get', 'Assert.assertEquals', 'txn.originals', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'size', 'txn.current', 'Assert.assertTrue', 'all', 'of', 'readers.get', 'idIn', 'tracker.getView']
['MockSchema.newCFS', 'readers', 'tracker.addInitialSSTables', 'tracker.tryModify', 'txn.cancel', 'readers.get', 'txn.split', 'readers.subList', 'Assert.assertEquals', 'txn.originals', '.', 'Assert.assertTrue', 'all', 'readers.subList', 'in', 'txn.originals', 'Assert.assertEquals', 'txn2.originals', '.', 'Assert.assertTrue', 'all', 'readers.subList', 'in', 'txn2.originals', 'txn.update', 'readers', '.', 'txn.split', 'readers.subList', 'Assert.assertTrue']
['txn.update', 'Assert.assertTrue']
['txn.obsolete', 'Assert.assertTrue']
['txn.cancel', 'Assert.assertTrue']
['LogTransaction.waitForDeletions', 'SSTableReader.resetTidying']
['tracker.addInitialSSTables']
['select', 'state', 'Action.get', 'loggedUpdate.contains', 'loggedNew.contains', 'loggedObsolete.contains', 'Action.get', 'stagedNew.contains', 'stagedObsolete.contains', 'ReaderState.visible', 'in', 'ReaderState.visible', 'orIn']
['concat', 'result.add', 'Pair.create', 'state']
['states', 'Assert.assertEquals', 'txn.state', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertTrue', 'reader.selfRef', '.']
['doAssert']
['doAssert']
['doAssert', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'concat', 'Assert.assertTrue', 'reader.selfRef', '.']
['doAssert', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'concat', 'Assert.assertTrue', 'reader.selfRef', '.']
[None]
['readers', '.']
['readers.add', 'MockSchema.sstable', 'copyOf']
['txn.update']
['txn.obsolete']
['valueType.setSeed']
['sizeDistribution.next', 'valueType.generate', 'com.google.common.collect.Lists.newArrayList', 'Arrays.copyOf']
['DatabaseDescriptor.getRoleManager', 'roleManager.canLogin', 'result.addColumnValue', 'UTF8Type.instance.decompose', 'role.getRoleName', 'result.addColumnValue', 'BooleanType.instance.decompose', 'Roles.hasSuperuserStatus']
['expiring']
[None]
['create', 'expiring']
[None]
[None]
[None]
[None]
[None]
[None]
['isEmpty']
['FBUtilities.updateWithLong', 'timestamp']
[None]
['TypeSizes.sizeof', 'timestamp']
[None]
[None]
['String.format']
['.', 'that.timestamp', '.', 'that.ttl', '.', 'that.localExpirationTime']
['Objects.hash', 'timestamp', 'ttl', 'localExpirationTime']
[None]
[None]
[None]
[None]
['FBUtilities.updateWithInt', 'FBUtilities.updateWithInt']
[None]
['TypeSizes.sizeof', 'TypeSizes.sizeof']
[None]
['String.format']
['getToken']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['comparator.getString']
['comparator.validate', 'comparator.fromString']
['comparator.fromString']
[None]
['Collections.singletonMap', 'getMinimumToken']
[None]
[None]
['comparator.getString']
['getPartitioner', 'o.getPartitioner', 'comparator.compare']
['token.hashCode']
['token.equals']
[None]
['ObjectSizes.sizeOnHeapOf']
['s.getLevel', 's.getEffectiveLevel', 's.getMessage', '.', 'installReplacementStreams', 's.getMessage', '.', 'replacementOut.flush', 'replacementErr.flush', 'System.setErr', 'System.setOut']
['LoggerFactory.getLogger', 'LoggerFactory.getLogger', 'wrapLogger', 'System.setOut', 'wrapLogger', 'System.setErr']
['System.getProperty', 'baos.write', 'baos.write', 'write', 'baos.size', 'baos.size', 'baos.toByteArray', 'baos.size', 'baos.toByteArray', 'baos.toByteArray', 'baos.toByteArray', 'logger.error', 'logger.info', 'baos.reset', 'Thread.currentThread', '.', '.', 'Thread.currentThread', '.', 'Thread.currentThread', '.', 'original.println', 'Thread.currentThread', '.', 'isAsyncAppender', 'original.flush', 'isAsyncAppender', 'original.close', 'isAsyncAppender', 'original.write', 'isAsyncAppender', 'original.write', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.print', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.println', 'isAsyncAppender', 'original.printf', 'isAsyncAppender', 'original.printf', 'isAsyncAppender', 'original.format', 'isAsyncAppender', 'original.format', 'isAsyncAppender', 'original.append', 'isAsyncAppender', 'original.append', 'isAsyncAppender', 'original.append']
['baos.write']
['baos.write']
['write']
['baos.size', 'baos.size', 'baos.toByteArray', 'baos.size', 'baos.toByteArray', 'baos.toByteArray', 'baos.toByteArray', 'logger.error', 'logger.info', 'baos.reset']
['Thread.currentThread', '.', '.', 'Thread.currentThread', '.', 'Thread.currentThread', '.', 'original.println', 'Thread.currentThread', '.']
['isAsyncAppender', 'original.flush']
['isAsyncAppender', 'original.close']
['isAsyncAppender', 'original.write']
['isAsyncAppender', 'original.write']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.print']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.println']
['isAsyncAppender', 'original.printf']
['isAsyncAppender', 'original.printf']
['isAsyncAppender', 'original.format']
['isAsyncAppender', 'original.format']
['isAsyncAppender', 'original.append']
['isAsyncAppender', 'original.append']
['isAsyncAppender', 'original.append']
['txnFile.add']
['txnFile.remove']
['txnFile.contains', 'txnFile.contains', 'txnFile.add', 'tracker.notifyDeleting']
['txnFile.type']
['txnFile.id']
[None]
['txnFile.getFiles']
['txnFile.getFilePaths']
['logger.isTraceEnabled', 'logger.trace', 'Files.delete', 'file.toPath', 'logger.error', 'logger.error']
['run']
['data.toString']
['logger.isTraceEnabled', 'logger.trace', 'name', 'data.completed', 'logger.error', 'Throwables.perform', 'logger.error']
['SystemKeyspace.clearSSTableReadMeter', 'desc.filenameFor', 'delete', 'SSTable.delete', 'SSTable.discoverComponentsFor', 'logger.error', 'failedDeletions.add', 'tracker.cfstore.metric.totalDiskSpaceUsed.dec', 'parentRef.release']
['parentRef.release']
['failedDeletions.poll', 'ScheduledExecutors.nonPeriodicTasks.submit', 'SnapshotDeletingTask.rescheduleFailedTasks']
['FBUtilities.waitOnFuture', 'ScheduledExecutors.nonPeriodicTasks.schedule', 'Runnables.doNothing']
['selfRef.ensureReleased', 'logger.error', 'id', 'Throwables.merge']
['complete', 'Throwables.perform']
['complete', 'Throwables.perform']
[None]
['removeUnfinishedLeftovers', '.']
['folders.forEach', 'logFiles.removeUnfinishedLeftovers']
['Arrays.stream', '.', 'folder.listFiles']
['files.get', 'file.getName', 'files.put', 'file.getName', 'filesByName.add']
['files.forEach']
['LogFile.make', 'txn.verify', 'txn.removeUnfinishedLeftovers', 'logger.error', 'logger.error', 'txn.close']
['testBigInt', 'testBigInt']
['getFilter', 'testFalsePositives', 'logger.info']
['testBigRandom', 'testBigRandom']
['getFilter', 'testFalsePositives', '.', '.', 'logger.info']
['testConstrained', 'testConstrained']
['getFilter', 'testFalsePositives', 'logger.info']
['getFilter', 'gen.nextHash', 'bf.add', 'filterKey', 'gen.nextHash', 'bf.isPresent', 'filterKey', 'System.out.printf', 'System.out.printf']
[None]
[None]
['bffp', 'bffp']
['System.out.println', 'staticBits', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained', 'testConstrained']
['System.arraycopy', 'ThreadLocalRandom.current', '.']
['MurmurHash.hash3_x64_128', 'ByteBufferUtil.bytes']
['timeit', 'timeit']
['getFilter', 'testFalsePositives', '.', '.', 'bf.clear', 'logger.info']
['testRandomSelection', 'test.testAsSet.iterator', 'test.testAsList.iterator', 'iter1.hasNext', 'iter1.next', 'iter2.hasNext', 'iter2.next', 'Assert.assertSame', 'Assert.assertEquals', 'iter1.indexOfCurrent', 'iter2.indexOfCurrent', 'Collections.binarySearch', 'Assert.assertNull', 'Assert.assertEquals', 'Assert.assertEquals', 'iter1.indexOfCurrent', 'ThreadLocalRandom.current', '.', 'Assert.assertNull', 'iter1.next', 'Assert.assertNull', 'iter2.next']
['testRandomSelectionOfSet', 'canonical.isEmpty', 'test.isEmpty', 'Assert.assertEquals', 'canonical.isEmpty', 'test.isEmpty', 'Assert.assertEquals', 'canonical.first', 'test.first', 'Assert.assertEquals', 'canonical.last', 'test.last', 'Assert.assertEquals', 'test.ceiling', 'canonical.ceiling', 'Assert.assertEquals', 'test.higher', 'canonical.higher', 'Assert.assertEquals', 'test.floor', 'canonical.floor', 'Assert.assertEquals', 'test.lower', 'canonical.lower']
['testRandomSelectionOfList', 'Collections.binarySearch', 'test.indexOf', 'Assert.assertEquals', 'Assert.assertEquals', 'canonical.get', 'test.get']
['testRandomSelection', 'selection.canonicalList.size', 'selection.testAsList.toArray', 'Assert.assertEquals', 'selection.canonicalList.size', 'Assert.assertEquals', 'selection.canonicalList.get']
['wrapped.apply']
['testRandomSelection', 'update.put', 'selection.testAsSet.tree', 'BTree.transformAndFilter', 'Assert.assertEquals', 'BTree.size', 'Assert.assertSame', 'update.containsKey', 'update.get', 'BTree.transformAndFilter', 'Assert.assertEquals', 'BTree.size', 'assertSame', 'transform', 'iterable', 'BTree.transformAndFilter', 'Assert.assertEquals', 'BTree.size', 'assertSame', 'filter', 'transform', 'notNull', 'iterable', 'update.containsKey', 'BTree.transformAndFilter', 'selection.testAsList.tree', 'Assert.assertEquals', 'BTree.size', 'assertSame', 'filter', 'transform', 'notNull', 'iterable']
['assertSame', 'i1.iterator', 'i2.iterator']
['i1.hasNext', 'i2.hasNext', 'Assert.assertSame', 'i1.next', 'i2.next', 'Assert.assertEquals', 'i1.hasNext', 'i2.hasNext']
['testRandomSelection', 'testRun.get']
['testRandomSelection', 'testRun.get']
['testRandomSelection', 'testRun.get', 'testEachKey.testOne']
['testRandomSelection']
['Runtime.getRuntime', '.', 'randomTree', 'testRun.accept', 'tree.select', 'count.incrementAndGet', 'errors.incrementAndGet', 't.printStackTrace', 'latch.countDown', 'MODIFY.execute', 'latch.getCount', 'latch.await', 'Assert.assertEquals', 'errors.get', 'log', 'count.get', 'errors.get', 'errors.get']
['randomTree', 'testRun.accept', 'tree.select', 'count.incrementAndGet', 'errors.incrementAndGet', 't.printStackTrace', 'latch.countDown']
['ThreadLocalRandom.current', 'Assert.assertEquals', 'canonicalSet.size', 'testAsSet.size', 'Assert.assertEquals', 'canonicalList.size', 'testAsList.size', 'randomKeys', 'random.nextInt', 'canonicalList.size', 'keys.size', 'random.nextBoolean', 'random.nextBoolean', 'keys.size', 'canonicalList.get', 'canonicalList.get', 'canonicalList.size', 'keys.size', 'canonicalList.size', 'random.nextInt', 'keys.get', 'random.nextBoolean', 'keys.get', 'Collections.binarySearch', 'random.nextInt', 'Math.max', 'keys.size', 'keys.size', 'keys.get', 'random.nextBoolean', 'keys.get', 'Collections.binarySearch', 'canonicalSet.headSet', 'canonicalSet.tailSet', 'canonicalSet.subSet', 'testAsSet.headSet', 'testAsSet.tailSet', 'testAsSet.subSet', 'keys.subList', 'canonicalList.subList', 'testAsList.subList', 'Assert.assertEquals', 'canonicalSet.size', 'testAsSet.size', 'Assert.assertEquals', 'canonicalList.size', 'testAsList.size', 'random.nextBoolean', 'naturalOrder', 'random.nextBoolean', 'Collections.reverse', 'Collections.reverse', 'testAsList.descendingSet', 'canonicalSet.descendingSet', 'testAsSet.descendingSet', 'reverseOrder', 'Assert.assertEquals', 'canonicalSet.size', 'testAsSet.size', 'Assert.assertEquals', 'canonicalList.size', 'testAsList.size', 'canonicalSet.isEmpty', 'Assert.assertEquals', 'canonicalSet.first', 'canonicalList.get', 'Assert.assertEquals', 'canonicalSet.last', 'canonicalList.get', 'canonicalList.size', 'Assert.assertEquals', 'canonicalSet.first', 'testAsSet.first', 'Assert.assertEquals', 'canonicalSet.last', 'testAsSet.last', 'Assert.assertEquals', 'canonicalSet.first', 'testAsList.get', 'Assert.assertEquals', 'canonicalSet.last', 'testAsList.get', 'testAsList.size']
['ThreadLocalRandom.current', '.', 'randomTreeByUpdate', 'randomTreeByBuilder']
['ThreadLocalRandom.current', 'random.nextInt', 'random.nextInt', 'BTree.empty', 'random.nextInt', 'random.nextInt', 'build.add', 'canonical.add', 'BTree.update', 'naturalOrder', 'UpdateFunction.<', 'Math.min', 'BTreeSet.<', 'naturalOrder']
['ThreadLocalRandom.current', 'BTree.builder', 'naturalOrder', 'random.nextInt', 'Math.sqrt', 'random.nextInt', 'random.nextBoolean', 'ordered.headSet', 'random.nextInt', 'ordered.tailSet', 'random.nextInt', 'shuffled.subList', 'shuffled.size', 'random.nextInt', 'shuffled.size', 'random.nextInt', 'ordered.add', 'shuffled.add', 'canonical.add', 'random.nextInt', 'builder.addAll', 'builder.addAll', 'BTreeSet.of', 'builder.add', 'builder.addAll', 'builder.add', 'Math.min', 'BTreeSet.<', 'builder.build', 'naturalOrder', 'Assert.assertEquals', 'canonical.size', 'btree.size']
['ThreadLocalRandom.current', 'rnd.nextBoolean', 'rnd.nextFloat', 'rnd.nextFloat', 'results.add', 'v.longValue', 'v.longValue', 'results.add', 'results.add', 'rnd.nextFloat', 'Lists.newArrayList', 'filter', 'rnd.nextFloat']
['canon.add', 'BTree.build', 'Arrays.asList', 'UpdateFunction.noOp', 'BTree.update', 'naturalOrder', 'UpdateFunction.<', 'canon.add', 'canon.add', 'assertTrue', 'BTree.isWellFormed', 'naturalOrder', 'testEqual', 'BTree.iterator', 'canon.iterator']
['testInsertions']
['testInsertions']
['testInsertions']
['testInsertions']
['testInsertions', 'Math.max']
['ThreadLocalRandom.current', 'random.nextInt', 'testInsertions', 'random.nextInt']
['testInsertions']
['testInsertions']
['log', 'Math.pow', 'ThreadLocalRandom.current', '.', 'outer.add', 'doOneTestInsertions', 'Math.max', 'inner.addAll', 'f.get', 'log', 'Futures.allAsList', '.', 'BTREE_TIMER.getSnapshot', 'log', 'snap.getMedian', 'snap.get95thPercentile', 'snap.get999thPercentile', 'TREE_TIMER.getSnapshot', 'log', 'snap.getMedian', 'snap.get95thPercentile', 'snap.get999thPercentile', 'log']
['ListenableFutureTask.create', 'BTree.empty', 'ThreadLocalRandom.current', 'buffer.clear', 'rnd.nextInt', 'rnd.nextInt', 'Math.max', 'Math.min', 'rnd.nextInt', 'buffer.put', 'TREE_TIMER.time', 'canon.putAll', 'ctxt.stop', 'BTREE_TIMER.time', 'BTree.update', 'naturalOrder', 'buffer.keySet', 'ctxt.stop', 'BTree.isWellFormed', 'naturalOrder', 'log', 'testEqual', 'BTree.iterator', 'canon.keySet', '.', 'r.addAll', 'testAllSlices', 'canon.keySet', 'f.run', 'MODIFY.execute']
['BTree.empty', 'ThreadLocalRandom.current', 'buffer.clear', 'rnd.nextInt', 'rnd.nextInt', 'Math.max', 'Math.min', 'rnd.nextInt', 'buffer.put', 'TREE_TIMER.time', 'canon.putAll', 'ctxt.stop', 'BTREE_TIMER.time', 'BTree.update', 'naturalOrder', 'buffer.keySet', 'ctxt.stop', 'BTree.isWellFormed', 'naturalOrder', 'log', 'testEqual', 'BTree.iterator', 'canon.keySet', '.', 'r.addAll', 'testAllSlices', 'canon.keySet']
['BTree.empty', 'String.format', 'canon.size', 'log', 'Futures.allAsList', '.', 'testAllSlices', 'BTree.update', 'naturalOrder', 'Arrays.asList', 'canon.add']
['testAllSlices', 'naturalOrder', 'testAllSlices', '.', 'naturalOrder', 'canon.descendingSet']
['testOneSlice', 'range', 'canon.size', 'testOneSlice', 'String.format', 'btree.headSet', 'canon.headSet', 'testOneSlice', 'String.format', 'btree.headSet', 'canon.headSet', 'testOneSlice', 'String.format', 'btree.tailSet', 'canon.tailSet', 'testOneSlice', 'String.format', 'btree.tailSet', 'canon.tailSet', 'range', 'canon.size', 'testOneSlice', 'String.format', 'btree.subSet', 'canon.subSet', 'testOneSlice', 'String.format', 'btree.subSet', 'canon.subSet', 'testOneSlice', 'String.format', 'btree.subSet', 'canon.subSet', 'testOneSlice', 'String.format', 'btree.subSet', 'canon.subSet']
['ListenableFutureTask.create', 'test', 'test.size', 'canon.size', 'testEqual', 'test.iterator', 'canon.iterator', 'testEqual', 'test.descendingIterator', 'canon.descendingIterator', 'testEqual', 'test.descendingSet', '.', 'canon.descendingSet', '.', 'testEqual', 'test.descendingSet', '.', 'canon.descendingSet', '.', 'results.add', 'f.run', 'COMPARE.execute']
['test', 'test.size', 'canon.size', 'testEqual', 'test.iterator', 'canon.iterator', 'testEqual', 'test.descendingIterator', 'canon.descendingIterator', 'testEqual', 'test.descendingSet', '.', 'canon.descendingSet', '.', 'testEqual', 'test.descendingSet', '.', 'canon.descendingSet', '.']
['log']
['btree.hasNext', 'canon.hasNext', 'btree.next', 'canon.next', 'Objects.equals', 'log', 'btree.hasNext', 'log', 'btree.next', 'canon.hasNext', 'log', 'canon.next']
[None]
[None]
[None]
[None]
[None]
[None]
['rnd.nextFloat']
[None]
[None]
['arg.startsWith', 'System.setProperty', 'arg.substring', 'arg.startsWith', 'Integer.parseInt', 'arg.substring', 'arg.startsWith', 'Integer.parseInt', 'arg.substring', 'arg.startsWith', 'Integer.parseInt', 'arg.substring', 'exit', '.', 'm.getParameters', 'm.getAnnotations', 'annotation.annotationType', 'methods.add', 'Collections.sort', 'a.getName', '.', 'b.getName', 'log', 'Lists.transform', '.', 'm.getName', 'log', 'm.getName', 'm.invoke', 'log']
['log', 'log', 'log', 'log', 'log']
['Arrays.copyOf', 'System.arraycopy', 'System.currentTimeMillis', 'System.out.printf']
['identityDistribution.next']
[None]
['compareLongs']
['o1.hasRemaining', 'o2.hasRemaining', 'o1.hasRemaining', 'o2.hasRemaining', 'o1.get', 'o1.position', 'o2.get', 'o2.position', 'ByteBufferUtil.compareUnsigned']
['source.isEmpty', 'Long.parseLong', 'String.format', 'decompose']
['fromString', 'String.format', 'parsed.getClass', '.', 'getSerializer', '.', 'parsedNumber.longValue', 'String.format', 'parsed.getClass', '.']
['getSerializer', '.', '.']
[None]
[None]
[None]
[None]
['sstableWriter.append', 'sstableWriter.currentWriter', '.', 'switchCompactionLocation', 'getWriteDirectory']
['SSTableWriter.create', 'Descriptor.fromFilename', 'cfs.getSSTablePath', 'getDirectories', '.', 'SerializationHeader.make', 'cfs.indexManager.listIndexes', 'sstableWriter.switchWriter']
[None]
[None]
['FBUtilities.threadLocalMD5Digest', '.']
['compute', 'toHash.getBytes', 'e.getMessage']
[None]
['FBUtilities.compareUnsigned']
['Hex.bytesToHex']
[None]
['checkBounds', 'unsafe.putByte']
['checkBounds', 'unsafe.setMemory']
['checkBounds', 'unsafe.putLong', 'putLongByByte']
['unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte']
['checkBounds', 'unsafe.putInt', 'putIntByByte']
['unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte']
['checkBounds', 'unsafe.putShort', 'putShortByByte']
['unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte', 'unsafe.putByte']
['buffer.remaining', 'checkBounds', 'buffer.remaining', 'buffer.hasArray', 'setBytes', 'buffer.array', 'buffer.arrayOffset', 'buffer.position', 'buffer.remaining', 'unsafe.copyMemory', 'buffer.position', 'buffer.remaining']
['checkBounds', 'unsafe.copyMemory']
['checkBounds', 'unsafe.getByte']
['checkBounds', 'unsafe.getLong', 'getLongByByte']
['unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte']
['checkBounds', 'unsafe.getInt', 'getIntByByte']
['unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte', 'unsafe.getByte']
['checkBounds', 'FastByteOperations.UnsafeOperations.copy']
[None]
['checkBounds', 'memory.checkBounds', 'unsafe.copyMemory']
['Memory.allocate', 'copy.put', 'Math.min', 'size']
['MemoryUtil.free']
['free']
[None]
[None]
['checkBounds', 'size', 'size', 'MemoryUtil.getByteBuffer', 'MemoryUtil.getByteBuffer']
['checkBounds', 'MemoryUtil.getByteBuffer']
['checkBounds', 'MemoryUtil.setByteBuffer']
['toString']
['String.format']
[None]
[None]
['String.format', 'String.format', 'String.format']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['frame.header.flags.contains', 'frame.header.flags.contains', 'frame.header.flags.contains', 'CBUtil.readUUID', 'CBUtil.readStringList', 'CBUtil.readBytesMap', 'frame.header.type.codec.decode', 'message.setStreamId', 'message.setSourceFrame', 'message.setCustomPayload', 'ctx.channel', '.', '.', 'req.attach', 'req.setTracingRequested', 'results.add', 'frame.release', 'ErrorMessage.wrap']
['ctx.channel', '.', '.', 'connection.getVersion', 'EnumSet.noneOf', 'codec.encodedSize', 'message.getCustomPayload', 'CBUtil.sizeOfUUID', 'CBUtil.sizeOfStringList', 'CBUtil.sizeOfBytesMap', 'CBUtil.allocator.buffer', 'CBUtil.writeUUID', 'flags.add', 'CBUtil.writeStringList', 'flags.add', 'CBUtil.writeBytesMap', 'flags.add', 'flags.add', 'message.getCustomPayload', 'CBUtil.sizeOfBytesMap', 'CBUtil.allocator.buffer', 'CBUtil.writeBytesMap', 'flags.add', 'codec.encode', 'body.release', 'results.add', 'Frame.create', 'message.getStreamId', 'ErrorMessage.wrap', 'message.getStreamId']
['running.get', 'running.compareAndSet', '.']
['queued.poll', 'channels.add', 'flush.ctx.write', 'flush.ctx.voidPromise', 'flushed.add', 'flushed.size', 'channel.flush', 'item.sourceFrame.release', 'channels.clear', 'flushed.clear', 'running.set', 'queued.isEmpty', 'running.compareAndSet', 'eventLoop.schedule']
['request.connection', 'request.connection', 'connection.getVersion', 'ClientWarn.captureWarnings', 'connection.validateNewMessage', 'connection.getVersion', 'request.getStreamId', 'logger.trace', 'connection.getVersion', 'request.execute', 'response.setStreamId', 'request.getStreamId', 'response.setWarnings', 'ClientWarn.getWarnings', 'response.attach', 'connection.applyStateTransition', 'JVMStabilityInspector.inspectThrowable', 'ctx.channel', 'flush', 'ErrorMessage.fromException', '.', 'request.getStreamId', 'request.getSourceFrame', 'ClientWarn.resetWarnings', 'logger.trace', 'connection.getVersion', 'flush', 'request.getSourceFrame']
['item.ctx.channel', '.', 'flusherLookup.get', 'flusherLookup.putIfAbsent', 'flusher.queued.add', 'flusher.start']
['ioExceptionsAtDebugLevel.contains', 'exception.getMessage', 'logger.trace', 'logger.info', 'logger.error']
[None]
['read']
['CompactEndpointSerializationHelper.deserialize', 'MessagingService.Verb.values', 'in.readInt', 'in.readInt', 'Collections.emptyMap', 'ImmutableMap.builder', 'in.readUTF', 'in.readInt', 'in.readFully', 'builder.put', 'builder.build', 'in.readInt', 'MessagingService.verbSerializers.get', 'MessagingService.instance', '.', 'in.skipBytesFully', 'create', 'serializer.deserialize', 'MessageIn.create']
[None]
['input.readInt', 'DatabaseDescriptor.hasCrossNodeTimeout', 'System.currentTimeMillis']
['MessagingService.verbStages.get']
['parameters.containsKey']
['parameters.containsKey']
['DatabaseDescriptor.getTimeout']
['sbuf.append', '.', '.', '.', 'getMessageType', '.', '.', 'sbuf.toString']
['ImmutableMap.builder', 'builder.putAll', '.', 'builder.build']
['MessagingService.verbStages.get']
['DatabaseDescriptor.getTimeout']
['sbuf.append', '.', 'getStage', '.', '.', 'sbuf.toString']
['CompactEndpointSerializationHelper.serialize', 'out.writeInt', 'verb.ordinal', 'out.writeInt', 'parameters.size', 'parameters.entrySet', 'out.writeUTF', 'entry.getKey', 'out.writeInt', 'entry.getValue', 'out.write', 'entry.getValue', 'payloadSize', 'out.writeInt', 'serializer.serialize']
['CompactEndpointSerializationHelper.serializedSize', 'TypeSizes.sizeof', 'verb.ordinal', 'TypeSizes.sizeof', 'parameters.size', 'parameters.entrySet', 'TypeSizes.sizeof', 'entry.getKey', 'TypeSizes.sizeof', 'entry.getValue', 'entry.getValue', 'payloadSize', 'TypeSizes.sizeof']
['serializer.serializedSize', 'serializer.serializedSize']
['.', 'cqlQueryHandlerField.setAccessible', '.', 'modifiersField.isAccessible', 'modifiersField.setAccessible', 'modifiersField.setInt', 'cqlQueryHandlerField.getModifiers']
['.', 'modifiersField.setAccessible', 'modifiersField.setInt', 'cqlQueryHandlerField.getModifiers', 'cqlQueryHandlerField.setAccessible', 'modifiersField.setAccessible']
['QueryProcessor.executeOnceInternal']
['cqlQueryHandlerField.get', 'cqlQueryHandlerField.set', 'requireNetwork', 'Assert.assertSame', 'ClientState.getCQLQueryHandler', '.', 'nativeAddr.getHostAddress', 'client.connect', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'queryMessage.setCustomPayload', 'client.execute', 'payloadEquals', 'payloadEquals', 'queryResponse.getCustomPayload', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'prepareMessage.setCustomPayload', 'client.execute', 'payloadEquals', 'payloadEquals', 'prepareResponse.getCustomPayload', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'executeMessage.setCustomPayload', 'client.execute', 'payloadEquals', 'payloadEquals', 'executeResponse.getCustomPayload', 'Collections.<', 'Collections.singletonList', 'Collections.<', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'batchMessage.setCustomPayload', 'client.execute', 'payloadEquals', 'payloadEquals', 'batchResponse.getCustomPayload', 'client.close', 'cqlQueryHandlerField.set']
['cqlQueryHandlerField.get', 'cqlQueryHandlerField.set', 'requireNetwork', 'Assert.assertSame', 'ClientState.getCQLQueryHandler', '.', 'nativeAddr.getHostAddress', 'client.connect', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'queryMessage.setCustomPayload', 'client.execute', 'Assert.fail', 'Assert.assertTrue', 'e.getCause', 'queryMessage.setCustomPayload', 'client.execute', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'prepareMessage.setCustomPayload', 'client.execute', 'Assert.fail', 'Assert.assertTrue', 'e.getCause', 'prepareMessage.setCustomPayload', 'client.execute', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'executeMessage.setCustomPayload', 'client.execute', 'Assert.fail', 'Assert.assertTrue', 'e.getCause', 'Collections.<', 'Collections.singletonList', 'Collections.<', 'Collections.singletonMap', 'bytes', 'Collections.singletonMap', 'bytes', 'batchMessage.setCustomPayload', 'client.execute', 'Assert.fail', 'Assert.assertTrue', 'e.getCause', 'client.close', 'cqlQueryHandlerField.set']
['Assert.assertNotNull', 'Assert.assertNotNull', 'Assert.assertEquals', 'map1.keySet', 'map2.keySet', 'map1.entrySet', 'Assert.assertEquals', 'e.getValue', 'map2.get', 'e.getKey']
['QueryProcessor.instance.getPrepared']
['QueryProcessor.instance.getPreparedForThrift']
[None]
[None]
[None]
['defaultPartitionSizeHistogram', 'defaultCellPerPartitionCountHistogram', 'defaultTombstoneDropTimeHistogram', 'Collections.<', 'Collections.<']
['MurmurHash.hash2_64', 'key.position', 'key.remaining', 'cardinality.offerHashed']
['estimatedPartitionSize.add']
['estimatedCellPerPartitionCount.add']
['estimatedTombstoneDropTime.merge']
[None]
['newInfo.isEmpty', 'updateTimestamp', 'newInfo.timestamp', 'newInfo.isExpiring', 'updateTTL', 'newInfo.ttl', 'updateLocalDeletionTime', 'newInfo.localExpirationTime']
['updateTimestamp', 'cell.timestamp', 'updateTTL', 'cell.ttl', 'updateLocalDeletionTime', 'cell.localDeletionTime']
['dt.isLive', 'updateTimestamp', 'dt.markedForDeleteAt', 'updateLocalDeletionTime', 'dt.localDeletionTime']
[None]
['timestampTracker.update']
['localDeletionTimeTracker.update', 'estimatedTombstoneDropTime.update']
['ttlTracker.update']
[None]
[None]
['clustering.size', 'comparator.subtype', 'clustering.get', 'min', 'max']
['comparator.compare']
['comparator.compare']
[None]
['Maps.newHashMap', 'components.put', 'components.put', 'timestampTracker.min', 'timestampTracker.max', 'localDeletionTimeTracker.min', 'localDeletionTimeTracker.max', 'ttlTracker.min', 'ttlTracker.max', 'makeList', 'makeList', 'components.put', 'components.put', 'header.toComponent']
['l.add']
[None]
[None]
[None]
[None]
[None]
[None]
['Lists.newArrayList', 'components.values', 'Collections.sort', 'out.writeInt', 'components.size', 'sortedComponents.size', 'component.getType', 'out.writeInt', 'type.ordinal', 'out.writeInt', 'type.serializer.serializedSize', 'component.getType', '.']
['logger.trace', 'descriptor.filenameFor', 'statsFile.exists', 'logger.trace', 'Maps.newHashMap', 'components.put', 'MetadataCollector.defaultStatsMetadata', 'RandomAccessReader.open', 'deserialize']
['deserialize', '.', 'EnumSet.of']
['Maps.newHashMap', 'in.readInt', 'MetadataType.values', 'toc.put', 'in.readInt', 'in.readInt', 'toc.get', 'in.seek', 'type.serializer.deserialize', 'components.put']
['logger.trace', 'descriptor.filenameFor', 'deserialize', 'EnumSet.allOf', 'currentComponents.remove', 'currentComponents.put', 'stats.mutateLevel', 'rewriteSSTableMetadata']
['logger.trace', 'descriptor.filenameFor', 'deserialize', 'EnumSet.allOf', 'currentComponents.remove', 'currentComponents.put', 'stats.mutateRepairedAt', 'rewriteSSTableMetadata']
['descriptor.tmpFilenameFor', 'serialize', 'out.flush', 'FBUtilities.isWindows', 'FileUtils.delete', 'descriptor.filenameFor', 'FileUtils.renameWithConfirm', 'descriptor.filenameFor']
[None]
['.', '.', 'methodPosition1.compareTo']
['.', '.']
['getIndexOfMethodPosition', 'frameworkMethod.getMethod']
['method.getAnnotation', 'method.getDeclaringClass', 'getIndexOfMethodPosition', 'method.getName']
['getIndexOfMethodPosition']
['aClass.getResourceAsStream', 'aClass.getSimpleName', 'lineNumberReader.readLine', 'line.contains', 'lineNumberReader.getLineNumber', 'line.indexOf', 'lineNumberReader.close']
['.', '.', '.']
['logger.trace', 'SchemaKeyspace.convertSchemaToMutations', 'MessagingService.instance', '.']
[None]
['sstable']
['sstable']
['sstable']
['cfs.getDirectories', '.', 'cfs.keyspace.getName', 'cfs.getColumnFamilyName', 'ImmutableSet.of', 'descriptor.filenameFor', 'file.createNewFile', 'descriptor.filenameFor', 'raf.setLength', 'SerializationHeader.make', 'Collections.emptyList', '.', 'cfs.metadata.partitioner.getClass', '.', '.', 'SSTableReader.internalOpen', 'segmentedFile.sharedCopy', 'segmentedFile.sharedCopy', 'indexSummary.sharedCopy', 'readerBounds', 'reader.selfRef', '.']
['newCFS', 'ks.getName']
['id.incrementAndGet', 'newCFMetaData']
['CFMetaData.Builder.create', '.', '.', '.', '.', '.', 'metadata.caching']
[None]
['File.createTempFile', 'file.deleteOnExit']
['DatabaseDescriptor.getAllDataFileLocations', 'dir.exists', 'dir.list', 'FileUtils.deleteRecursive']
['Iterables.concat', 'attrs.getFunctions', 'restrictions.getFunctions', 'operations.getFunctions', 'conditions.getFunctions']
[None]
[None]
[None]
[None]
[None]
['cfm.isCounter']
['cfm.isView']
['attrs.getTimestamp']
['attrs.isTimestampSet']
['attrs.getTimeToLive']
['state.hasColumnFamilyAccess', 'hasConditions', 'state.hasColumnFamilyAccess', 'View.findAll', '.', 'keyspace', 'columnFamily', 'views.hasNext', 'state.hasColumnFamilyAccess', 'views.hasNext', 'state.hasColumnFamilyAccess', 'views.next', 'getFunctions', 'state.ensureHasPermission']
['checkFalse', 'hasConditions', 'attrs.isTimestampSet', 'checkFalse', 'isCounter', 'attrs.isTimestampSet', 'checkFalse', 'isCounter', 'attrs.isTimeToLiveSet', 'checkFalse', 'isView']
[None]
[None]
['cfm.clusteringColumns', '.', 'restrictions.hasClusteringColumnsRestriction']
['operations.appliesToStaticColumns']
['operations.regularOperations']
['operations.staticOperations']
[None]
['conditions.getColumns']
['conditions.isIfNotExists']
['conditions.isIfExists']
['appliesOnlyToStaticColumns']
['operation.appliesToRegularColumns', 'conditions.appliesToRegularColumns', 'operation.appliesToStaticColumns', 'conditions.appliesToStaticColumns']
['allOperations', 'op.requiresRead']
['requiresRead', 'cl.validateForRead', 'keyspace', 'String.format', 'partitionKeys.size', 'FBUtilities.nowInSeconds', 'commands.add', 'SinglePartitionReadCommand.create', 'ColumnFilter.selection', 'cfm.decorateKey', 'group.executionController', 'group.executeInternal', 'asMaterializedMap', 'group.execute', 'asMaterializedMap']
['iterator.hasNext', 'iterator.next', 'map.put', 'partition.partitionKey', 'FilteredPartition.create']
['conditions.isEmpty']
['buildPartitionKeyNames', 'checkFalse', 'keys.size', 'type.isUpdate', 'cfm.decorateKey', 'keys.get', 'options.getTimestamp', 'createClustering', 'checkFalse', 'clusterings.size', 'type.isUpdate', 'Iterables.getOnlyElement', 'conditionColumns', 'updatesRegularRows', 'updatesStaticRow', 'addConditions', 'request.addRowUpdate']
['conditions.addConditionsTo']
['buildCasResultSet', 'keyspace', 'columnFamily', 'getColumnsWithConditions']
['left.size', 'right.size', 'left.size', 'left.metadata.names.size', 'right.metadata.names.size', 'specs.addAll', 'specs.addAll', 'right.size', 'right.size', 'row.addAll', 'left.rows.get', 'row.addAll', 'right.rows.get', 'rows.add']
['hasConditions', 'executeInternalWithCondition', 'executeInternalWithoutCondition']
['getMutations', 'queryState.getTimestamp', 'mutation.apply']
['makeCasRequest', 'casInternal', 'buildCasResultSet']
['UUIDGen.getTimeUUIDFromMicros', 'state.getTimestamp', 'request.readCommand', 'FBUtilities.nowInSeconds', 'readCommand.executionController', 'readCommand.executeInternal', 'FilteredPartition.create', 'PartitionIterators.getOnlyElement', 'request.appliesTo', 'current.rowIterator', 'request.makeUpdates', 'TriggerExecutor.instance.execute', 'Commit.newProposal', 'proposal.makeMutation', '.']
['Collections.singletonMap', 'addUpdates', 'collector.validateIndexedColumns', 'collector.toMutations']
['buildPartitionKeyNames', 'type.allowClusteringColumnSlices', 'restrictions.hasClusteringColumnsRestriction', 'restrictions.isColumnRange', 'createSlice', 'slices.isEmpty', 'makeUpdateParameters', 'ThriftValidation.validateKey', 'cfm.decorateKey', 'collector.getPartitionUpdate', 'options.getConsistency', 'addUpdateForKey', 'createClustering', 'makeUpdateParameters', 'ThriftValidation.validateKey', 'cfm.decorateKey', 'collector.getPartitionUpdate', 'options.getConsistency', 'clusterings.isEmpty', 'addUpdateForKey', 'addUpdateForKey']
['restrictions.getClusteringColumnsBounds', 'restrictions.getClusteringColumnsBounds', 'toSlices']
['clusterings.contains', 'makeUpdateParameters', 'DataLimits.cqlLimits', 'makeUpdateParameters']
['readRequiredLists', 'options.getConsistency', 'updatedColumns', 'getTimestamp', 'getTimeToLive']
['startBounds.size', 'endBounds.size', 'startBounds.iterator', 'endBounds.iterator', 'starts.hasNext', 'Slice.make', 'starts.next', 'ends.next', 'slice.isEmpty', 'builder.add', 'builder.build']
['getBoundVariables', 'prepare', 'ThriftValidation.validateColumnFamily', 'keyspace', 'columnFamily', 'boundNames.getPartitionKeyBindIndexes']
['ThriftValidation.validateColumnFamily', 'keyspace', 'columnFamily', 'attrs.prepare', 'keyspace', 'columnFamily', 'preparedAttributes.collectMarkerSpecification', 'prepareConditions', 'prepareInternal']
['conditions.isEmpty', 'conditions.isEmpty', 'conditions.isEmpty', 'prepareColumnConditions']
['checkNull', 'ColumnConditions.newBuilder', 'entry.left.prepare', 'metadata.getColumnDefinition', 'checkNotNull', 'metadata.getColumnDefinition', 'entry.right.prepare', 'keyspace', 'condition.collectMarkerSpecification', 'checkFalse', 'def.isPrimaryKeyColumn', 'builder.add', 'builder.build']
['where.containsCustomExpressions', 'appliesOnlyToStaticColumns']
['where.containsCustomExpressions', 'appliesOnlyToStaticColumns']
['rawId.prepare', 'checkNotNull', 'cfm.getColumnDefinition']
['StorageService.instance.setPartitionerUnsafe', 'SchemaLoader.loadSchema', 'SchemaLoader.schemaDefinition']
['StorageService.instance.setPartitionerUnsafe']
['PendingRangeCalculatorService.instance.blockUntilFinished', 'StorageService.instance.getTokenMetadata', '.']
['ss.getTokenMetadata', 'Util.createInitialRing', 'TokenMetadata.ringIterator', 'tmd.sortedTokens', 'tokenIter.hasNext', 'endpoints.add', 'tmd.getEndpoint', 'tokenIter.next', 'expectedEndpoints.put', 'positionToken', 'ss.onChange', 'hosts.get', 'valueFactory.moving', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'assertTrue', 'tmd.isMoving', 'hosts.get', 'Schema.instance.getNonSystemKeyspaces', 'getStrategy', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'strategy.calculateNaturalEndpoints', 'tmd.cloneOnlyTokenMap', 'expected.add', 'expectedEndpoints.get', '.', 'expected.size', 'actual.size', 'assertEquals', 'expected.add', 'hosts.get', 'assertEquals', 'assertEquals', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton']
['ss.getTokenMetadata', 'Util.createInitialRing', 'positionToken', 'ss.onChange', 'hosts.get', 'valueFactory.moving', 'newTokens.put', 'tmd.cloneAfterAllSettled', 'ss.setTokenMetadataUnsafe', 'InetAddress.getByName', 'Gossiper.instance.initializeNodeUnsafe', 'UUID.randomUUID', 'Gossiper.instance.injectApplicationState', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'InetAddress.getByName', 'Gossiper.instance.initializeNodeUnsafe', 'UUID.randomUUID', 'Gossiper.instance.injectApplicationState', 'valueFactory.tokens', 'Collections.singleton', 'keyTokens.get', 'ss.onChange', 'valueFactory.bootstrapping', 'Collections.<', 'keyTokens.get', 'PendingRangeCalculatorService.instance.blockUntilFinished', 'keyspaceStrategyMap.put', 'getStrategy', 'keyspaceStrategyMap.get', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges1.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges2.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges3.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges4.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges5.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges6.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges7.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges8.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges9.iterator', '.', 'keyspace1ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertEquals', 'generateRange', 'ranges10.iterator', '.', 'keyspaceStrategyMap.get', '.', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges1.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges2.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges3.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges4.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges5.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges6.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges7.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges8.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges9.equals', 'generateRanges', 'keyspace3ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges10.equals', 'generateRanges', 'keyspaceStrategyMap.get', '.', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges1.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges2.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges3.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges4.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges5.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges6.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges7.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges8.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges9.equals', 'generateRanges', 'keyspace4ranges.get', 'InetAddress.getByName', 'assertEquals', 'collectionSize', 'assertTrue', 'ranges10.equals', 'generateRanges', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.put', 'HashMultimap.<', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'expectedEndpoints.get', '.', 'makeAddrs', 'keyspaceStrategyMap.entrySet', 'keyspaceStrategy.getKey', 'keyspaceStrategy.getValue', 'tmd.getWriteEndpoints', 'strategy.getNaturalEndpoints', 'assertEquals', 'expectedEndpoints.get', '.', '.', 'endpoints.size', 'assertTrue', 'expectedEndpoints.get', '.', '.', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'tmd.getWriteEndpoints', 'keyTokens.get', 'strategy.getNaturalEndpoints', 'keyTokens.get', 'assertEquals', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'assertTrue', 'endpoints.contains', 'hosts.get', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'newTokens.get']
['ss.getTokenMetadata', 'Util.createInitialRing', 'positionToken', 'ss.onChange', 'hosts.get', 'valueFactory.moving', 'assertTrue', 'tmd.isMoving', 'hosts.get', 'assertEquals', 'endpointTokens.get', 'tmd.getToken', 'hosts.get', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'assertTrue', 'tmd.getMovingEndpoints', '.', 'assertEquals', 'tmd.getToken', 'hosts.get', 'positionToken', 'ss.onChange', 'hosts.get', 'valueFactory.moving', 'Gossiper.instance.injectApplicationState', 'hosts.get', 'valueFactory.tokens', 'Collections.singleton', 'ss.onChange', 'hosts.get', 'valueFactory.normal', 'Collections.singleton', 'assertTrue', 'tmd.getBootstrapTokens', '.', 'assertTrue', 'tmd.getMovingEndpoints', '.', 'assertEquals', 'tmd.getToken', 'hosts.get']
['addrs.add', 'InetAddress.getByName']
['Schema.instance.getKSMetaData', 'AbstractReplicationStrategy.createReplicationStrategy']
['String.valueOf']
['collection.isEmpty', 'collection.iterator', 'iterator.hasNext', 'iterator.next']
['ranges.add', 'generateRange']
['String.valueOf', 'String.valueOf']
[None]
['columnDefs.get']
['columnDefs.get', 'columnDefs.size']
[None]
['otherRestriction.isMultiColumn', 'doMergeWith', 'doMergeWith']
[None]
['getColumnDefs', 'commons.retainAll', 'otherRestriction.getColumnDefs', 'builder.length', 'builder.append', 'builder.append', 'builder.toString']
['indexManager.listIndexes', 'isSupportedBy']
[None]
['value.getFunctions']
['String.format']
['invalidRequest', 'getColumnsInCommons']
['index.supportsExpression']
['value.bind', 't.getElements', 'values.size', 'builder.addElementToAll', 'values.get', 'checkFalse', 'builder.containsNull', 'columnDefs.get']
['value.bind', 't.getElements', 'columnDefs.size', 'columnDefs.get', 'filter.add', 'values.get']
['splitValues', 'builder.addAllElementsToAll', 'builder.containsNull', 'invalidRequest', 'ColumnDefinition.toIdentifiers']
[None]
['invalidRequest', 'getColumnsInCommons']
['index.supportsExpression']
['splitValues', 'checkTrue', 'splitInValues.size', 'splitInValues.get', 'columnDefs.size', 'columnDefs.get', 'filter.add', 'values.get']
[None]
['Terms.getFunctions']
['String.format']
['values.size', 'value.bind', 'buffers.add', 'term.getElements']
['Collections.emptySet']
[None]
['inMarker.bind', 'checkNotNull', 'inValue.getSplitValues']
[None]
[None]
['componentBounds', 'vals.size', 'checkNotNull', 'vals.get', 'columnDefs.get', 'builder.addElementToAll']
['slice.isSupportedBy']
['slice.hasBound']
['slice.getFunctions']
['slice.isInclusive']
['checkTrue', 'otherRestriction.isSlice', 'getColumnsInCommons', 'getFirstColumn', '.', 'otherRestriction.getFirstColumn', 'getFirstColumn', '.', 'otherRestriction.getFirstColumn', '.', 'getFirstColumn', 'otherRestriction.getFirstColumn', 'invalidRequest', 'checkFalse', 'hasBound', 'otherRestriction.hasBound', 'getColumnsInCommons', 'checkFalse', 'hasBound', 'otherRestriction.hasBound', 'getColumnsInCommons', 'columnDefs.size', 'otherSlice.columnDefs.size', 'slice.merge']
['invalidRequest']
[None]
['slice.bound', '.', 'Collections.singletonList', 'terminal.get', 'options.getProtocolVersion']
['Collections.emptyList']
[None]
[None]
['invalidRequest', 'getColumnsInCommons']
['index.supportsExpression']
[None]
[None]
['schemaChange', 'schemaChange', 'schemaChange', 'schemaChange', 'execute', 'execute', 'Keyspace.open', '.', 'Keyspace.open', '.', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
[None]
[None]
[None]
[None]
['setKey', 'org.apache.thrift.TBaseHelper.rightSize', 'key.array']
[None]
['setKey', 'ByteBuffer.wrap']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
['setReversedIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
[None]
['setCountIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
[None]
[None]
[None]
['unsetKey', 'setKey', 'unsetColumn_parent', 'setColumn_parent', 'unsetColumn_slices', 'setColumn_slices', 'unsetReversed', 'setReversed', 'unsetCount', 'setCount', 'unsetConsistency_level', 'setConsistency_level']
['getKey', 'getColumn_parent', 'getColumn_slices', 'Boolean.valueOf', 'isReversed', 'Integer.valueOf', 'getCount', 'getConsistency_level']
['isSetKey', 'isSetColumn_parent', 'isSetColumn_slices', 'isSetReversed', 'isSetCount', 'isSetConsistency_level']
['.']
['.', 'that.isSetKey', '.', '.', 'that.isSetColumn_parent', '.', '.', 'that.isSetColumn_slices', '.', '.', 'that.isSetReversed', '.', 'that.isSetCount', '.', 'that.isSetConsistency_level', '.']
['isSetKey', 'builder.append', 'builder.append', 'isSetColumn_parent', 'builder.append', 'builder.append', 'isSetColumn_slices', 'builder.append', 'builder.append', 'isSetReversed', 'builder.append', 'builder.append', 'isSetCount', 'builder.append', 'builder.append', 'isSetConsistency_level', 'builder.append', 'builder.append', 'consistency_level.getValue', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetKey', 'isSetKey', 'isSetKey', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_parent', 'isSetColumn_parent', 'isSetColumn_parent', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetColumn_slices', 'isSetColumn_slices', 'isSetColumn_slices', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetReversed', 'isSetReversed', 'isSetReversed', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetCount', 'isSetCount', 'isSetCount', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetConsistency_level', 'isSetConsistency_level', 'isSetConsistency_level', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['isSetKey', 'sb.append', 'sb.append', 'org.apache.thrift.TBaseHelper.toString', 'isSetColumn_parent', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetColumn_slices', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetReversed', 'sb.append', 'sb.append', 'sb.append', 'isSetCount', 'sb.append', 'sb.append', 'sb.append', 'isSetConsistency_level', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['column_parent.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetKey', 'oprot.writeFieldBegin', 'oprot.writeBinary', 'oprot.writeFieldEnd', 'struct.isSetColumn_parent', 'oprot.writeFieldBegin', 'struct.column_parent.write', 'oprot.writeFieldEnd', 'struct.isSetColumn_slices', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.column_slices.size', '_iter219.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'struct.isSetReversed', 'oprot.writeFieldBegin', 'oprot.writeBool', 'oprot.writeFieldEnd', 'struct.isSetCount', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'struct.isSetConsistency_level', 'oprot.writeFieldBegin', 'oprot.writeI32', 'struct.consistency_level.getValue', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetKey', 'optionals.set', 'struct.isSetColumn_parent', 'optionals.set', 'struct.isSetColumn_slices', 'optionals.set', 'struct.isSetReversed', 'optionals.set', 'struct.isSetCount', 'optionals.set', 'struct.isSetConsistency_level', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetKey', 'oprot.writeBinary', 'struct.isSetColumn_parent', 'struct.column_parent.write', 'struct.isSetColumn_slices', 'oprot.writeI32', 'struct.column_slices.size', '_iter220.write', 'struct.isSetReversed', 'oprot.writeBool', 'struct.isSetCount', 'oprot.writeI32', 'struct.isSetConsistency_level', 'oprot.writeI32', 'struct.consistency_level.getValue']
['iprot.readBitSet', 'incoming.get', 'iprot.readBinary', 'struct.setKeyIsSet', 'incoming.get', 'struct.column_parent.read', 'struct.setColumn_parentIsSet', 'incoming.get', 'iprot.readI32', '_elem223.read', 'struct.column_slices.add', 'struct.setColumn_slicesIsSet', 'incoming.get', 'iprot.readBool', 'struct.setReversedIsSet', 'incoming.get', 'iprot.readI32', 'struct.setCountIsSet', 'incoming.get', 'ConsistencyLevel.findByValue', 'iprot.readI32', 'struct.setConsistency_levelIsSet']
['data.get', 'data.get', 'data.get', 'data.get', 'data.get', 'data.get', 'data.get']
['key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get']
['key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get']
[None]
[None]
['getblock', 'getblock', 'rotl64', 'rotl64', 'rotl64', 'rotl64', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'rotl64', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'key.get', 'rotl64', 'fmix', 'fmix']
[None]
['ranges.copy']
['ranges.copy']
['partitionDeletion.isLive', 'ranges.isEmpty']
['newInfo.supersedes']
['ranges.add']
['add', 'newInfo.getPartitionDeletion', 'newRanges.copy', 'ranges.addAll']
[None]
['Iterators.<', 'ranges.iterator']
['Iterators.<', 'ranges.iterator']
['ranges.search']
['TypeSizes.sizeof', 'partitionDeletion.markedForDeleteAt', 'ranges.dataSize']
['ranges.isEmpty']
['hasRanges', 'ranges.size']
['partitionDeletion.markedForDeleteAt', 'Math.max', 'partitionDeletion.markedForDeleteAt', 'ranges.maxMarkedAt']
['partitionDeletion.compareTo', 'delInfo.getPartitionDeletion', 'hasRanges']
['ranges.isEmpty', 'String.format', 'String.format', 'rangesAsString']
['ranges.isEmpty', 'ranges.comparator', 'rangeIterator', 'iter.hasNext', 'iter.next', 'sb.append', 'i.deletedSlice', '.', 'sb.append', 'sb.append', 'i.deletionTime', 'sb.toString']
['partitionDeletion.markedForDeleteAt', 'partitionDeletion.localDeletionTime', 'ranges.updateAllTimestamp']
['partitionDeletion.equals', 'Objects.equal']
['Objects.hashCode']
['partitionDeletion.unsharedHeapSize', 'ranges.unsharedHeapSize']
['collector.update', 'ranges.collectStats']
[None]
['marker.isClose', 'openMarker.openDeletionTime', 'marker.closeDeletionTime', '.', 'openMarker.openBound', 'marker.closeBound', 'Slice.make', 'Slice.make', 'deletion.add', 'marker.isOpen']
[None]
[None]
['cfIds.isEmpty', 'copy', 'copy.modifications.keySet', '.']
['without', 'Collections.singleton']
[None]
['modifications.keySet']
[None]
['modifications.values']
['modifications.get']
['update.partitionKey', '.', 'key.getPartitioner', 'modifications.put', 'update.metadata', 'update.metadata']
['modifications.get']
['modifications.isEmpty']
['mutations.isEmpty', 'mutations.size', 'mutations.get', 'updatedTables.addAll', 'mutation.modifications.keySet', 'ks.equals', 'key.equals', 'mutations.size', 'updatedTables.size', 'mutation.modifications.get', 'updates.add', 'updates.isEmpty', 'modifications.put', 'updates.size', 'updates.get', 'PartitionUpdate.merge', 'updates.clear']
['Keyspace.open', 'ks.apply', 'ks.getMetadata']
['Keyspace.open', '.']
['Keyspace.open', '.']
['createMessage']
[None]
['DatabaseDescriptor.getWriteRpcTimeout']
['getPartitionUpdates', 'Math.min', 'update.metadata']
['toString']
['buff.append', '.', '.', 'buff.append', '.', 'ByteBufferUtil.bytesToHex', 'key.getKey', '.', 'buff.append', 'modifications.size', 'modifications.keySet', 'Schema.instance.getCFMetaData', 'cfnames.add', 'buff.append', 'StringUtils.join', 'buff.append', '.', 'StringUtils.join', 'modifications.values', '.', 'buff.append', '.']
['out.writeUTF', 'mutation.getKeyspaceName', 'mutation.modifications.size', 'ByteBufferUtil.writeWithShortLength', 'mutation.key', '.', 'out.writeInt', 'out.writeUnsignedVInt', 'mutation.modifications.entrySet', 'PartitionUpdate.serializer.serialize', 'entry.getValue']
['deserialize']
['TypeSizes.sizeof', 'mutation.getKeyspaceName', 'mutation.key', '.', '.', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'mutation.modifications.size', 'TypeSizes.sizeofUnsignedVInt', 'mutation.modifications.size', 'mutation.modifications.entrySet', 'PartitionUpdate.serializer.serializedSize', 'entry.getValue']
['message.parameters.get', 'message.parameters.get', 'forwardToLocalNodes', 'InetAddress.getByAddress', 'LegacyBatchlogMigrator.isLegacyBatchlogMutation', 'LegacyBatchlogMigrator.handleLegacyMutation', 'message.payload.apply', 'Tracing.trace', 'MessagingService.instance', '.', 'WriteResponse.createMessage', 'Tracing.trace']
['in.readInt', '.', 'from.getAddress', 'CompactEndpointSerializationHelper.deserialize', 'in.readInt', 'Tracing.trace', 'MessagingService.instance', '.']
['TimeUnit.NANOSECONDS.toMillis']
['ScheduledExecutors.scheduledFastTasks.submit']
['Math.max', 'System.currentTimeMillis', 'Math.max', 'System.nanoTime']
['System.nanoTime', 'System.currentTimeMillis', 'Math.max', 'System.currentTimeMillis', 'NanoTimeToCurrentTimeMillis.updateNow', 'Thread.sleep', 'Math.max', 'System.nanoTime', 'NanoTimeToCurrentTimeMillis.convert', 'FBUtilities.isWindows', 'assertTrue', 'FBUtilities.isWindows', 'assertTrue']
[None]
['key.getToken', 'key.getKey']
[None]
['offHeap', '.', 'allocateOversize', 'currentRegion.get', 'region.allocate', 'trySwapRegion']
['Integer.highestOneBit', 'Math.min', 'RACE_ALLOCATED.get', 'raceAllocated.poll', 'MemoryUtil.allocate', 'currentRegion.compareAndSet', 'regions.add', 'raceAllocated.stash', 'MemoryUtil.free']
['MemoryUtil.allocate', 'regions.add', 'region.allocate']
['MemoryUtil.free']
['permits.tryAcquire', 'stash.add']
['stash.poll', 'permits.release']
['nextFreeOffset.get', 'nextFreeOffset.compareAndSet', 'allocCount.incrementAndGet']
['System.identityHashCode', 'allocCount.get', 'nextFreeOffset.get']
['MemoryUtil.getByteBuffer', 'MemoryUtil.getInt']
[None]
[None]
[None]
[None]
['current.clearSelf', 'current.clearSelf']
['reset', 'Arrays.fill', 'Arrays.fill']
['Math.max']
['getKeyEnd', 'copyKeys', 'isLeaf', 'copyChildren', 'isRoot', 'ascend']
['getKeyEnd', 'comparator.compare', 'Arrays.binarySearch', 'updateFunction.apply', 'compareUpperBound', 'isLeaf', 'copyKeys', 'replaceNextKey', 'addNewKey', 'copyKeys', 'copyKeys', 'replaceNextKey', 'copyChildren', 'copyKeys', 'copyChildren', 'ensureChild', '.', 'copyKeys', 'ascend']
['comparator.compare']
[None]
['current.isRoot', 'current.ascend']
['buildFromRange', 'isLeaf']
['ensureParent', 'isLeaf', 'parent.addExtraChild', 'buildFromRange', 'parent.finishChild', 'buildFromRange', 'parent.finishChild', 'buildFromRange']
['ensureRoom', 'System.arraycopy']
['ensureRoom']
['ensureRoom', 'updateFunction.apply']
['System.arraycopy', 'getKeyEnd']
['ensureRoom']
[None]
['buildFromRange', 'isLeaf', 'ensureParent', '.', 'System.arraycopy', 'System.arraycopy']
['System.arraycopy', 'System.arraycopy', 'System.arraycopy', 'BTree.size', 'BTree.size', 'updateFunction.allocated', 'ObjectSizes.sizeOfArray', 'updateFunction.allocated', 'ObjectSizes.sizeOfArray', 'ObjectSizes.sizeOfArray']
['parent.reset']
[None]
[None]
[None]
['getBranchKeyEnd']
['getLeafKeyEnd']
[None]
['getChildCount']
['getKeyEnd', 'Arrays.binarySearch', 'isLeaf']
['isLeaf', 'getLeafKeyEnd', 'getChildCount', 'descend']
['getChildStart', 'treeIndexOffsetOfChild', 'child.resetNode']
[None]
['treeIndexOfKey']
['treeIndexOfLeafKey']
['treeIndexOfBranchKey']
[None]
['getClass', 'o.getClass', 'endpoint1.equals', 'endpoint2.equals']
['Objects.hashCode']
['CompactEndpointSerializationHelper.serialize', 'CompactEndpointSerializationHelper.serialize']
['CompactEndpointSerializationHelper.deserialize', 'CompactEndpointSerializationHelper.deserialize']
['CompactEndpointSerializationHelper.serializedSize']
['newArrayList', 'Cli.builder', 'builder.withDescription', '.', '.', 'builder.withGroup', '.', '.', '.', 'builder.build', 'parser.parse', 'printHistory', 'parse.run', 'badUse', 'err', 'Throwables.getRootCause', 'System.exit']
['Joiner.on', '.', '.', 'cmdLine.replaceFirst', 'FBUtilities.getToolsOutputDirectory', 'writer.append', '.', '.', '.', 'System.lineSeparator', 'sdf.format']
['System.out.println', 'e.getMessage', 'System.out.println']
['System.err.println', 'e.getMessage', 'System.err.println', 'System.err.println', 'getStackTraceAsString']
['isNotEmpty', 'isNotEmpty', 'readUserPasswordFromFile', 'isEmpty', 'promptAndReadPassword', 'connect', 'execute', 'probe.isFailed']
['.', 'scanner.hasNextLine', 'scanner.hasNext', 'scanner.next', 'jmxRole.equals', 'scanner.hasNext', 'scanner.next', 'scanner.nextLine']
['System.console', 'String.valueOf', 'console.readPassword']
[None]
['username.isEmpty', 'parseInt', 'parseInt', 'Throwables.getRootCause', 'System.err.println', 'format', 'rootCause.getClass', '.', 'rootCause.getMessage', 'System.exit']
['parseOptionalKeyspace']
['cmdArgs.isEmpty', 'keyspaces.addAll', 'nodeProbe.getKeyspaces', 'nodeProbe.getNonSystemKeyspaces', 'keyspaces.add', 'cmdArgs.get', 'nodeProbe.getKeyspaces', '.', 'Collections.unmodifiableList']
['cmdArgs.size', 'toArray', 'cmdArgs.subList', 'cmdArgs.size']
['Maps.newTreeMap', 'probe.getEndpointSnitchInfoProxy', 'tokenToEndpoint.entrySet', 'epSnitchInfo.getDatacenter', 'tokenAndEndPoint.getValue', 'ownershipByDc.containsKey', 'ownershipByDc.put', 'ownershipByDc.get', '.', 'tokenAndEndPoint.getKey', 'tokenAndEndPoint.getValue']
['System.nanoTime']
['get', 'compareAndSet']
['shouldLog', 'wrapped.info', 'wrapped.warn', 'wrapped.error']
['.']
['.', 'CLOCK.nanoTime']
['.']
['.', 'CLOCK.nanoTime']
['.']
['.', 'CLOCK.nanoTime']
['wrappedLoggers.clear']
['wrappedLoggers.get', 'wrappedLoggers.putIfAbsent']
['log', 'CLOCK.nanoTime']
['getLogger', 'wrapped.getStatement', 'statement.log']
['getLogger', 'wrapped.getStatement']
['.']
['.', 'CLOCK.nanoTime']
['.']
['.', 'CLOCK.nanoTime']
['.']
['.', 'CLOCK.nanoTime']
['.', '.']
['.']
['.', 'unit.toNanos']
['lastMessage.get', 'lastMessage.putIfAbsent']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
[None]
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', '.', 'CompactionParams.lcs', 'Collections.singletonMap', 'SchemaLoader.standardCFMD']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'String.valueOf', '.', '.', '.', '.', 'inserted.add', 'store.forceBlockingFlush', 'assertEquals', 'inserted.size', 'Util.getAll', '.', 'Util.cmd', '.', 'CompactionManager.instance.performMaximal', 'assertEquals', 'store.getLiveSSTables', '.']
['testCompaction']
['testCompaction']
[None]
[None]
[None]
[None]
[None]
[None]
['capacity']
['cardinality']
[None]
['getPageCount', 'BitUtil.pop_array']
['Math.min']
['intersect']
[None]
[None]
[None]
[None]
['getNumWords', 'getPageSize', 'getPageCount', 'out.writeInt', 'getPage', 'out.writeLong']
['clear', 'capacity']
['in.readInt', 'bs.getPageSize', 'bs.getPageCount', 'bs.getPage', 'in.readLong']
['t.getFunctions', 'Collections.<']
[None]
['t.collectMarkerSpecification']
[None]
['value.prepare', 'String.format', 'receiver.type.isCollection']
['String.format']
[None]
['String.format', 'toString', 'receiver.type.isMultiCell', 'String.format', 'toString', 'selector.prepare', 'Lists.indexSpecOf', 'value.prepare', 'Lists.valueSpecOf', 'String.format', 'toString', 'selector.prepare', 'Maps.keySpecOf', 'value.prepare', 'Maps.valueSpecOf']
['String.format']
[None]
['value.prepare', 'String.format', 'toString', 'receiver.type.isMultiCell', 'String.format', 'toString']
['String.format']
[None]
['String.format', 'toString', 'value.prepare', 'receiver.type.isMultiCell', 'String.format', 'toString', 'value.prepare', 'value.prepare', 'SetType.getInstance', 'value.prepare']
['String.format']
[None]
['value.prepare', 'String.format', 'toString', 'receiver.type.isMultiCell', 'String.format', 'toString']
['String.format']
[None]
[None]
[None]
[None]
['receiver.type.isCollection', 'String.format', 'receiver.type.isMultiCell', 'String.format', 'element.prepare', 'Lists.indexSpecOf', 'element.prepare', 'Sets.valueSpecOf', 'element.prepare', 'Maps.keySpecOf']
['.', '.', 'options.add']
[None]
[None]
['pattern.matcher', 'm.matches', 'ARGS.matcher', 'm.group', 'm.find', 'm.start', 'm.end', 'delegate.accept', 'm.group', 'm.group']
['sb.append', 'sb.append', 'delegate.options', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['happy', 'happy']
['sb.append', 'sb.append', 'delegate.options', 'sb.append', 'opt.shortDisplay', 'sb.append', 'sb.append', 'sb.toString']
['options', 'r.add', 'option.longDisplay']
['delegate.happy']
['param.split', '.', '.', 'options.put']
[None]
[None]
['GroupedOptions.formatLong', 'shortDisplay']
['Collections.emptyList']
['options.isEmpty']
['options.isEmpty']
['delegate.options', 'option.setByUser', 'r.add']
['delegate.options', 'option.setByUser', 'option.present', 'r.add']
['delegate.options', 'option.setByUser']
['delegate.options', 'option.present']
[None]
[None]
[None]
['cqlVersions.add', 'QueryProcessor.CQL_VERSION.toString', 'compressions.add', 'compressions.add', 'supported.put', 'supported.put']
[None]
['Collections.sort', 'MethodComparator.getFrameworkMethodComparatorForJUnit4']
['SchemaLoader.cleanupAndLeaveDirs']
[None]
['tok', '.', 'tok', 'tok', '.', 'tok', 'tok', '.', 'tok', 'tok', '.', 'tok', 'tok', '.', 'tok', 'tok', '.', 'tok', 'tok', '.', 'tok']
['msg.getStage', 'msg.payloadSize', 'smallMessages.getTargetVersion']
['conn.closeSocket']
['conn.getTargetVersion', 'conn.softCloseSocket']
['SystemKeyspace.updatePreferredIP', 'conn.softCloseSocket', 'metrics.release']
['metrics.timeouts.getCount']
['metrics.timeouts.mark']
['newSocket', 'endPoint']
['isEncryptedChannel', 'Config.getOutboundBindAny', 'SSLFactory.getSocket', 'DatabaseDescriptor.getServerEncryptionOptions', 'DatabaseDescriptor.getSSLStoragePort', 'SSLFactory.getSocket', 'DatabaseDescriptor.getServerEncryptionOptions', 'DatabaseDescriptor.getSSLStoragePort', 'FBUtilities.getLocalAddress', 'SocketChannel.open', '.', 'DatabaseDescriptor.getStoragePort', 'Config.getOutboundBindAny', 'socket.isBound', 'socket.bind', 'FBUtilities.getLocalAddress']
['id.equals', 'FBUtilities.getBroadcastAddress', 'FBUtilities.getLocalAddress']
['DatabaseDescriptor.getEndpointSnitch', 'DatabaseDescriptor.getServerEncryptionOptions', 'snitch.getDatacenter', '.', 'snitch.getDatacenter', 'FBUtilities.getBroadcastAddress', 'snitch.getRack', '.', 'snitch.getRack', 'FBUtilities.getBroadcastAddress', 'snitch.getDatacenter', '.', 'snitch.getDatacenter', 'FBUtilities.getBroadcastAddress']
['smallMessages.start', 'largeMessages.start', 'gossipMessages.start', 'started.countDown']
['started.getCount', 'started.await', 'Thread.currentThread', '.', 'String.format', 'id.getHostAddress']
['largeMessages.closeSocket', 'smallMessages.closeSocket', 'gossipMessages.closeSocket', 'metrics.release']
['logger.info']
['logger.trace']
['logger.warn']
['logger.warn']
['System.out.println']
['System.out.println']
['warn']
['System.out.println', 'th.printStackTrace']
['createTable', 'execute', 'execute', 'assertRows', 'execute', 'row', 'set', 'row', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'assertInvalid', 'assertInvalid', 'assertInvalid']
['createTable', 'createTableName', 'assertInvalidThrow', 'String.format', 'keyspace']
['createTable', 'execute', 'execute', 'assertInvalid', 'assertInvalid', 'assertInvalid', 'assertInvalid', 'createTableName', 'assertInvalidThrow', 'String.format', 'keyspace']
['createTable', 'execute']
['createTable', 'assertInvalidThrow']
['createTable', 'execute', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'execute', 'execute']
['createTable', 'execute', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'assertRows', 'execute', 'row', 'BigInteger.valueOf']
['createTable', 'execute', 'assertRows', 'execute', 'row', 'ByteBufferUtil.bytes']
['execute', 'getRows', 'execute']
['createTable', 'fill', 'assertEmpty', 'execute', 'assertEmpty', 'execute', 'execute', 'assertArrayEquals', 'getRows', 'execute', 'execute', 'assertArrayEquals', 'getRows', 'execute', 'createTable', 'fill', 'assertEmpty', 'execute', 'assertEmpty', 'execute', 'execute', 'assertArrayEquals', 'getRows', 'execute', 'execute', 'assertArrayEquals', 'getRows', 'execute']
['createTable', 'execute', 'getRows', 'execute', 'assertNull']
['createTable', 'assertInvalid', 'assertInvalid', 'assertInvalid']
['createTable', 'execute', 'execute', 'execute', 'execute', 'getRows', 'execute', 'assertEquals', 'assertEquals', 'assertTrue', 'Float.isNaN', 'assertTrue', 'assertTrue']
['createTable', 'assertInvalid', 'execute', 'assertRows', 'execute', 'row']
['sortedByMin.size', 'sortedByMin.get', '.', 'overlaps.add', 'sortedByMin.get', 'sortedByMax.size', 'sortedByMax.get', '.', 'overlaps.remove', 'sortedByMax.get']
[None]
['CFMetaData.Builder.create', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'BTreeRow.singleCellRow', 'BufferCell.live', 'PagingState.RowMark.create']
['makeSomePagingState', 'ByteBufferUtil.bytesToHex', 'state.serialize', 'assertTrue', 'serializedState.startsWith']
['makeSomePagingState', 'state.serialize', 'assertEquals', 'serialized.remaining', 'state.serializedSize', 'assertEquals', 'PagingState.deserialize']
['makeSomePagingState', 'state.serialize', 'assertEquals', 'serialized.remaining', 'state.serializedSize', 'assertEquals', 'PagingState.deserialize']
['equals']
['Objects.equal', 'Objects.equal']
['parameters.toString']
['column.isStatic', 'Columns.of', 'column.isStatic', 'Columns.of']
['column.isStatic', 'statics.without', 'column.isStatic', 'regulars.without']
['statics.isEmpty']
['.', '.']
['statics.isEmpty', 'regulars.isEmpty']
[None]
['column.isStatic', 'statics.contains', 'regulars.contains']
['statics.containsAll', 'regulars.containsAll']
['Iterators.concat', 'statics.iterator', 'regulars.iterator']
['Iterators.concat', 'statics.selectOrderIterator', 'regulars.selectOrderIterator']
['regulars.size', 'statics.size']
['sb.append', '.', '.', '.', '.', 'sb.toString']
['.', '.']
['Objects.hash']
['regulars.digest', 'statics.digest']
[None]
['c.isStatic', 'BTreeSet.builder', 'naturalOrder', 'staticColumns.add', 'c.isRegular', 'BTreeSet.builder', 'naturalOrder', 'regularColumns.add']
['add']
['columns.regulars.isEmpty', 'BTreeSet.builder', 'naturalOrder', 'regularColumns.add', 'columns.statics.isEmpty', 'BTreeSet.builder', 'naturalOrder', 'staticColumns.add']
['Columns.from', 'staticColumns.build', 'Columns.from', 'regularColumns.build']
['iter.hasNext', 'iter.next', 'EmptyIterators.row', 'command.metadata', 'command.partitionKey', 'command.clusteringIndexFilter', '.', 'iter.hasNext', 'iter.close', 'Transformation.apply']
['iter.hasNext', 'iter.close']
['iterators.size', 'iterators.get', 'iterators.size', 'iterators.get', 'MorePartitions.extend', 'iterators.get']
['iterators.size', 'iterators.get']
['iterator.hasNext', 'iterator.next', 'RowIterators.digest']
[None]
['iterator.hasNext', 'iterator.next', 'partition.hasNext', 'partition.next']
['RowIterators.loggingIterator', 'Transformation.apply']
['RowIterators.loggingIterator']
['endOfData']
['iterator.close']
[None]
['key.remaining', 'p.getMinimumToken', '.', 'p.decorateKey']
['pos.kind', 'out.writeByte', 'kind.ordinal', 'ByteBufferUtil.writeWithShortLength', 'Token.serializer.serialize', 'pos.getToken']
['Kind.fromOrdinal', 'in.readByte', 'ByteBufferUtil.readWithShortLength', 'p.decorateKey', 'Token.serializer.deserialize', 't.minKeyBound', 't.maxKeyBound']
['pos.kind', 'TypeSizes.sizeof', 'Token.serializer.serializedSize', 'pos.getToken']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.denseCFMD', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['Keyspace.open', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'assertEquals', 'Util.getAll', '.', 'Util.cmd', '.', '.', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'cfs.truncateBlocking', 'ByteBufferUtil.bytes', 'cfs.metadata.getColumnDefinition', '.', '.', '.', '.', 'cfs.forceBlockingFlush', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'Util.getOnlyRow', 'Util.cmd', '.', '.', 'assertTrue', 'row.getCell', '.', '.', 'ByteBufferUtil.bytes', 'Util.getOnlyRow', 'Util.cmd', '.', '.', 'assertTrue', 'row.getCell', '.', '.', 'ByteBufferUtil.bytes']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'cfs.clearUnsafe', 'String.valueOf', 'builder.clustering', 'builder.add', 'String.valueOf', 'builder.build', '.', 'cfs.forceBlockingFlush', 'cfs.metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'Util.getAll', 'Util.cmd', '.', '.', '.', 'assertEquals', 'partitions.size', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.size', 'Util.getAll', 'Util.cmd', '.', '.', '.', 'assertEquals', 'partitions.size', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.size', 'Util.getAll', 'Util.cmd', '.', '.', '.', 'assertEquals', 'partitions.size', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.size', 'Util.getAll', 'Util.cmd', '.', '.', '.', 'assertEquals', 'partitions.size', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'assertTrue', 'partitions.get', '.', '.', '.', '.', '.', 'ByteBufferUtil.bytes', 'partitions.size']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.denseCFMD']
['Keyspace.open', '.', '.', '.', '.', 'CachedBTreePartition.create', 'update.unfilteredIterator', 'FBUtilities.nowInSeconds', 'CachedPartition.cacheSerializer.serialize', 'CachedPartition.cacheSerializer.deserialize', 'bufOut.getData', 'deserialized.metadata', '.', 'deserialized.partitionKey', '.', 'partition.partitionKey']
['Keyspace.open', '.', '.', '.', 'builder.add', 'builder.buildUpdate', 'CachedBTreePartition.create', 'update.unfilteredIterator', 'FBUtilities.nowInSeconds', 'CachedPartition.cacheSerializer.serialize', 'CachedPartition.cacheSerializer.deserialize', 'bufOut.getData', 'assertEquals', 'partition.columns', '.', 'deserialized.columns', '.', 'assertTrue', 'deserialized.columns', '.', '.', 'partition.columns', '.', 'assertTrue', 'deserialized.columns', '.', '.', 'partition.columns', '.', 'cfs.metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'assertTrue', 'partition.lastRow', '.', '.', '.', 'deserialized.lastRow', '.', '.', 'deserialized.partitionKey', '.', 'partition.partitionKey']
['testDigest']
['testDigest']
['Keyspace.open', '.', '.', '.', 'builder.add', 'builder.build', '.', '.', '.', '.', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'MessageDigest.getInstance', 'MessageDigest.getInstance', 'UnfilteredRowIterators.digest', 'p1.unfilteredIterator', 'UnfilteredRowIterators.digest', 'p2.unfilteredIterator', 'assertFalse', 'Arrays.equals', 'digest1.digest', 'digest2.digest', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'MessageDigest.getInstance', 'MessageDigest.getInstance', 'UnfilteredRowIterators.digest', 'p1.unfilteredIterator', 'UnfilteredRowIterators.digest', 'p2.unfilteredIterator', 'assertTrue', 'Arrays.equals', 'digest1.digest', 'digest2.digest', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'RowUpdateBuilder.deleteRow', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'MessageDigest.getInstance', 'MessageDigest.getInstance', 'UnfilteredRowIterators.digest', 'p1.unfilteredIterator', 'UnfilteredRowIterators.digest', 'p2.unfilteredIterator', 'assertFalse', 'Arrays.equals', 'digest1.digest', 'digest2.digest', 'cfs.truncateBlocking']
['System.currentTimeMillis', 'Keyspace.open', '.', '.', '.', 'builder.add', 'builder.build', '.', 'RowUpdateBuilder.deleteRowAt', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'partition.stats', 'assertEquals']
['MutableDeletionInfo.live', 'BTree.empty']
['BTree.empty']
['MutableDeletionInfo.live', 'row.isStatic', 'Columns.from', 'row.columns', 'BTree.empty', 'Columns.from', 'row.columns', 'BTree.singleton']
['singleRowUpdate', 'metadata.decorateKey']
['build', 'iterator.metadata', 'iterator.partitionKey']
['MutableDeletionInfo.live', 'build', 'iterator.metadata', 'iterator.partitionKey']
[None]
['serializer.deserialize']
['serializer.serialize', 'ByteBuffer.wrap', 'out.getData', 'out.getLength']
['fullPartitionDelete', 'metadata.decorateKey']
['updates.isEmpty', 'updates.size', 'Iterables.getOnlyElement', 'FBUtilities.nowInSeconds', 'Lists.transform', 'fromIterator', 'UnfilteredRowIterators.merge']
['holder', 'deletionInfo.updateAllTimestamp', 'BTree.<', 'x.updateAllTimestamp', 'holder.staticRow.updateAllTimestamp', 'EncodingStats.Collector.collect', 'BTree.<']
['rowCount', 'staticRow', '.', 'deletionInfo.rangeCount', 'deletionInfo.getPartitionDeletion', '.']
['row.clustering', '.', 'cd.dataSize']
[None]
['maybeBuild']
['holder']
['builder']
['BTree.<', '.', 'Rows.merge']
['maybeBuild']
['maybeBuild']
['metadata', '.', 'row.clustering', 'cd.validate']
['maybeBuild', 'deletionInfo.maxTimestamp', 'Math.max', 'row.primaryKeyLivenessInfo', '.', 'cd.column', '.', 'Math.max', 'Math.max', 'complexData.complexDeletion', '.', 'Math.max', 'cell.timestamp']
['metadata', '.', 'maybeBuild', 'row.cells', 'cell.isCounterCell', 'l.add', 'cell.column', 'cell.path']
[None]
['assertNotBuilt', 'deletionInfo.add']
['assertNotBuilt', 'deletionInfo.add']
['row.isEmpty', 'assertNotBuilt', 'row.isStatic', 'columns', '.', 'row.columns', 'columns', 'row.columns', 'holder.staticRow.isEmpty', 'Rows.merge', 'columns', '.', 'row.columns', 'columns', 'row.columns', 'rowBuilder.add']
['build']
['rowBuilder.build', 'BTree.<', 'UpdateFunction.Simple.of', 'Rows.merge', 'EncodingStats.Collector.collect', 'BTree.<']
['sb.append', 'String.format', 'metadata.getKeyValidator', '.', 'partitionKey', '.', 'columns', 'sb.append', '.', 'sb.append', 'sb.toString']
['update.sliceableUnfilteredIterator', 'iter.isReverseOrder', 'LegacyLayout.serializeAsLegacyPartition', 'CFMetaData.serializer.serialize', 'update.metadata', 'UnfilteredRowIteratorSerializer.serializer.serialize', 'update.rowCount']
['deserialize30', 'deserializePre30']
['deserialize30', 'deserializePre30', 'key.getKey']
['CFMetaData.serializer.deserialize', 'UnfilteredRowIteratorSerializer.serializer.deserializeHeader', 'emptyUpdate', 'MutableDeletionInfo.builder', 'BTree.builder', 'rows.auto', 'UnfilteredRowIteratorSerializer.serializer.deserialize', 'partition.hasNext', 'partition.next', 'unfiltered.kind', 'rows.add', 'deletionBuilder.add', 'deletionBuilder.build', 'header.sHeader.columns', 'rows.build', 'header.sHeader.stats']
['LegacyLayout.deserializeLegacyPartition', 'PartitionUpdate.fromIterator']
['update.sliceableUnfilteredIterator', 'LegacyLayout.serializedSizeAsLegacyPartition', 'CFMetaData.serializer.serializedSize', 'update.metadata', 'UnfilteredRowIteratorSerializer.serializer.serializedSize', 'update.rowCount']
['row.clustering']
[None]
[None]
['row.getCell', '.', 'row.getCell', '.']
[None]
[None]
['Schema.instance.getCFMetaData', 'doAuthenticate', 'logger.trace', 'e.toString']
['ImmutableSet.of', 'DataResource.table']
[None]
['String.format', 'prepare', 'Schema.instance.getCFMetaData', 'String.format', 'prepare']
['credentials.get', 'String.format', 'credentials.get', 'String.format', 'authenticate']
[None]
['QueryProcessor.getStatement', 'ClientState.forInternalCalls']
['decodeCredentials']
[None]
['authenticate']
['logger.trace', 'Arrays.copyOfRange', 'Arrays.copyOfRange']
['authorizer.authorize', 'cache.get', 'Pair.create']
['initCache']
['DatabaseDescriptor.setPermissionsValidity', 'initCache']
['DatabaseDescriptor.getPermissionsValidity']
['DatabaseDescriptor.setPermissionsUpdateInterval', 'initCache']
['DatabaseDescriptor.getPermissionsUpdateInterval']
['DatabaseDescriptor.getPermissionsValidity', 'CacheBuilder.newBuilder', '.', 'DatabaseDescriptor.getPermissionsUpdateInterval', '.', 'DatabaseDescriptor.getPermissionsValidity', '.', 'DatabaseDescriptor.getPermissionsCacheMaxEntries', '.', 'authorizer.authorize', 'ListenableFutureTask.create', 'authorizer.authorize', 'logger.trace', 'cacheRefreshExecutor.execute', 'newcache.putAll', 'existing.asMap']
['authorizer.authorize']
['ListenableFutureTask.create', 'authorizer.authorize', 'logger.trace', 'cacheRefreshExecutor.execute']
['authorizer.authorize', 'logger.trace']
[None]
[None]
[None]
[None]
['partitions.get', '.']
['out.add', 'in.get', 'out.addAll', 'in.subList']
[None]
['predicate.setSlice_range', '.', 'settings.columns.names.get', '.', '.', '.', 'count', 'predicate.setColumn_names', 'select']
['type.toString']
['columnCount.next', 'ThreadLocalRandom.current', '.', 'columnCount.next', 'settings.columns.names.size', 'settings.columns.names.size', 'ThreadLocalRandom.current', 'Math.round', 'rnd.nextDouble']
['getColumnValues', 'settings.columns.names.size']
['partitions.get', '.', 'columns.count', 'row.get', 'row.get', 'Arrays.asList']
[None]
['String.format']
['newCFMetaData', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'newSingleEq', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'newSingleEq', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newCFMetaData', 'newSingleIN', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newSingleSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newSingleSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleEq', 'newSingleIN', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleEq', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'newSingleSlice', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleSlice', 'newSingleSlice', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiEq', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiIN', 'asList', 'asList', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyEnd', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'restrictions.mergeWith', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEmptyStart', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleEq', 'newMultiEq', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newSingleEq', 'newMultiEq', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newMultiEq', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newSingleEq', 'newMultiEq', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleEq', 'newMultiIN', 'asList', 'asList', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get', 'newSingleEq', 'newMultiIN', 'asList', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newSingleEq', 'newMultiIN', 'asList', 'asList', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newSingleEq', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newSingleEq', 'newMultiSlice', 'newMultiSlice', 'restrictions.mergeWith', '.', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiEq', 'newSingleSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['newCFMetaData', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'newMultiEq', 'newMultiSlice', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'newMultiEq', 'newMultiIN', 'asList', 'asList', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get', 'assertEndBound', 'get', 'newMultiEq', 'newMultiEq', 'restrictions.mergeWith', '.', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertStartBound', 'get', 'restrictions.boundsAsClustering', 'assertEquals', 'bounds.size', 'assertEndBound', 'get']
['assertEquals']
['assertEquals']
['assertBound']
['assertBound']
['assertEquals', 'bound.size', 'assertEquals', 'bound.isStart', 'bound.isStart', 'assertEquals', 'bound.isInclusive', 'assertTrue', 'String.format', 'ByteBufferUtil.toInt', 'ByteBufferUtil.toInt', 'bound.get', 'element.equals', 'bound.get']
['types.add', 'CFMetaData.Builder.create', '.', 'builder.addClusteringColumn', 'builder.build']
['getClusteringColumnDefinition', 'toTerm']
['columnDefinitions.add', 'getClusteringColumnDefinition', 'toMultiItemTerminal']
['columnDefinitions.add', 'getClusteringColumnDefinition', 'terms.add', 'toMultiItemTerminal', '.']
['getClusteringColumnDefinition', 'toTerms']
['cfMetaData.clusteringColumns', '.']
['getClusteringColumnDefinition', 'toTerm']
['columnDefinitions.add', 'getClusteringColumnDefinition', 'toMultiItemTerminal']
[None]
[None]
['terms.add', 'toTerm']
['Iterables.get']
['testInvalidProtocolVersion', 'testInvalidProtocolVersion']
['Unpooled.wrappedBuffer', 'dec.decode', 'Assert.fail', 'Assert.assertTrue', 'e.getMessage', '.']
['Unpooled.wrappedBuffer', 'dec.decode', 'Assert.fail', 'Assert.assertEquals', 'e.getStreamId', 'Assert.assertTrue', 'e.getMessage', '.']
['Unpooled.wrappedBuffer', 'dec.decode', 'Assert.fail', 'Assert.assertEquals', 'e.getStreamId', 'Assert.assertTrue', 'e.getMessage', '.']
[None]
[None]
[None]
[None]
['onNewPartition', 'partition.partitionKey', 'partition.isReverseOrder', 'Transformation.apply', 'purged.isEmpty', 'onEmptyPartitionPostPurge', 'purged.partitionKey', 'purged.close']
['purger.shouldPurge']
['updateProgress', 'row.purge']
['updateProgress', 'row.purge']
['updateProgress', 'marker.isBoundary', 'purger.shouldPurge', 'boundary.closeDeletionTime', 'purger.shouldPurge', 'boundary.openDeletionTime', 'boundary.createCorrespondingOpenMarker', 'boundary.createCorrespondingCloseMarker', 'purger.shouldPurge']
['ClientState.forInternalCalls']
[None]
['clientState.getTimestamp']
['StorageService.instance.getTraceProbability', 'ThreadLocalRandom.current', '.']
[None]
['Tracing.instance.newSession', 'Tracing.instance.newSession']
['clientState.getRemoteAddress', '.']
['BufferPool.get', '.']
['BufferPool.put']
['isEOF', 'reBufferStandard', 'reBufferMmap', 'limiter.acquire', 'buffer.remaining', 'buffer.order']
['buffer.position', 'buffer.clear', 'Math.min', 'buffer.capacity', 'buffer.limit', 'buffer.hasRemaining', 'channel.read', 'channel.filePath', 'buffer.position', 'buffer.flip']
['buffer.position', 'regions.floor', 'region.bottom', 'region.buffer.duplicate', 'buffer.position', 'Ints.checkedCast', 'buffer.remaining', 'buffer.limit', 'buffer.position']
['current']
['buffer.position']
['channel.filePath']
[None]
['seek']
[None]
['current']
['current']
['seek']
['current']
['current', 'length']
['length', 'getFilePointer']
['Ints.saturatedCast', 'bytesRemaining']
['buffer.position', 'releaseBuffer']
['getClass', '.']
['length', 'String.format', 'getPath', 'length', 'buffer.limit', 'buffer.limit', 'buffer.position', 'buffer.clear', 'reBuffer', 'current']
['read', 'line.length', 'line.toString', 'seek', 'line.toString', 'getPosition', 'line.toString', 'seek', 'line.toString', 'line.append']
[None]
['current']
[None]
['setBufferSize', 'allocateBuffer', 'regions.floor', '.', 'buffer.limit']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['channel.close']
['.']
['.']
[None]
[None]
[None]
[None]
['testReadFully', '.']
['testReadFully', '.']
['testReadFully', '.']
['testReadFully', '.']
['testReadFully', '.']
['testReadFully', '.', '.']
['.', '.', 'builder.build', 'assertEquals', 'channel.size', 'reader.length', 'assertEquals', 'channel.size', 'reader.bytesRemaining', 'assertEquals', 'reader.available', 'assertEquals', 'channel.size', 'reader.skip', 'channel.size', 'assertTrue', 'reader.isEOF', 'assertEquals', 'reader.bytesRemaining']
['dst.remaining', 'dst.position', 'dst.limit']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['dst.remaining', 'dst.position', 'dst.limit']
[None]
[None]
[None]
[None]
[None]
['File.createTempFile', 'f.deleteOnExit', 'SequentialWriter.open', 'writer.write', 'writer.finish', 'f.exists', 'f.length']
['writeFile', '.', '.', 'builder.regions', 'MmappedRegions.map', 'f.length', 'builder.build', 'assertEquals', 'f.getAbsolutePath', 'reader.getPath', 'assertEquals', 'f.length', 'reader.length', 'assertEquals', 'f.length', 'reader.bytesRemaining', 'assertEquals', 'Math.min', 'f.length', 'reader.available', 'reader.readFully', 'assertTrue', 'Arrays.equals', 'assertTrue', 'reader.isEOF', 'assertEquals', 'reader.bytesRemaining', 'assertNull', 'builder.regions.close']
['File.createTempFile', 'SequentialWriter.open', 'writer.write', 'expected.getBytes', 'writer.finish', 'f.exists', '.', 'assertEquals', 'f.getAbsolutePath', 'reader.getPath', 'assertEquals', 'expected.length', 'reader.length', 'ByteBufferUtil.read', 'expected.length', 'assertEquals', 'b.array', 'Charset.forName', 'assertTrue', 'reader.isEOF', 'assertEquals', 'reader.bytesRemaining']
['File.createTempFile', 'SequentialWriter.open', 'writer.write', 'expected.getBytes', 'writer.finish', 'f.exists', '.', 'assertEquals', 'expected.length', 'reader.length', 'ByteBufferUtil.read', 'expected.length', 'assertEquals', 'b.array', 'Charset.forName', 'assertFalse', 'reader.isEOF', 'assertEquals', 'expected.length', 'reader.bytesRemaining', 'reader.mark', 'assertEquals', 'reader.bytesPastMark', 'assertEquals', 'reader.bytesPastMark', 'ByteBufferUtil.read', 'expected.length', 'assertEquals', 'b.array', 'Charset.forName', 'assertTrue', 'reader.isEOF', 'assertEquals', 'expected.length', 'reader.bytesPastMark', 'assertEquals', 'expected.length', 'reader.bytesPastMark', 'reader.reset', 'assertEquals', 'reader.bytesPastMark', 'assertEquals', 'reader.bytesPastMark', 'assertFalse', 'reader.isEOF', 'ByteBufferUtil.read', 'expected.length', 'assertEquals', 'b.array', 'Charset.forName', 'reader.reset', 'assertEquals', 'reader.bytesPastMark', 'assertEquals', 'reader.bytesPastMark', 'assertFalse', 'reader.isEOF', 'ByteBufferUtil.read', 'expected.length', 'assertEquals', 'b.array', 'Charset.forName', 'assertTrue', 'reader.isEOF']
['testSeek']
['testSeek']
['File.createTempFile', 'System.nanoTime', 'logger.info', 'r.nextBytes', 'SequentialWriter.open', 'writer.write', 'writer.finish', 'f.exists', '.', 'assertEquals', 'reader.length', 'ByteBufferUtil.read', 'assertTrue', 'Arrays.equals', 'b.array', 'assertTrue', 'reader.isEOF', 'assertEquals', 'reader.bytesRemaining', 'reader.seek', 'ByteBufferUtil.read', 'assertTrue', 'Arrays.equals', 'b.array', 'assertTrue', 'reader.isEOF', 'assertEquals', 'reader.bytesRemaining', 'r.nextInt', 'reader.seek', 'assertEquals', 'reader.getPosition', 'ByteBuffer.wrap', '.', 'reader.bytesRemaining', 'assertEquals', 'buf.getInt', 'reader.readInt', 'reader.close', 'ex.printStackTrace', 'fail', 'ex.getMessage', 'worker.run', 'Executors.newFixedThreadPool', 'executor.submit', 'executor.shutdown', 'executor.awaitTermination']
['sortedAdditionTest', 'sortedAdditionTest']
['rt', 'rt', 'rt', 'l.add', 'l.add', 'l.add', 'l.iterator', 'assertRT', 'iter.next', 'assertRT', 'iter.next', 'assertRT', 'rtei', 'iter.next', 'iter.hasNext']
['nonSortedAdditionTest', 'nonSortedAdditionTest']
['rt', 'rt', 'rt', 'l.add', 'l.add', 'l.add', 'l.iterator', 'assertRT', 'iter.next', 'assertRT', 'iter.next', 'assertRT', 'rtei', 'iter.next', 'iter.hasNext']
['overlappingAdditionTest', 'overlappingAdditionTest']
['l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rt', 'iter.next', 'assertRT', 'rtei', 'iter.next', 'iter.hasNext', 'l2.add', 'rt', 'l2.add', 'rt', 'assertEquals', 'l2.searchDeletionTime', '.', 'clustering']
['l.add', 'rt', 'assertEquals', 'l.size', 'l.add', 'rt']
['l1.add', 'rt', 'l1.add', 'rt', 'l1.iterator', 'assertRT', 'rtie', 'iter1.next', 'assertRT', 'rt', 'iter1.next', 'assertRT', 'rtei', 'iter1.next', 'iter1.hasNext', 'l2.add', 'rt', 'l2.add', 'rt', 'l2.iterator', 'assertRT', 'rt', 'iter2.next', 'iter2.hasNext']
['l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.size']
['l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'assertEquals', 'l.searchDeletionTime', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', 'clustering']
['l1.add', 'rt', 'l1.add', 'rt', 'l1.add', 'rt', 'l2.add', 'rt', 'l2.add', 'rt', 'l2.add', 'rt', 'l2.add', 'rt', 'l1.addAll', 'l1.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rt', 'iter.next', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rt', 'iter.next', 'assertRT', 'rtei', 'iter.next', 'assertRT', 'rtei', 'iter.next', 'assertRT', 'rt', 'iter.next', 'iter.hasNext']
['l1.add', 'rt', 'l2.add', 'rt', 'l1.addAll', 'l1.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rt', 'iter.next', 'iter.hasNext']
['l1.add', 'rt', 'l2.add', 'rt', 'l2.add', 'rt', 'l2.add', 'rt', 'l1.addAll', 'l1.iterator', 'assertRT', 'rt', 'iter.next', 'iter.hasNext']
['fromString', 'fromString', 'l1.addAll', 'assertValid']
['rand.nextInt', 'rand.nextInt', 'rand.nextBoolean', 'rand.nextBoolean', 'l.add', 'rt', 'rand.nextInt']
['System.nanoTime', 'makeRandom', 'rand.nextInt', 'rand.nextInt', 'rand.nextInt', 'rand.nextInt', 'makeRandom', 'rand.nextInt', 'rand.nextInt', 'rand.nextInt', 'rand.nextInt', 'l1.copy', 'l1.addAll', 'assertValid', 'System.out.println', 'System.out.println', 'toString', 'System.out.println', 'toString', 'System.out.println']
['nonSortedAdditionTestWithOneRangeWithEmptyEnd', 'nonSortedAdditionTestWithOneRangeWithEmptyEnd']
['rt', 'rt', 'atLeast', 'l.add', 'l.add', 'l.add', 'l.iterator', 'assertRT', 'iter.next', 'assertRT', 'iter.next', 'assertRT', 'iter.next', 'iter.hasNext']
['l.add', 'rt', 'l.add', 'atLeast', 'l.iterator', 'assertRT', 'atLeast', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'rt', 'l.add', 'atMost', 'l.iterator', 'assertRT', 'atMost', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'l.add', 'atLeast', 'l.iterator', 'assertRT', 'lessThan', 'iter.next', 'assertRT', 'atLeast', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'atLeast', 'l.add', 'atLeast', 'l.iterator', 'assertRT', 'atLeast', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'atLeast', 'l.add', 'rt', 'l.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'rt', 'iter.next', 'assertRT', 'greaterThan', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'atLeast', 'l.add', 'atLeast', 'l.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'atLeast', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'rt', 'l.add', 'atLeast', 'l.iterator', 'assertRT', 'rtie', 'iter.next', 'assertRT', 'atLeast', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'atLeast', 'l.add', 'rt', 'l.iterator', 'assertRT', 'rt', 'iter.next', 'assertRT', 'greaterThan', 'iter.next', 'assertFalse', 'iter.hasNext']
['l.add', 'atMost', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', 'clustering']
['l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'rt', 'l.add', 'atLeast', 'assertEquals', 'l.searchDeletionTime', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering', 'assertEquals', 'l.searchDeletionTime', '.', 'clustering']
['assertTrue', 'String.format', 'toString', 'toString', 'cmp.compare', 'expected.deletedSlice', '.', 'actual.deletedSlice', '.', 'assertTrue', 'String.format', 'toString', 'toString', 'cmp.compare', 'expected.deletedSlice', '.', 'actual.deletedSlice', '.', 'assertEquals', 'String.format', 'toString', 'toString', 'expected.deletionTime', 'actual.deletionTime']
['l.isEmpty', 'l.iterator', 'iter.next', '.', 'assertFalse', 'prev.toString', 'prev.isEmpty', 'iter.hasNext', 'iter.next', '.', 'assertFalse', 'curr.toString', 'curr.isEmpty', 'assertTrue', 'prev.toString', 'curr.toString', 'cmp.compare', 'prev.end', 'curr.start']
['String.format', 'rt.deletedSlice', '.', 'rt.deletionTime', '.']
['l.size', 'toString', 'Joiner.on', '.']
['Pattern.compile', '.', 'range.trim', 'matcher.matches', 'matcher.group', '.', 'Integer.valueOf', 'matcher.group', 'Integer.valueOf', 'matcher.group', 'matcher.group', '.', 'Long.valueOf', 'matcher.group', 'rt']
['str.trim', 'str.substring', '.', 'str.length', 'l.add', 'rangeFromString']
['bb']
['ByteBufferUtil.bytes']
['rt']
['Slice.make', 'Slice.Bound.create', 'Slice.Bound.create']
['Slice.make', 'Slice.Bound.inclusiveStartOf', 'bb', 'Slice.Bound.inclusiveEndOf', 'bb']
['rtei']
['Slice.make', 'Slice.Bound.exclusiveStartOf', 'bb', 'Slice.Bound.inclusiveEndOf', 'bb']
['rtie']
['Slice.make', 'Slice.Bound.inclusiveStartOf', 'bb', 'Slice.Bound.exclusiveEndOf', 'bb']
['Slice.make', 'Slice.Bound.inclusiveStartOf', 'bb']
['Slice.make', 'Slice.Bound.inclusiveEndOf', 'bb']
['Slice.make', 'Slice.Bound.exclusiveEndOf', 'bb']
['Slice.make', 'Slice.Bound.exclusiveStartOf', 'bb']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', 'cfs.forceBlockingFlush', '.', '.', '.', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', '.', '.', '.', 'Util.cmd', 'cmdBuilder.includeRow', 'cmdBuilder.includeRow', 'Util.getOnlyPartitionUnfiltered', 'cmdBuilder.build', 'FBUtilities.nowInSeconds', 'assertTrue', 'partition.getRow', '.', 'bb', 'assertFalse', 'partition.getRow', '.', 'bb', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'assertTrue', 'partition.getRow', '.', 'bb', 'assertFalse', 'partition.getRow', '.', 'bb']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', '.', '.', '.', '.', '.', '.', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', '.', '.', 'rangeTombstones', 'assertEquals', 'rt.size', 'cfs.getComparator', 'sb.add', 'Slice.Bound.create', 'cfs.getComparator', 'Slice.Bound.create', 'cfs.getComparator', 'sb.add', 'Slice.Bound.create', 'cfs.getComparator', 'Slice.Bound.create', 'cfs.getComparator', 'Util.getOnlyPartitionUnfiltered', 'SinglePartitionReadCommand.create', 'FBUtilities.nowInSeconds', 'Util.dk', 'sb.build', 'rangeTombstones', 'assertEquals', 'rt.size']
['Iterators.addAll', 'partition.deletionInfo', '.']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.truncateBlocking', 'FBUtilities.nowInSeconds', '.', 'PartitionUpdate.fullPartitionDelete', 'Util.dk', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata', 'cfs.forceMajorCompaction', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.truncateBlocking', 'UpdateBuilder.create', '.', '.', '.', '.', 'FBUtilities.nowInSeconds', '.', 'PartitionUpdate.fullPartitionDelete', 'Util.dk', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata', 'cfs.forceMajorCompaction', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.truncateBlocking', 'FBUtilities.nowInSeconds', '.', '.', '.', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata', 'cfs.forceMajorCompaction', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.truncateBlocking', 'UpdateBuilder.create', '.', '.', '.', '.', 'FBUtilities.nowInSeconds', '.', 'PartitionUpdate.fullPartitionDelete', 'Util.dk', 'cfs.forceBlockingFlush', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata', 'cfs.forceMajorCompaction', 'cfs.getLiveSSTables', '.', '.', 'assertTimes', 'sstable.getSSTableMetadata']
['assertEquals', 'assertEquals', 'assertEquals']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.metadata.gcGraceSeconds', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.apply', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', 'Thread.sleep', 'cfs.forceMajorCompaction', 'assertEquals', 'Util.getOnlyPartitionUnfiltered', '.', 'Util.cmd', '.']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.metadata.gcGraceSeconds', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.apply', 'cfs.forceBlockingFlush', '.', 'PartitionUpdate.fullPartitionDelete', 'Util.dk', 'cfs.forceBlockingFlush', 'Thread.sleep', 'cfs.forceMajorCompaction']
['Keyspace.open', 'ks.getColumnFamilyStore', 'cfs.metadata.gcGraceSeconds', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.apply', 'cfs.forceBlockingFlush', '.', 'PartitionUpdate.fullPartitionDelete', 'Util.dk', 'UpdateBuilder.create', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'Thread.sleep', 'cfs.forceMajorCompaction', 'assertEquals', 'Util.getOnlyPartitionUnfiltered', '.', 'Util.cmd', '.']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'FBUtilities.nowInSeconds', 'assertTrue', 'partition.getRow', '.', 'bb', 'assertTrue', 'partition.getRow', '.', 'bb', 'assertFalse', 'partition.getRow', '.', 'bb', 'CompactionManager.instance.performMaximal', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'assertTrue', 'partition.getRow', '.', 'FBUtilities.nowInSeconds', 'bb', 'assertTrue', 'partition.getRow', '.', 'FBUtilities.nowInSeconds', 'bb', 'assertFalse', 'partition.getRow', '.', 'bb']
['Keyspace.open', 'table.getColumnFamilyStore', 'UpdateBuilder.create', '.', '.', '.', '.', 'cfs.forceBlockingFlush', '.', '.', '.', 'UpdateBuilder.create', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'Util.getOnlyPartition', 'Util.cmd', '.', 'assertTrue', 'partition.rowCount', 'i', 'partition.unfilteredIterator', '.', '.', '.', 'ColumnFilter.all', 'assertEquals']
['Keyspace.open', 'table.getColumnFamilyStore', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'cfs.truncateBlocking', 'cfs.disableAutoCompaction', 'cfs.metadata.getColumnDefinition', '.', 'IndexMetadata.fromIndexTargets', 'Collections.singletonList', 'ImmutableMap.of', '.', 'cfs.metadata.getIndexes', '.', '.', 'cfs.metadata.indexes', 'cfs.metadata.getIndexes', '.', 'cfs.indexManager.addIndex', 'rebuild.get', 'cfs.indexManager.listIndexes', '.', '.', 'STR_.equals', 'i.getIndexMetadata', '.', '.', 'index.reset', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', 'assertEquals', 'index.rowsInserted.size', 'CompactionManager.instance.performMaximal', 'assertEquals', 'cfs.getLiveSSTables', '.', 'assertEquals', 'index.rowsDeleted.size']
['Keyspace.open', 'table.getColumnFamilyStore', 'ByteBufferUtil.bytes', 'cfs.truncateBlocking', 'cfs.disableAutoCompaction', 'UpdateBuilder.create', '.', 'builder.newRow', '.', 'builder.applyUnsafe', 'cfs.forceBlockingFlush', '.', '.', '.', 'cfs.forceBlockingFlush', 'assertEquals', 'cfs.getLiveSSTables', '.', 'CompactionManager.instance.performMaximal', 'assertEquals', 'cfs.getLiveSSTables', '.', 'cfs.getLiveSSTables', '.', '.', 'sstable.getScanner', 'scanner.next', 'iter.next', 'assertTrue', 'u1.toString', 'iter.next', 'assertTrue', 'u2.toString', 'iter.next', 'assertTrue', 'u3.toString']
['Keyspace.open', 'table.getColumnFamilyStore', 'ByteBufferUtil.bytes', 'ByteBufferUtil.bytes', 'cfs.truncateBlocking', 'cfs.disableAutoCompaction', 'cfs.metadata.getColumnDefinition', '.', 'IndexMetadata.fromIndexTargets', 'Collections.singletonList', 'ImmutableMap.of', '.', 'cfs.metadata.getIndexes', '.', '.', 'cfs.metadata.indexes', 'cfs.metadata.getIndexes', '.', 'cfs.indexManager.addIndex', 'rebuild.get', 'cfs.indexManager.getIndexByName', 'index.reset', 'UpdateBuilder.create', '.', '.', '.', '.', '.', '.', '.', 'UpdateBuilder.create', '.', '.', '.', '.', 'cfs.forceBlockingFlush', 'assertEquals', 'index.rowsInserted.size', 'assertEquals', 'index.rowsUpdated.size']
['ByteBufferUtil.bytes']
['ByteBufferUtil.toInt']
['SchemaLoader.standardCFMD', 'CFMetaData.Builder.create', '.', '.', '.', '.', '.', 'SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple']
['Keyspace.open', '.', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'cfs.forceBlockingFlush', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'Util.cmd', '.', 'assertEquals', 'Util.getAll', '.', 'readCommand.abort', 'assertEquals', 'Util.getAll', '.']
['Keyspace.open', '.', 'cfs.truncateBlocking', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'cfs.forceBlockingFlush', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'Util.cmd', '.', 'Util.dk', 'Util.getAll', 'assertEquals', 'partitions.size', 'assertEquals', 'partitions.get', '.', 'readCommand.abort', 'assertEquals', 'Util.getAll', '.']
['Keyspace.open', '.', 'cfs.truncateBlocking', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'cfs.forceBlockingFlush', '.', '.', 'ByteBufferUtil.bytes', '.', '.', 'ByteBufferUtil.bytes', 'Util.cmd', '.', '.', '.', 'Util.dk', 'Util.getAll', 'assertEquals', 'partitions.size', 'assertEquals', 'partitions.get', '.', 'readCommand.abort', 'assertEquals', 'Util.getAll', '.']
['message.payload.apply', 'MessagingService.instance', '.', 'WriteResponse.createMessage']
['probe.rebuild']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD']
['FBUtilities.waitOnFutures', 'Keyspace.open', '.', 'FBUtilities.waitOnFutures', 'Keyspace.open', '.', 'CompactionManager.instance.disableAutoCompaction', 'insertRow', 'insertRow', 'Keyspace.open', 'keyspace1.getColumnFamilyStore', 'logger.debug', 'cfs.forceBlockingFlush', 'logger.debug', 'CommitLog.instance.resetUnsafe']
['Keyspace.open', 'keyspace.getColumnFamilyStore', '.', '.', '.', '.']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['Keyspace.open', 'keyspace.getColumnFamilyStore', '.', '.', '.', '.', 'assertTrue', 'Util.getAll', '.', 'Util.cmd', '.', 'cfs.truncateBlocking', 'CommitLog.instance.resetUnsafe', 'Util.assertEmptyUnfiltered', 'Util.cmd', '.']
['MergeIterator.get']
[None]
[None]
[None]
['mi.close']
['maybeInit', 'mi.iterators']
['maybeInit', 'mi.iterators']
['maybeInit', 'mi.hasNext']
['maybeInit', 'mi.next']
[None]
[None]
[None]
['obj.tryRef', 'obj.release', 'System.gc', 'System.gc', 'Thread.sleep', 'Assert.assertTrue']
['System.gc', 'System.gc', 'System.gc', 'System.gc', 'Thread.sleep', 'Assert.assertTrue']
['obj.release', 'obj.release', 'Assert.assertTrue']
['ObjectSizes.measureDeep', 'ref.ref', '.', 'ObjectSizes.measureDeep', 'ref.release']
['createTable', 'Keyspace.open', '.', 'execute', 'cfs.forceBlockingFlush', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['System.out.println', 'probe.getRemovalStatus', 'System.out.println', 'probe.getRemovalStatus', 'probe.forceRemoveCompletion', 'probe.removeNode']
['StorageService.instance.setPartitionerUnsafe', 'SchemaLoader.loadSchema']
['StorageService.instance.setPartitionerUnsafe']
['tmd.clearUnsafe', 'Util.createInitialRing', 'MessagingService.instance', '.', 'Gossiper.instance.start', 'hosts.get', 'hosts.remove', 'hostIds.get', 'hostIds.remove']
['MessagingService.instance', '.', 'MessagingService.instance', '.', 'MessagingService.instance', '.']
['ss.removeNode']
['ss.removeNode', 'hostIds.get', '.']
['ss.removeNode', 'removalId.toString', 'System.err.println', 'e.printStackTrace', 'success.set', 'remover.start', 'assertTrue', 'tmd.isLeaving', 'assertEquals', 'tmd.getLeavingEndpoints', '.', 'Collections.<', 'MessagingService.instance', '.', 'FBUtilities.getBroadcastAddress', 'remover.join', 'assertTrue', 'success.get', 'assertTrue', 'tmd.getLeavingEndpoints', '.']
['ss.removeNode', 'removalId.toString', 'System.err.println', 'e.printStackTrace', 'success.set']
['createTable', 'execute', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'execute', 'flush', 'Thread.sleep', 'getCurrentColumnFamilyStore', '.', 'verify', 'verify2', 'assertEquals', 'Iterables.size', 'getCurrentColumnFamilyStore', '.']
['createTable', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'flush', 'Thread.sleep', 'getCurrentColumnFamilyStore', '.', 'verify', 'verify2', 'assertEquals', 'Iterables.size', 'getCurrentColumnFamilyStore', '.', 'assertFalse', 'getCurrentColumnFamilyStore', '.', '.', '.', '.']
['createTable', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'flush', 'Thread.sleep', 'verify', 'verify2']
['createTable', 'execute', 'flush', 'Thread.sleep', 'verify', 'verify2']
['createTable', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'flush', 'Thread.sleep', 'verify', 'verify2']
['createTable', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'flush', 'Thread.sleep', 'Util.cmd', '.', 'getCurrentColumnFamilyStore', 'cmd.executionController', 'cmd.executeLocally', 'iterator.hasNext', 'iterator.next', 'ByteBufferUtil.toInt', 'rowIter.partitionKey', '.', 'assertTrue', 'assertEquals']
['createTable', 'getCurrentColumnFamilyStore', '.', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', '.', '.', 'Thread.sleep', 'execute', 'flush', 'getCurrentColumnFamilyStore', '.', 'repair', 'getCurrentColumnFamilyStore', 'Thread.sleep', 'execute', 'flush', 'Thread.sleep', 'verify', 'verify2']
['verify']
['Util.cmd', '.', 'getCurrentColumnFamilyStore', 'cmd.executionController', 'cmd.executeLocally', 'iterator.hasNext', 'iterator.next', 'rowIter.hasNext', 'rowIter.next', 'row.clustering', '.', 'ByteBufferUtil.toInt', 'row.clustering', '.', 'assertTrue', 'assertEquals']
['verify2']
['Util.cmd', '.', 'getCurrentColumnFamilyStore', 'Util.dk', 'ByteBufferUtil.bytes', 'cmd.executionController', 'cmd.executeLocally', 'iterator.hasNext', 'iterator.next', 'rowIter.hasNext', 'rowIter.next', 'row.clustering', '.', 'ByteBufferUtil.toInt', 'row.clustering', '.', 'assertTrue', 'assertEquals']
['sstable.descriptor.getMetadataSerializer', '.', 'sstable.reloadSSTableMetadata', 'cfs.getTracker', '.', 'Collections.singleton']
['.', 'sstable.first.getToken', 'sstable.last.getToken']
['MessagingService.instance', '.']
['partitioner.getTokenFactory', 'RepairOption.parse', 'FBUtilities.isWindows', 'DatabaseDescriptor.getDiskAccessMode', 'DatabaseDescriptor.getIndexAccessMode', 'assertTrue', 'option.getParallelism', 'assertTrue', 'option.getParallelism', 'assertFalse', 'option.isPrimaryRange', 'assertFalse', 'option.isIncremental', 'options.put', 'options.put', 'options.put', 'options.put', 'options.put', 'options.put', 'options.put', 'RepairOption.parse', 'assertTrue', 'option.getParallelism', 'assertFalse', 'option.isPrimaryRange', 'assertFalse', 'option.isIncremental', 'expectedRanges.add', 'tokenFactory.fromString', 'tokenFactory.fromString', 'expectedRanges.add', 'tokenFactory.fromString', 'tokenFactory.fromString', 'expectedRanges.add', 'tokenFactory.fromString', 'tokenFactory.fromString', 'assertEquals', 'option.getRanges', 'expectedCFs.add', 'expectedCFs.add', 'expectedCFs.add', 'assertEquals', 'option.getColumnFamilies', 'expectedDCs.add', 'expectedDCs.add', 'expectedDCs.add', 'assertEquals', 'option.getDataCenters', 'expectedHosts.add', 'expectedHosts.add', 'expectedHosts.add', 'assertEquals', 'option.getHosts']
['RepairOption.parse', 'ImmutableMap.of', 'assertFalse', 'ro.isGlobal', 'RepairOption.parse', 'ImmutableMap.of', 'assertTrue', 'ro.isGlobal']
['PARALLEL.getName', '.', 'DATACENTER_AWARE.getName', '.']
[None]
['getName']
['listeners.add']
['listeners.remove']
['listener.progress']
['fireProgressEvent', 'fireProgressEvent']
['options.getColumnFamilies', '.', 'options.getColumnFamilies', '.', 'storageService.getValidColumnFamilies', 'System.currentTimeMillis', 'String.format', 'logger.info', 'fireProgressEvent', 'options.isTraced', 'cfsb.append', '.', 'cfs.keyspace.getName', '.', '.', 'Tracing.instance.newSession', 'Tracing.instance.begin', 'ImmutableMap.of', 'cfsb.substring', 'Tracing.traceRepair', 'traceState.enableActivityNotification', 'traceState.addProgressListener', 'createQueryThread', 'queryThread.setName', 'queryThread.start', 'options.getRanges', 'ActiveRepairService.getNeighbors', 'options.getDataCenters', 'options.getHosts', 'addRangeToNeighbors', 'allNeighbors.addAll', 'progress.incrementAndGet', 'logger.error', 'fireErrorAndComplete', 'progress.get', 'e.getMessage', 'Iterables.addAll', 'progress.incrementAndGet', 'fireErrorAndComplete', 'progress.get', 'e.getMessage', 'columnFamilyStores.size', 'columnFamilyStores.size', 'columnFamilyStores.get', 'UUIDGen.getTimeUUID', 'SystemDistributedKeyspace.startParentRepair', 'options.getRanges', 'ActiveRepairService.instance.prepareForRepair', 'ActiveRepairService.instance.getParentRepairSession', '.', 'progress.incrementAndGet', 'SystemDistributedKeyspace.failParentRepair', 'fireErrorAndComplete', 'progress.get', 't.getMessage', 'MoreExecutors.listeningDecorator', 'options.getJobThreads', 'options.getRanges', '.', 'ActiveRepairService.instance.submitRepairSession', 'options.getParallelism', 'Futures.addCallback', 'String.format', 'session.getId', 'session.getRanges', '.', 'logger.info', 'fireProgressEvent', 'progress.incrementAndGet', 'String.format', 'session.getId', 'session.getRanges', '.', 't.getMessage', 'logger.error', 'fireProgressEvent', 'progress.incrementAndGet', 'futures.add', 'Futures.successfulAsList', 'Futures.transform', 'successfulRanges.addAll', 'hasFailure.compareAndSet', 'ActiveRepairService.instance.finishParentSession', 'Futures.addCallback', 'SystemDistributedKeyspace.successfulParentRepair', 'hasFailure.get', 'fireProgressEvent', 'progress.get', 'fireProgressEvent', 'progress.get', 'repairComplete', 'fireProgressEvent', 'progress.get', 't.getMessage', 'SystemDistributedKeyspace.failParentRepair', 'repairComplete', 'DurationFormatUtils.formatDurationWords', 'System.currentTimeMillis', 'String.format', 'fireProgressEvent', 'progress.get', 'logger.info', 'options.isTraced', 'traceState.removeProgressListener', 'Tracing.instance.set', 'Tracing.traceRepair', 'Tracing.instance.stopSession', 'executor.shutdownNow']
['String.format', 'session.getId', 'session.getRanges', '.', 'logger.info', 'fireProgressEvent', 'progress.incrementAndGet']
['String.format', 'session.getId', 'session.getRanges', '.', 't.getMessage', 'logger.error', 'fireProgressEvent', 'progress.incrementAndGet']
['successfulRanges.addAll', 'hasFailure.compareAndSet', 'ActiveRepairService.instance.finishParentSession']
['SystemDistributedKeyspace.successfulParentRepair', 'hasFailure.get', 'fireProgressEvent', 'progress.get', 'fireProgressEvent', 'progress.get', 'repairComplete']
['fireProgressEvent', 'progress.get', 't.getMessage', 'SystemDistributedKeyspace.failParentRepair', 'repairComplete']
['DurationFormatUtils.formatDurationWords', 'System.currentTimeMillis', 'String.format', 'fireProgressEvent', 'progress.get', 'logger.info', 'options.isTraced', 'traceState.removeProgressListener', 'Tracing.instance.set', 'Tracing.traceRepair', 'Tracing.instance.stopSession', 'executor.shutdownNow']
['neighborRangeList.size', 'neighborRangeList.get', 'p.left.containsAll', 'p.right.add', 'ranges.add', 'neighborRangeList.add', 'Pair.create']
['Tracing.instance.get', 'String.format', 'QueryProcessor.parseStatement', '.', 'ByteBufferUtil.bytes', 'FBUtilities.getBroadcastAddress', 'System.currentTimeMillis', 'state.waitActivity', 'Math.min', 'ByteBufferUtil.bytes', 'UUIDGen.minTimeUUID', 'ByteBufferUtil.bytes', 'UUIDGen.maxTimeUUID', 'System.currentTimeMillis', 'QueryOptions.forInternalCalls', 'Lists.newArrayList', 'statement.execute', 'QueryState.forInternalCalls', 'UntypedResultSet.create', 'source.equals', 'r.getInetAddress', 'r.getUUID', '.', '.', 'String.format', 'r.getInetAddress', 'r.getString', 'fireProgressEvent', '.']
['Tracing.instance.get', 'String.format', 'QueryProcessor.parseStatement', '.', 'ByteBufferUtil.bytes', 'FBUtilities.getBroadcastAddress', 'System.currentTimeMillis', 'state.waitActivity', 'Math.min', 'ByteBufferUtil.bytes', 'UUIDGen.minTimeUUID', 'ByteBufferUtil.bytes', 'UUIDGen.maxTimeUUID', 'System.currentTimeMillis', 'QueryOptions.forInternalCalls', 'Lists.newArrayList', 'statement.execute', 'QueryState.forInternalCalls', 'UntypedResultSet.create', 'source.equals', 'r.getInetAddress', 'r.getUUID', '.', '.', 'String.format', 'r.getInetAddress', 'r.getString', 'fireProgressEvent', '.']
['ssProxy.repairAsync', 'String.format', 'format.format', 'System.currentTimeMillis', 'out.println', 'condition.await', 'out.println', 'String.format']
['tag.equals']
[None]
['handleConnectionFailed']
['String.format', 'format.format', 'condition.signalAll']
['event.getType', 'String.format', 'format.format', 'System.currentTimeMillis', 'event.getMessage', 'event.getProgressPercentage', 'out.println', 'condition.signalAll']
['InetAddress.getByName', 'Gossiper.instance.initializeNodeUnsafe', 'UUID.randomUUID', 'UUIDGen.getTimeUUID', 'UUID.randomUUID', 'p.getToken', 'ByteBufferUtil.bytes', 'p.getToken', 'ByteBufferUtil.bytes', 'Sets.newHashSet', 'Arrays.asList', 'session.convict', 'session.get', 'fail', 'assertEquals', 'ex.getCause', '.']
['wrapped.isShutdown']
[None]
[None]
['wrapped.shutdown']
['wrapped.shutdownNow']
['wrapped.isShutdown']
['wrapped.isTerminated']
['wrapped.awaitTermination']
[None]
[None]
['wrapped.execute']
['chain.add', 'resource.hasParent', 'resource.getParent']
['name.startsWith', 'RoleResource.root', '.', 'RoleResource.fromName', 'name.startsWith', 'DataResource.root', '.', 'DataResource.fromName', 'name.startsWith', 'FunctionResource.root', '.', 'FunctionResource.fromName', 'String.format']
['buff.append', 'buff.append', 'Hex.bytesToHex', 'buff.append', 'buff.toString']
['Integer.compare', 'column.position', 'otherColumn.position', 'column.name.bytes.compareTo']
['restrictions.values', 'restriction.addRowFilterTo']
['restrictions.keySet']
['restriction.getFunctions', 'Iterables.concat', 'Iterables.transform', 'restrictions.values']
['restriction.getFunctions']
['restrictions.isEmpty']
['restrictions.size']
['mergeRestrictions']
['restrictions.get', 'set.add']
['restrictions.values', 'restriction.hasSupportingIndex']
['restrictions.tailMap', '.']
['isEmpty', '.']
['isEmpty', '.']
['isEmpty', '.', '.']
['restriction.mergeWith']
['restrictions.values', 'restriction.isContains', 'contains.numberOfValues', 'contains.numberOfKeys', 'contains.numberOfEntries']
['.', 'restrictions.values']
['parser.getTypeParameters', 'types.size', 'types.size', 'getInstance', 'types.get']
['instances.get', 'instances.put']
['baseType.isEmptyValueMeaningless']
['o1.remaining', 'o2.remaining', 'o2.remaining', 'baseType.compare']
['baseType.compare']
['baseType.getString']
['baseType.fromString']
['baseType.fromJSONObject']
['baseType.toJSONString']
['.']
['.']
['baseType.asCQL3Type']
['baseType.getSerializer']
['baseType.references']
['baseType.valueLengthIfFixed']
[None]
['getClass', '.']
['DatabaseDescriptor.getAuthorizer', '.', 'state.getUser']
['ServerSocketFactory.getDefault', '.', 'InetAddress.getLoopbackAddress']
['obj.getClass', '.', 'getClass']
['.']
['options.containsKey', 'String.format', 'option.name', 'options.put']
['options.isEmpty']
[None]
['Optional.fromNullable', 'options.get']
['Optional.fromNullable', 'options.get']
['Optional.fromNullable', 'options.get']
['Optional.fromNullable', 'options.get']
['options.entrySet', 'DatabaseDescriptor.getRoleManager', '.', '.', 'option.getKey', 'String.format', 'DatabaseDescriptor.getRoleManager', '.', '.', 'option.getKey', 'option.getKey', 'option.getValue', 'String.format', 'option.getKey', 'option.getValue', 'String.format', 'option.getKey', 'option.getValue', 'String.format', 'option.getKey']
['FBUtilities.toString']
[None]
[None]
['StringUtils.split', '.', 'String.format', 'root', 'role']
['String.format']
['String.format']
['root']
[None]
['DatabaseDescriptor.getRoleManager', '.']
[None]
['.']
['String.format']
['Objects.equal', 'Objects.equal']
['Objects.hashCode']
['cache.getRoles']
['DatabaseDescriptor.getRoleManager', 'cache.getRoles', 'roleManager.isSuper']
['CFMetaData.Builder.create', '.', '.', '.', '.', 'SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple']
['FBUtilities.nowInSeconds', 'Util.dk', 'Keyspace.open', '.', 'cfm.getColumnDefinition']
['createRowIterator', 'createMergeIterator', 'Collections.emptyIterator', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['toMillis', 'createRangeTombstoneIterator', 'rt', 'atLeast', 'createMergeIterator', 'Collections.emptyIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'atMost', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'greaterThan', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'atMost', 'greaterThan', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['assertEquals', 'unfiltered.kind', 'assertEquals', 'unfiltered.clustering', '.', 'assertEquals', 'bb', 'unfiltered.clustering', '.']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'atMost', 'greaterThan', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'lessThan', 'atLeast', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'createRangeTombstoneIterator', 'atMost', 'createMergeIterator', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRtMarker', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertTrue', 'iterator.hasNext', 'assertRow', 'iterator.next', 'assertFalse', 'iterator.hasNext']
['createRowIterator', 'toMillis', 'createRangeTombstoneIterator', 'atMost', 'greaterThan', 'toMillis', 'createMergeIterator', 'assertFalse', 'iterator.hasNext']
['assertEquals', 'unfiltered.kind', 'assertEquals', 'unfiltered.clustering']
['assertEquals', 'unfiltered.kind', 'assertEquals', 'cfm.comparator.make', 'unfiltered.clustering']
['list.add', 'list.iterator']
['cfm.partitionColumns', 'addRow', 'update.iterator']
['createMergeIterator']
['Util.dk', 'ColumnFilter.all']
['update.add', 'BTreeRow.singleCellRow', 'update.metadata', '.', 'makeCell']
['BufferCell.live', 'columnDefinition.cellValueType']
['Slice.make', 'Slice.Bound.inclusiveStartOf', 'bb']
['Slice.make', 'Slice.Bound.inclusiveEndOf', 'bb']
['Slice.make', 'Slice.Bound.exclusiveEndOf', 'bb']
['Slice.make', 'Slice.Bound.exclusiveStartOf', 'bb']
['Slice.Bound.inclusiveStartOf', 'bb', 'Slice.Bound.exclusiveStartOf', 'bb', 'Slice.Bound.inclusiveEndOf', 'bb', 'Slice.Bound.exclusiveEndOf', 'bb', 'Slice.make']
['ByteBufferUtil.bytes']
[None]
['CacheService.instance.setRowCacheCapacityInMB', 'createTable', 'execute', 'assertEmpty', 'execute', 'execute', 'assertEquals', 'res.size', 'assertEmpty', 'execute']
['ObjectSizes.sizeOfArray']
['getClass', 'o.getClass', 'ksAndCFName.equals', 'Arrays.equals']
['ksAndCFName.hashCode', 'Arrays.hashCode']
['String.format', 'Arrays.toString']
[None]
['calculateNewSize', 'capacity', 'length', 'buffer.order', '.', 'tailBuffer', 'tailOffset', 'buffer.position', 'buffer.order', 'oldBuffer.free']
['reallocate']
['memory.close']
['memory.close']
['tailOffset', 'buffer.position']
['memory.size']
[None]
[None]
['Math.max']
['memory.asByteBuffer', 'tailOffset', 'Math.min']
['ThreadLocalRandom.current', 'range', 'range', 'random.nextDouble', 'random.nextInt', 'random.nextBytes', 'random.nextInt', 'random.nextInt', 'System.arraycopy', 'Math.min', 'lz4Compressor.compress', 'Snappy.compress']
['spec.split', 'Integer.parseInt', 'Integer.parseInt']
['ThreadLocalRandom.current', '.', 'lz4Decompressor.decompress']
['ThreadLocalRandom.current', '.', 'Snappy.uncompress']
['clustering.next', 'operations.sample']
['operations.getPmf', 'op.getFirst', '.']
['operations.getPmf', 'op.getFirst', '.']
['Math.min', 'rnd.nextDouble', 'Arrays.copyOf', 'Arrays.sort']
[None]
[None]
['SYSTEM_KEYSPACE_NAMES.contains', 'keyspaceName.toLowerCase']
['loadFromDisk']
['load', 'SchemaKeyspace.fetchNonSystemKeyspaces', 'updateVersion']
['keyspaceDefs.forEach']
['keyspaceDef.tables.forEach', 'keyspaceDef.views.forEach', 'setKeyspaceMetadata']
['keyspaceInstances.get']
['cfIdMap.inverse', '.', 'getKeyspaceInstance', 'instance.getColumnFamilyStore']
['keyspaceInstances.containsKey', 'keyspace.getName', 'String.format', 'keyspace.getName', 'keyspaceInstances.put', 'keyspace.getName']
['keyspaceInstances.remove']
['keyspaces.remove']
['keyspaces.get', 'ksm.getTableOrViewNullable']
['getCF', 'getCFMetaData']
['getCFMetaData']
['keyspaces.get', 'ksm.views.getNullable']
['keyspaces.get']
['ImmutableList.copyOf', 'Sets.difference', 'keyspaces.keySet']
['keyspaces.get', 'ksm.tablesAndViews']
['keyspaces.keySet']
['Keyspaces.builder', 'keyspaces.values', '.', '.', 'includedKeyspaceNames.contains', '.', 'builder.build']
['keyspaces.put', 'getKeyspaceInstance', 'keyspace.setMetadata']
['cfIdMap.inverse', '.']
['cfIdMap.containsKey']
['cfIdMap.get', 'Pair.create']
['Pair.create', 'cfIdMap.containsKey', 'String.format', 'logger.debug', 'cfIdMap.put']
['Pair.create', 'cfIdMap.containsKey', 'String.format', 'logger.debug', 'cfIdMap.put']
['cfIdMap.remove', 'Pair.create']
['cfIdMap.remove', 'Pair.create']
['name.hasKeyspace', 'String.format', 'getKSMetaData', 'Collections.emptyList', 'ksm.functions.get']
['name.hasKeyspace', 'String.format', 'getKSMetaData', 'Optional.empty', 'ksm.functions.find']
[None]
['SchemaKeyspace.calculateSchemaDigest', 'SystemKeyspace.updateSchemaVersion']
['updateVersion', 'MigrationManager.passiveAnnounce']
['getNonSystemKeyspaces', 'getKSMetaData', 'ksm.tables.forEach', 'ksm.views.forEach', 'clearKeyspaceMetadata', 'updateVersionAndAnnounce']
['getKSMetaData', 'load', 'Keyspace.open', 'MigrationManager.instance.notifyCreateKeyspace']
['update', 'ks.withSwapped', 'MigrationManager.instance.notifyUpdateKeyspace']
['Schema.instance.getKSMetaData', 'Keyspace.getTimestampedSnapshotName', 'CompactionManager.instance.interruptCompactionFor', 'ksm.tablesAndViews', 'Keyspace.open', 'ksm.tablesAndViews', 'keyspace.getColumnFamilyStore', 'unload', 'DatabaseDescriptor.isAutoSnapshot', 'cfs.snapshot', 'Keyspace.open', '.', 'droppedCfs.add', 'Keyspace.clear', 'clearKeyspaceMetadata', 'Keyspace.writeOrder.awaitNewBarrier', 'CommitLog.instance.forceRecycleAllSegments', 'MigrationManager.instance.notifyDropKeyspace']
['getCFMetaData', 'Keyspace.open', '.', 'update', 'ks.withSwapped', 'ks.tables.with', 'load', 'Keyspace.open', '.', 'MigrationManager.instance.notifyCreateColumnFamily']
['getCFMetaData', 'current.apply', 'Keyspace.open', 'keyspace.getColumnFamilyStore', '.', 'MigrationManager.instance.notifyUpdateColumnFamily']
['getKSMetaData', 'Keyspace.open', '.', 'cfs.indexManager.markAllIndexesRemoved', 'oldKsm.tables.get', '.', 'oldKsm.withSwapped', 'oldKsm.tables.without', 'unload', 'setKeyspaceMetadata', 'CompactionManager.instance.interruptCompactionFor', 'Collections.singleton', 'DatabaseDescriptor.isAutoSnapshot', 'cfs.snapshot', 'Keyspace.getTimestampedSnapshotName', 'Keyspace.open', '.', 'MigrationManager.instance.notifyDropColumnFamily', 'CommitLog.instance.forceRecycleAllSegments', 'Collections.singleton']
['getCFMetaData', 'Keyspace.open', 'keyspace.initCf', 'update', 'ks.withSwapped', 'ks.views.with', 'load', 'keyspace.viewManager.reload', 'MigrationManager.instance.notifyCreateView']
['getKSMetaData', '.', '.', 'current.metadata.apply', 'Keyspace.open', 'keyspace.getColumnFamilyStore', '.', 'Keyspace.open', '.', 'MigrationManager.instance.notifyUpdateView']
['getKSMetaData', 'Keyspace.open', '.', 'cfs.indexManager.markAllIndexesRemoved', 'oldKsm.views.get', '.', 'oldKsm.withSwapped', 'oldKsm.views.without', 'unload', 'setKeyspaceMetadata', 'CompactionManager.instance.interruptCompactionFor', 'Collections.singleton', 'DatabaseDescriptor.isAutoSnapshot', 'cfs.snapshot', 'Keyspace.getTimestampedSnapshotName', 'Keyspace.open', '.', 'Keyspace.open', '.', 'MigrationManager.instance.notifyDropView', 'CommitLog.instance.forceRecycleAllSegments', 'Collections.singleton']
['update', 'ks.withSwapped', 'ks.types.with', 'MigrationManager.instance.notifyCreateUserType']
['update', 'ks.withSwapped', 'ks.types.without', '.', 'MigrationManager.instance.notifyUpdateUserType']
['update', 'ks.withSwapped', 'ks.types.without', 'MigrationManager.instance.notifyDropUserType']
['update', 'udf.name', 'ks.withSwapped', 'ks.functions.with', 'MigrationManager.instance.notifyCreateFunction']
['update', 'udf.name', 'ks.withSwapped', 'ks.functions.without', '.', 'udf.name', 'udf.argTypes', 'MigrationManager.instance.notifyUpdateFunction']
['update', 'udf.name', 'ks.withSwapped', 'ks.functions.without', 'udf.name', 'udf.argTypes', 'MigrationManager.instance.notifyDropFunction']
['update', 'uda.name', 'ks.withSwapped', 'ks.functions.with', 'MigrationManager.instance.notifyCreateAggregate']
['update', 'uda.name', 'ks.withSwapped', 'ks.functions.without', '.', 'uda.name', 'uda.argTypes', 'MigrationManager.instance.notifyUpdateAggregate']
['update', 'uda.name', 'ks.withSwapped', 'ks.functions.without', 'uda.name', 'uda.argTypes', 'MigrationManager.instance.notifyDropAggregate']
['getKSMetaData', 'String.format', 'transformation.apply', 'setKeyspaceMetadata']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
['partitions.size', 'iterator.hasNext', 'stmts.add', 'bindRow', 'iterator.next', 'stmts.size', 'stmts.size', 'stmts.subList', 'Math.min', 'stmts.size', 'stmts.size', 'substmts.get', 'batch.setConsistencyLevel', 'JavaDriverClient.from', 'batch.addAll', 'client.getSession', '.']
['iterator.hasNext', 'client.execute_prepared_cql3_query', 'iterator.getToken', 'thriftRowArgs', 'iterator.next']
['timeWithRetry']
[None]
['timeWithRetry']
['CFMetaData.compile', '.', '.', 'TimeUnit.DAYS.toSeconds', 'String.format']
['KeyspaceMetadata.create', 'KeyspaceParams.local', 'org.apache.cassandra.schema.Tables.of']
['Schema.instance.getKSMetaData', 'Schema.instance.getKSMetaData', 'FBUtilities.timestampMicros', 'String.format', 'executeOnceInternal', 'makeCreateKeyspaceMutation', '.', 'makeCreateKeyspaceMutation', '.']
['ALL.forEach', 'getSchemaCFS', '.']
['Boolean.getBoolean', 'ALL.forEach', 'FBUtilities.waitOnFuture', 'getSchemaCFS', '.']
['MessageDigest.getInstance', 'getReadCommandForTableSchema', 'cmd.executionController', 'cmd.executeInternal', 'schema.hasNext', 'schema.next', 'isSystemKeyspaceSchemaPartition', 'partition.partitionKey', 'RowIterators.digest', 'UUID.nameUUIDFromBytes', 'digest.digest']
['Keyspace.open', '.']
['getSchemaCFS', 'PartitionRangeReadCommand.allDataRead', 'FBUtilities.nowInSeconds']
['convertSchemaToMutations', 'mutationMap.values']
['getReadCommandForTableSchema', 'cmd.executionController', 'cmd.executeLocally', 'iter.hasNext', 'iter.next', 'isSystemKeyspaceSchemaPartition', 'partition.partitionKey', 'partition.partitionKey', 'mutationMap.get', 'mutationMap.put', 'mutation.add', 'PartitionUpdate.fromIterator']
['AsciiType.instance.fromString']
['Schema.isSystemKeyspace', 'UTF8Type.instance.compose', 'partitionKey.getKey']
['.', 'adder.add', '.', 'KeyspaceParams.Option.REPLICATION.toString', 'params.replication.asMap', '.', 'KeyspaceParams.Option.DURABLE_WRITES.toString']
['makeCreateKeyspaceMutation', 'keyspace.tables.forEach', 'addTableToSchemaMutation', 'keyspace.views.forEach', 'addViewToSchemaMutation', 'keyspace.types.forEach', 'addTypeToSchemaMutation', 'keyspace.functions.udfs', '.', 'addFunctionToSchemaMutation', 'keyspace.functions.udas', '.', 'addAggregateToSchemaMutation']
['FBUtilities.nowInSeconds', 'Keyspaces.decorateKey', 'getSchemaKSKey', 'mutation.add', 'PartitionUpdate.fullPartitionDelete', 'mutation.key']
['makeCreateKeyspaceMutation', 'addTypeToSchemaMutation']
['.', 'type.getNameAsString', '.', 'type.fieldNames', '.', '.', '.', 'toList', '.', 'type.fieldTypes', '.', '.', '.', '.', 'toList', 'adder.build']
['ByteBufferUtil.string']
['makeCreateKeyspaceMutation', 'RowUpdateBuilder.deleteRow']
['makeCreateKeyspaceMutation', 'addTableToSchemaMutation']
['.', 'addTableParamsToSchemaMutation', 'adder.add', '.', 'CFMetaData.flagsToStrings', 'table.flags', '.', 'table.allColumns', 'addColumnToSchemaMutation', 'table.getDroppedColumns', '.', 'addDroppedColumnToSchemaMutation', 'table.getTriggers', 'addTriggerToSchemaMutation', 'table.getIndexes', 'addIndexToSchemaMutation']
['adder.add', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'params.speculativeRetry.toString', '.', '.', 'params.caching.asMap', '.', 'params.compaction.asMap', '.', 'params.compression.asMap', '.']
['makeCreateKeyspaceMutation', 'addTableToSchemaMutation', 'Maps.difference', 'oldTable.getColumnMetadata', 'newTable.getColumnMetadata', 'columnDiff.entriesOnlyOnLeft', '.', 'newTable.isStaticCompactTable', 'dropColumnFromSchemaMutation', 'columnDiff.entriesOnlyOnRight', '.', 'addColumnToSchemaMutation', 'columnDiff.entriesDiffering', '.', 'addColumnToSchemaMutation', 'newTable.getColumnDefinition', 'Maps.difference', 'oldTable.getDroppedColumns', 'newTable.getDroppedColumns', 'droppedColumnDiff.entriesOnlyOnRight', '.', 'addDroppedColumnToSchemaMutation', 'droppedColumnDiff.entriesDiffering', '.', 'addDroppedColumnToSchemaMutation', 'newTable.getDroppedColumns', '.', 'triggersDiff', 'oldTable.getTriggers', 'newTable.getTriggers', 'triggerDiff.entriesOnlyOnLeft', '.', 'dropTriggerFromSchemaMutation', 'triggerDiff.entriesOnlyOnRight', '.', 'addTriggerToSchemaMutation', 'indexesDiff', 'oldTable.getIndexes', 'newTable.getIndexes', 'indexesDiff.entriesOnlyOnLeft', '.', 'dropIndexFromSchemaMutation', 'indexesDiff.entriesOnlyOnRight', '.', 'addIndexToSchemaMutation', 'indexesDiff.entriesDiffering', '.', 'addUpdatedIndexToSchemaMutation', 'diff.rightValue']
['before.forEach', 'beforeMap.put', 'after.forEach', 'afterMap.put', 'Maps.difference']
['before.forEach', 'beforeMap.put', 'after.forEach', 'afterMap.put', 'Maps.difference']
['makeCreateKeyspaceMutation', 'RowUpdateBuilder.deleteRow', 'table.allColumns', 'dropColumnFromSchemaMutation', 'table.getTriggers', 'dropTriggerFromSchemaMutation', 'table.getIndexes', 'dropIndexFromSchemaMutation']
['.', 'column.name.toString', 'adder.add', '.', 'column.kind.toString', '.', '.', 'column.position', '.', 'column.clusteringOrder', '.', '.', '.', 'type.asCQL3Type', '.', '.']
['RowUpdateBuilder.deleteRow', 'column.name.toString']
['.', 'adder.add', '.', 'expandUserTypes', '.', '.', '.', 'TimeUnit.MICROSECONDS.toMillis']
['.', '.', 'Collections.singletonMap', '.']
['RowUpdateBuilder.deleteRow']
['makeCreateKeyspaceMutation', 'addViewToSchemaMutation']
['.', 'builder.add', '.', '.', 'view.baseTableMetadata', '.', '.', 'addTableParamsToSchemaMutation', 'table.allColumns', 'addColumnToSchemaMutation', 'table.getDroppedColumns', '.', 'addDroppedColumnToSchemaMutation', 'builder.build']
['makeCreateKeyspaceMutation', 'RowUpdateBuilder.deleteRow', 'table.allColumns', 'dropColumnFromSchemaMutation', 'table.getIndexes', 'dropIndexFromSchemaMutation']
['makeCreateKeyspaceMutation', 'addViewToSchemaMutation', 'Maps.difference', 'oldView.metadata.getColumnMetadata', 'newView.metadata.getColumnMetadata', 'columnDiff.entriesOnlyOnLeft', '.', 'dropColumnFromSchemaMutation', 'columnDiff.entriesOnlyOnRight', '.', 'addColumnToSchemaMutation', 'columnDiff.entriesDiffering', '.', 'addColumnToSchemaMutation', 'newView.metadata.getColumnDefinition', 'Maps.difference', 'oldView.metadata.getDroppedColumns', 'oldView.metadata.getDroppedColumns', 'droppedColumnDiff.entriesOnlyOnRight', '.', 'addDroppedColumnToSchemaMutation', 'droppedColumnDiff.entriesDiffering', '.', 'addDroppedColumnToSchemaMutation', 'newView.metadata.getDroppedColumns', '.']
['.', 'builder.add', 'index.kind.toString', 'builder.frozenMap', 'builder.build']
['RowUpdateBuilder.deleteRow']
['addIndexToSchemaMutation']
['makeCreateKeyspaceMutation', 'addFunctionToSchemaMutation']
['.', 'function.name', 'functionArgumentsList', 'adder.add', '.', 'function.language', '.', 'function.returnType', '.', '.', '.', 'function.isCalledOnNullInput', '.', 'function.argNames', '.', '.', 'bbToString', '.', 'toList', 'function.body', 'adder.build']
['fun.argTypes', '.', '.', '.', '.', 'toList']
['makeCreateKeyspaceMutation', 'RowUpdateBuilder.deleteRow', 'function.name', 'functionArgumentsList']
['makeCreateKeyspaceMutation', 'addAggregateToSchemaMutation']
['.', 'aggregate.name', 'functionArgumentsList', 'aggregate.stateType', '.', 'adder.add', '.', 'aggregate.stateFunction', '.', '.', 'aggregate.stateType', 'stateCqlType.toString', '.', 'aggregate.finalFunction', 'aggregate.finalFunction', '.', '.', 'aggregate.initialCondition', 'stateCqlType.asCQLLiteral', 'aggregate.initialCondition', '.', 'aggregate.returnType', '.', '.']
['makeCreateKeyspaceMutation', 'RowUpdateBuilder.deleteRow', 'aggregate.name', 'functionArgumentsList']
['fetchKeyspacesWithout']
['format', 'org.apache.cassandra.schema.Keyspaces.builder', 'query', 'row.getString', 'excludedKeyspaceNames.contains', 'keyspaces.add', 'fetchKeyspace', 'keyspaces.build']
['format', 'org.apache.cassandra.schema.Keyspaces.builder', 'query', 'keyspaces.add', 'fetchKeyspace', 'row.getString', 'keyspaces.build']
['fetchKeyspaceParams', 'fetchTypes', 'fetchTables', 'fetchViews', 'fetchFunctions', 'KeyspaceMetadata.create']
['format', 'query', '.', 'row.getBoolean', 'KeyspaceParams.Option.DURABLE_WRITES.toString', 'row.getFrozenTextMap', 'KeyspaceParams.Option.REPLICATION.toString', 'KeyspaceParams.create']
['format', 'org.apache.cassandra.schema.Types.rawBuilder', 'query', 'row.getString', 'row.getFrozenList', 'row.getFrozenList', 'types.add', 'types.build']
['format', 'org.apache.cassandra.schema.Tables.builder', 'query', 'tables.add', 'fetchTable', 'row.getString', 'tables.build']
['String.format', 'query', 'rows.isEmpty', 'String.format', 'rows.one', 'row.getUUID', 'CFMetaData.flagsFromStrings', 'row.getFrozenSet', 'flags.contains', 'flags.contains', 'flags.contains', 'flags.contains', 'fetchColumns', 'fetchDroppedColumns', 'fetchIndexes', 'fetchTriggers', 'CFMetaData.create', '.', 'createTableParamsFromRow', '.', '.', '.', 'DatabaseDescriptor.getPartitioner']
['TableParams.builder', '.', 'row.getDouble', '.', 'CachingParams.fromMap', 'row.getFrozenTextMap', '.', 'row.getString', '.', 'CompactionParams.fromMap', 'row.getFrozenTextMap', '.', 'CompressionParams.fromMap', 'row.getFrozenTextMap', '.', 'row.getDouble', '.', 'row.getInt', '.', 'row.getFrozenMap', '.', 'row.getInt', '.', 'row.getInt', '.', 'row.getInt', '.', 'row.getInt', '.', 'row.getDouble', '.', 'row.getDouble', '.', 'SpeculativeRetryParam.fromString', 'row.getString', '.']
['format', 'query', '.', 'columns.add', 'createColumnFromRow']
['row.getString', 'row.getString', 'ColumnIdentifier.getInterned', 'row.getBytes', 'row.getString', 'ColumnDefinition.Kind.valueOf', 'row.getString', '.', 'row.getInt', 'ClusteringOrder.valueOf', 'row.getString', '.', 'parse', 'row.getString', 'ReversedType.getInstance']
['format', 'query', 'createDroppedColumnFromRow', 'columns.put', 'UTF8Type.instance.decompose']
['row.getString', 'row.getString', 'parse', 'row.getString', 'org.apache.cassandra.schema.Types.none', 'TimeUnit.MILLISECONDS.toMicros', 'row.getLong']
['String.format', 'org.apache.cassandra.schema.Indexes.builder', 'query', '.', 'indexes.add', 'createIndexMetadataFromRow', 'indexes.build']
['row.getString', 'IndexMetadata.Kind.valueOf', 'row.getString', 'row.getFrozenTextMap', 'IndexMetadata.fromSchemaMetadata']
['String.format', 'org.apache.cassandra.schema.Triggers.builder', 'query', '.', 'triggers.add', 'createTriggerFromRow', 'triggers.build']
['row.getString', 'row.getFrozenTextMap', '.']
['format', 'org.apache.cassandra.schema.Views.builder', 'query', 'views.add', 'fetchView', 'row.getString', 'views.build']
['String.format', 'query', 'rows.isEmpty', 'String.format', 'rows.one', 'row.getUUID', 'row.getUUID', 'row.getString', 'row.getBoolean', 'row.getString', 'fetchColumns', 'fetchDroppedColumns', 'CFMetaData.create', '.', 'createTableParamsFromRow', '.', 'DatabaseDescriptor.getPartitioner', 'View.buildSelectStatement', 'QueryProcessor.parseStatement']
['fetchUDFs', 'fetchUDAs', 'org.apache.cassandra.schema.Functions.builder', '.', '.', '.']
['format', 'org.apache.cassandra.schema.Functions.builder', 'query', 'functions.add', 'createUDFFromRow', 'functions.build']
['format', 'org.apache.cassandra.schema.Functions.builder', 'query', 'aggregates.add', 'createUDAFromRow', 'aggregates.build']
['row.getString', 'row.getString', 'row.getFrozenList', '.', '.', 'parse', '.', 'toList', 'parse', 'row.getString', 'row.getString', 'row.has', 'row.getString', 'row.has', 'parse', 'row.getString', 'row.has', 'Terms.asBytes', 'row.getString', 'UDAggregate.create', 'UDAggregate.createBroken']
['executeInternal']
['mergeSchema', 'Schema.instance.updateVersionAndAnnounce']
['mutations.stream', '.', 'UTF8Type.instance.compose', 'm.key', '.', '.', 'Collectors.toSet', 'Schema.instance.getKeyspaces', 'mutations.forEach', 'flush', 'fetchKeyspacesOnly', 'before.diff', 'keyspacesDiff.entriesOnlyOnLeft', '.', 'keyspace.functions.udas', '.', 'keyspace.functions.udfs', '.', 'keyspace.views.forEach', 'Schema.instance.dropView', 'keyspace.tables.forEach', 'Schema.instance.dropTable', 'keyspace.types.forEach', 'Schema.instance.dropKeyspace', 'keyspacesDiff.entriesOnlyOnRight', '.', 'Schema.instance.addKeyspace', 'KeyspaceMetadata.create', 'keyspace.types.forEach', 'keyspace.tables.forEach', 'keyspace.views.forEach', 'keyspace.functions.udfs', '.', 'keyspace.functions.udas', '.', 'keyspacesDiff.entriesDiffering', '.', 'updateKeyspace', 'diff.getKey', 'diff.getValue', '.', 'diff.getValue', '.']
['keyspaceBefore.tables.diff', 'keyspaceBefore.views.diff', 'keyspaceBefore.types.diff', 'keyspaceBefore.functions.udfs', '.', 'udfsBefore.put', 'Pair.create', 'f.name', 'functionArgumentsList', 'keyspaceAfter.functions.udfs', '.', 'udfsAfter.put', 'Pair.create', 'f.name', 'functionArgumentsList', 'Maps.difference', 'keyspaceBefore.functions.udas', '.', 'udasBefore.put', 'Pair.create', 'f.name', 'functionArgumentsList', 'keyspaceAfter.functions.udas', '.', 'udasAfter.put', 'Pair.create', 'f.name', 'functionArgumentsList', 'Maps.difference', 'keyspaceBefore.params.equals', 'Schema.instance.updateKeyspace', 'udasDiff.entriesOnlyOnLeft', '.', '.', 'udfsDiff.entriesOnlyOnLeft', '.', '.', 'viewsDiff.entriesOnlyOnLeft', '.', '.', 'Schema.instance.dropView', 'tablesDiff.entriesOnlyOnLeft', '.', '.', 'Schema.instance.dropTable', 'typesDiff.entriesOnlyOnLeft', '.', '.', 'typesDiff.entriesOnlyOnRight', '.', '.', 'tablesDiff.entriesOnlyOnRight', '.', '.', 'viewsDiff.entriesOnlyOnRight', '.', '.', 'udfsDiff.entriesOnlyOnRight', '.', '.', 'udasDiff.entriesOnlyOnRight', '.', '.', 'typesDiff.entriesDiffering', '.', 'Schema.instance.updateType', 'diff.rightValue', 'tablesDiff.entriesDiffering', '.', 'Schema.instance.updateTable', 'diff.rightValue', 'viewsDiff.entriesDiffering', '.', 'Schema.instance.updateView', 'diff.rightValue', 'udfsDiff.entriesDiffering', '.', 'Schema.instance.updateFunction', 'diff.rightValue', 'udasDiff.entriesDiffering', '.', 'Schema.instance.updateAggregate', 'diff.rightValue']
['expandUserTypes', 'expandUserTypes', 'ListType.getInstance', 'expandUserTypes', 'original.isMultiCell', 'MapType.getInstance', 'expandUserTypes', 'mt.getKeysType', 'expandUserTypes', 'mt.getValuesType', 'mt.isMultiCell', 'SetType.getInstance', 'expandUserTypes', 'original.isMultiCell', 'ReversedType.getInstance', 'expandUserTypes', 'CompositeType.getInstance', 'expandUserTypes', 'original.getComponents']
['types.stream', '.', '.', 'toList']
['r1.partitionKey', '.', 'r2.partitionKey']
['UnfilteredRowIterators.withValidation']
['outputHandler.output', 'String.format', 'dataFile.length', 'indexAvailable', 'ByteBufferUtil.readWithShortLength', 'indexAvailable', 'rowIndexEntrySerializer.deserialize', 'writer.switchWriter', 'CompactionManager.createWriter', 'sstable.getSSTableMetadata', 'dataFile.isEOF', 'scrubInfo.isStopRequested', 'scrubInfo.getCompactionInfo', 'dataFile.getFilePointer', 'outputHandler.debug', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'throwIfFatal', 'updateIndexKey', 'dataFile.getFilePointer', 'currentIndexKey.remaining', 'ByteBufferUtil.bytesToHex', 'key.getKey', 'outputHandler.debug', 'String.format', 'indexAvailable', 'key.getKey', '.', 'String.format', 'ByteBufferUtil.bytesToHex', 'dataFile.length', 'outputHandler.warn', 'String.format', 'withValidation', 'dataFile.getPath', 'prevKey.compareTo', 'saveOutOfOrderRow', 'writer.tryAppend', 'throwIfFatal', 'outputHandler.warn', 'key.getKey', '.', 'outputHandler.output', 'String.format', 'sstable.decorateKey', 'dataFile.seek', 'withValidation', 'dataFile.getPath', 'prevKey.compareTo', 'saveOutOfOrderRow', 'writer.tryAppend', 'throwIfFatal', 'throwIfCannotContinue', 'outputHandler.warn', 'seekToNextRow', 'throwIfCannotContinue', 'outputHandler.warn', 'seekToNextRow', 'outOfOrder.isEmpty', 'sstable.getSSTableMetadata', 'CompactionManager.createWriter', 'inOrderWriter.append', 'partition.unfilteredIterator', 'inOrderWriter.finish', 'transaction.update', 'finished.add', 'outputHandler.warn', 'String.format', 'outOfOrder.size', 'finished.addAll', 'writer.setRepairedAt', '.', 'sstable.getSSTableMetadata', 'Throwables.propagate', 'transaction.isOffline', 'finished.forEach', 'sstable.selfRef', '.', 'outputHandler.warn', 'outputHandler.output', 'outputHandler.output', 'outputHandler.warn']
['indexAvailable', 'ByteBufferUtil.readWithShortLength', 'indexAvailable', 'dataFile.length', 'rowIndexEntrySerializer.deserialize', 'JVMStabilityInspector.inspectThrowable', 'outputHandler.warn', 'dataFile.length']
['indexFile.isEOF']
['dataFile.length', 'dataFile.seek', 'throwIfFatal', 'outputHandler.warn', 'String.format', 'updateIndexKey']
['outputHandler.warn', 'String.format', 'outOfOrder.add', 'ImmutableBTreePartition.create']
[None]
['outputHandler.warn', 'String.format', 'outputHandler.warn', 'String.format']
['FileUtils.closeQuietly', 'FileUtils.closeQuietly']
[None]
['dataFile.getFilePointer', 'dataFile.length']
['scrub']
['assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize', 'assertEquals', 'SegmentedFile.Builder.roundBufferSize']
['DatabaseDescriptor.setDiskOptimizationStrategy', 'DatabaseDescriptor.setDiskOptimizationPageCrossChance', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'DatabaseDescriptor.setDiskOptimizationPageCrossChance', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize']
['DatabaseDescriptor.setDiskOptimizationStrategy', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize', 'assertEquals', 'SegmentedFile.Builder.bufferSize']
['createTable', 'createIndex', 'createIndex', 'createIndex', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'list', 'assertInvalidMessage', 'map']
['createTable', 'createIndex', 'execute', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'set', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'execute', 'testSelectQueriesWithClusteringColumnRelations']
['createTable', 'execute', 'execute', 'execute', 'execute', 'testSelectQueriesWithClusteringColumnRelations']
['assertRows', 'execute', 'row', 'row', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'Arrays.asList', 'Arrays.asList', 'row', 'row', 'assertInvalidMessage', 'Arrays.asList', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'assertEmpty', 'execute', 'assertInvalidMessage', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'row', 'row', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row']
['createTable', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertInvalidMessage', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertInvalid', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'createIndex', 'createIndex', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'execute', 'assertRows', 'execute', 'row', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertInvalidMessage']
['createTable', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertEmpty', 'execute', 'assertEmpty', 'execute', 'assertInvalidMessage']
['createTable', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'assertInvalidMessage', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'assertEmpty', 'execute', 'assertEmpty', 'execute']
['createTable', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'inValues.add', 'assertRows', 'execute', 'row']
['createTable', 'createIndex', 'createIndex', 'execute', 'execute', 'execute', 'execute', 'execute', 'execute', 'execute', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'row', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'assertInvalidMessage', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'row', 'row', 'assertInvalidMessage', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset']
['createTable', 'createIndex', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset']
['createTable', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage']
['createTable', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage']
['completedTasks.incrementAndGet']
['pool.spinningCount.get', 'takeWorkPermit', 'pool.schedule']
['tasks.add', 'permits.get', 'taskPermits', 'permits.compareAndSet', 'updateTaskPermits', 'pool.maybeStartSpinningWorker', 'hasRoom.register', 'taskPermits', 'permits.get', 'takeWorkPermit', 'pool.schedule', 'metrics.totalBlocked.inc', 'metrics.currentBlocked.inc', 's.awaitUninterruptibly', 'metrics.currentBlocked.dec', 's.cancel']
['permits.get', 'taskPermits', 'permits.compareAndSet', 'updateTaskPermits', 'hasRoom.hasWaiters', 'hasRoom.signalAll']
['permits.get', 'workPermits', 'taskPermits', 'permits.compareAndSet', 'combine', 'hasRoom.hasWaiters', 'hasRoom.signalAll']
['permits.get', 'workPermits', 'permits.compareAndSet', 'updateWorkPermits']
['newTaskFor', 'takeWorkPermit', 'addTask', 'ft.run', 'returnWorkPermit', 'maybeSchedule']
['pool.executors.remove', 'getActiveCount', 'shutdown.signalAll', 'metrics.release']
['shutdown', 'takeTaskPermit', 'aborted.add', 'tasks.poll']
[None]
['shutdown.isSignaled']
['shutdown.await', 'isTerminated']
['taskPermits', 'permits.get']
['completedTasks.get']
['workPermits', 'permits.get']
[None]
[None]
[None]
[None]
[None]
['isSpinning', 'selfAssign', 'doWaitSpin', 'stop', 'isStopped', 'LockSupport.park', 'get', 'assigned.tasks.poll', 'set', 'assigned.maybeSchedule', 'task.run', 'assigned.takeTaskPermit', 'assigned.tasks.poll', 'assigned.returnWorkPermit', 'assigned.getActiveCount', 'assigned.shutdown.signalAll', 'selfAssign', 'startSpinning', 'JVMStabilityInspector.inspectThrowable', 'get', 'get', 'set', 'assign', 'assigned.returnWorkPermit', 'logger.error', 'logger.error']
['get', 'state.canAssign', 'compareAndSet', 'get', 'state.isSpinning', 'stopSpinning', 'work.isStop', 'pool.descheduled.put', 'state.isStopped', 'work.isStop', 'stop', 'LockSupport.unpark']
['get', '.', 'exec.takeWorkPermit', 'assign', 'pool.schedule', 'get']
['get', 'pool.spinningCount.incrementAndGet', 'set']
['pool.spinningCount.decrementAndGet', 'executor.maybeSchedule']
['pool.spinningCount.get', 'Math.min', 'Math.random', 'Math.max', 'System.nanoTime', 'pool.spinning.putIfAbsent', 'LockSupport.parkNanos', 'pool.spinning.remove', 'System.nanoTime', 'pool.stopCheck.addAndGet', 'maybeStop']
['pool.stopCheck.compareAndSet', 'assign', 'pool.schedule', 'pool.spinningCount.get', 'assign', 'pool.stopCheck.compareAndSet', 'pool.stopCheck.get']
['get', '.']
['get', '.', 'compareAndSet']
['get', '.']
['isWorking']
[None]
[None]
[None]
[None]
[None]
['channel.close', 'merge', 'FileUtils.clean', 'merge']
['syncInternal']
[None]
[None]
['file.exists', 'FileChannel.open', 'file.toPath', 'FileChannel.open', 'file.toPath', 'SyncUtil.trySyncDir', 'file.getParentFile', 'channel.close', 't.addSuppressed']
[None]
[None]
[None]
[None]
['syncInternal']
['SyncUtil.force', 'getPath']
['doFlush', 'syncDataOnlyInternal']
['flushData', 'buffer.position', 'syncDataOnlyInternal', 'resetBuffer']
[None]
['buffer.flip', 'channel.write', 'buffer.position', 'getPath', 'runPostFlush.run']
[None]
['current']
['position']
['Math.max', 'current', 'fchannel.size', 'getPath']
[None]
['current', 'buffer.clear']
['buffer.position']
['current']
['current', 'buffer.position', 'buffer.position', 'buffer.position', 'syncInternal', 'truncate', 'fchannel.position', 'getPath', 'resetBuffer']
[None]
['fchannel.truncate', 'getPath']
['channel.isOpen']
[None]
['txnProxy.prepareToCommit']
['txnProxy.commit']
['txnProxy.abort']
['txnProxy.finish', 'txnProxy.close']
['txnProxy.finish']
[None]
['collectionSerDeserTest', 'collectionSerDeserTest']
['ListType.getInstance', 'Arrays.asList', 'l.size', 'lb.add', 'Int32Type.instance.decompose', 'assertEquals', 'lt.getSerializer', '.', 'CollectionSerializer.pack', 'lb.size', 'SetType.getInstance', 's.addAll', 'Arrays.asList', 's.size', 'sb.add', 'UTF8Type.instance.decompose', 'assertEquals', 'st.getSerializer', '.', 'CollectionSerializer.pack', 'sb.size', 'MapType.getInstance', 'm.put', 'm.put', 'm.put', 'm.size', 'm.entrySet', 'mb.add', 'UTF8Type.instance.decompose', 'entry.getKey', 'mb.add', 'LongType.instance.decompose', 'entry.getValue', 'assertEquals', 'mt.getSerializer', '.', 'CollectionSerializer.pack', 'm.size']
['eventSerDeserTest', 'eventSerDeserTest']
['events.add', 'TopologyChange.newNode', 'FBUtilities.getBroadcastAddress', 'events.add', 'TopologyChange.removedNode', 'FBUtilities.getBroadcastAddress', 'events.add', 'TopologyChange.movedNode', 'FBUtilities.getBroadcastAddress', 'events.add', 'StatusChange.nodeUp', 'FBUtilities.getBroadcastAddress', 'events.add', 'StatusChange.nodeDown', 'FBUtilities.getBroadcastAddress', 'events.add', 'events.add', 'events.add', 'events.add', 'events.add', 'events.add', 'events.add', 'events.add', 'events.add', 'Arrays.asList', 'events.add', 'Collections.<', 'events.add', 'events.add', 'events.add', 'Collections.<', 'events.add', 'events.add', 'Unpooled.buffer', 'ev.serializedSize', 'ev.serialize', 'assertEquals', 'Event.deserialize']
['UTF8Type.instance.decompose']
[None]
['Constants.Literal.integer', 'String.valueOf']
['Constants.Literal.string']
['ci']
['udtSerDeserTest', 'udtSerDeserTest']
['ListType.getInstance', 'SetType.getInstance', 'MapType.getInstance', 'bb', 'Arrays.asList', 'bb', 'bb', 'bb', 'bb', 'Arrays.asList', 'value.put', 'ci', 'lit', 'value.put', 'ci', 'Arrays.<', 'lit', 'lit', 'value.put', 'ci', 'Arrays.<', 'lit', 'lit', 'value.put', 'ci', 'Arrays.<', 'Pair.<', 'lit', 'lit', 'Pair.<', 'lit', 'lit', 'u.prepare', 'columnSpec', 't.bindAndGet', 'udt.split', 'assertEquals', 'assertEquals', 'bytes', 'assertEquals', 'Arrays.asList', 'lt.getSerializer', '.', 's.addAll', 'Arrays.asList', 'assertEquals', 'st.getSerializer', '.', 'm.put', 'm.put', 'assertEquals', 'mt.getSerializer', '.']
['columnNames.add', 'Unpooled.buffer', 'meta.codec.encodedSize', 'meta.codec.encode', 'meta.codec.decode', 'assertEquals', 'Unpooled.buffer', 'meta.codec.encodedSize', 'meta.codec.encode', 'meta.codec.decode', 'assertNotSame', 'Unpooled.buffer', 'metaWithoutIndexes.codec.encodedSize', 'metaWithoutIndexes.codec.encode', 'metaWithoutIndexes.codec.decode', 'assertEquals']
['getOutput', 'HeartBeatState.serializer.serialize', 'getVersion', 'EndpointState.serializer.serialize', 'getVersion', 'VersionedValue.serializer.serialize', 'getVersion', 'VersionedValue.serializer.serialize', 'getVersion', 'out.close', 'testSerializedSize', 'testSerializedSize', 'testSerializedSize', 'testSerializedSize']
['testEndpointStateWrite', 'getInput', 'HeartBeatState.serializer.deserialize', 'getVersion', 'EndpointState.serializer.deserialize', 'getVersion', 'VersionedValue.serializer.deserialize', 'getVersion', 'VersionedValue.serializer.deserialize', 'getVersion', 'in.close']
['states.put', 'InetAddress.getByName', 'states.put', 'InetAddress.getByName', 'StorageService.instance.getTokenMetadata', '.', '.', 'getOutput', 'GossipDigest.serializer.serialize', 'getVersion', 'GossipDigestAck.serializer.serialize', 'getVersion', 'GossipDigestAck2.serializer.serialize', 'getVersion', 'GossipDigestSyn.serializer.serialize', 'getVersion', 'out.close', 'testSerializedSize', 'testSerializedSize', 'testSerializedSize', 'testSerializedSize']
['testGossipDigestWrite', 'getInput', 'Statics.Digests.size', 'GossipDigestAck2.serializer.deserialize', 'getVersion', 'GossipDigestAck.serializer.deserialize', 'getVersion', 'GossipDigestAck2.serializer.deserialize', 'getVersion', 'GossipDigestSyn.serializer.deserialize', 'getVersion', 'in.close']
['version.storeRows', 'ByteBufferUtil.readWithShortLength', 'metadata.clusteringColumns', '.', 'metadata.isCompound', 'CompositeType.splitName', 'CompositeType.lastEOC', 'components.size', 'components.size', 'components.subList', 'components.toArray', 'Slice.Bound.create', 'components.toArray', 'components.size', 'ClusteringPrefix.serializer.serialize', 'version.correspondingMessagingVersion', 'header.clusteringTypes', 'ClusteringPrefix.serializer.deserialize', 'version.correspondingMessagingVersion', 'header.clusteringTypes', 'ClusteringPrefix.serializer.serializedSize', 'version.correspondingMessagingVersion', 'header.clusteringTypes']
[None]
['ByteBufferUtil.readWithShortLength', 'metadata.clusteringColumns', '.', 'metadata.isCompound', 'CompositeType.splitName', 'CompositeType.lastEOC', 'components.size', 'components.size', 'components.subList', 'components.toArray', 'Slice.Bound.create', 'components.toArray', 'components.size']
[None]
['ClusteringPrefix.serializer.serialize', 'version.correspondingMessagingVersion', 'header.clusteringTypes']
['ClusteringPrefix.serializer.deserialize', 'version.correspondingMessagingVersion', 'header.clusteringTypes']
['ClusteringPrefix.serializer.serializedSize', 'version.correspondingMessagingVersion', 'header.clusteringTypes']
['valueMap.put', 'event.planId.toString', 'valueMap.put', 'event.peer.getHostAddress', 'valueMap.put', 'Throwables.propagate']
[None]
[None]
[None]
['checkArgument', 'args.size', 'probe.setCacheKeysToSave', 'args.get', 'args.get', 'args.get']
['probe.setHintedHandoffThrottleInKB']
[None]
['Arrays.asList']
['Arrays.asList']
['clArgs.remove', 'GroupedOptions.select', 'printHelp', 'System.out.println', 'System.exit']
['GroupedOptions.printOptions']
['printHelp']
['printHelp']
['oos.defaultWriteObject', 'namesBytes.add', 'ByteBufferUtil.getArray', 'oos.writeObject']
['ois.defaultReadObject', 'ois.readObject', 'namesBuffer.add', 'ByteBuffer.wrap']
['Collections.singletonList', 'PredefinedOperation.operation', '.']
['Collections.singletonList', 'PredefinedOperation.operation']
['.']
['merge', 'Arrays.asList']
['GroupedOptions.select', 'printHelp', 'System.out.println', 'System.exit']
['GroupedOptions.printOptions']
['printHelp']
['printHelp']
['maybePrintHelp', 'maybePrintDistribution']
['Arrays.asList']
['clArgs.get', 'GroupedOptions.select', 'printHelpPrinter', '.', 'System.out.println', 'System.exit', 'printDistribution', 'dist.dist.get', '.']
['out.println', 'dist.inverseCumProb', 'dist.inverseCumProb', 'out.println', 'String.format']
['clArgs.containsKey', 'clArgs.containsKey', 'clArgs.remove', 'clArgs.remove', 'clArgs.isEmpty', 'clArgs.size', 'clArgs.keySet', '.', '.', 'clArgs.get', 'printHelp', 'printHelp']
['System.out.println', 'System.out.println', 'System.out.println', 'System.out.println', 'Command.values', 'System.out.println', 'String.format', 'cmd.toString', '.', 'System.out.println', 'System.out.println', 'CliOption.values', 'System.out.println', 'String.format', 'cmd.toString', '.']
['Command.get', 'cmd.printHelp', 'CliOption.get', 'opt.printHelp', 'printHelp']
['System.out.println', 'System.out.println', 'Command.values', 'System.out.println', 'cmd.names.toString', '.', 'System.out.println', 'CliOption.values', 'System.out.println', 'op.toString', '.']
['System.out.println', 'System.out.println', 'Command.values', 'System.out.println', 'cmd.names.toString', '.', 'System.out.println', 'CliOption.values', 'System.out.println', 'op.toString', '.']
['GroupedOptions.printOptions', 'Arrays.asList']
['GroupedOptions.printOptions', 'Arrays.asList']
['Arrays.asList']
['System.out.println', 'System.out.println', 'System.out.println']
['System.out.println', 'System.out.println', 'System.out.println']
['clArgs.remove', 'clArgs.remove', 'sendToDaemonHelpPrinter', '.', 'System.out.println', 'Arrays.toString', 'System.exit']
['Arrays.asList']
['clArgs.remove', 'GroupedOptions.select', 'printHelp', 'System.out.println', 'System.exit']
['GroupedOptions.printOptions']
['printHelp']
['printHelp']
['createKeySpacesThrift', 'createKeySpacesNative']
['settings.getJavaDriverClient', 'client.execute', 'createKeyspaceStatementCQL3', 'client.execute', 'client.execute', 'createStandard1StatementCQL3', 'client.execute', 'createCounter1StatementCQL3', 'System.out.println', 'String.format', 'settings.node.nodes.size']
['b.append', '.', 'b.append', '.', 'ByteBufferUtil.string', '.', 'b.append', 'b.append', '.', '.', 'b.append', 'b.append', '.', '.', 'compactionStrategyOptions.entrySet', 'b.append', '.', 'entry.getKey', '.', '.', 'entry.getValue', '.', 'b.append', 'b.append', 'b.toString']
['b.append', '.', 'b.append', '.', 'ByteBufferUtil.string', '.', 'b.append', 'b.append', '.', '.', 'b.append', 'b.append', '.', '.', 'compactionStrategyOptions.entrySet', 'b.append', '.', 'entry.getKey', '.', '.', 'entry.getValue', '.', 'b.append', 'b.append', 'b.toString']
['compressionOptions.put', 'standardCfDef.setComparator_type', '.', '.', 'settings.columns.names.size', 'standardCfDef.addToColumn_metadata', 'settings.columns.names.get', '.', '.', '.', 'ksdef.setName', 'ksdef.setStrategy_class', 'replicationStrategyOptions.isEmpty', 'ksdef.setStrategy_options', 'standardCfDef.setCompaction_strategy', 'counterCfDef.setCompaction_strategy', 'compactionStrategyOptions.isEmpty', 'standardCfDef.setCompaction_strategy_options', 'counterCfDef.setCompaction_strategy_options', 'ksdef.setCf_defs', 'Arrays.asList', 'settings.getRawThriftClient', 'client.system_add_keyspace', 'client.set_keyspace', 'System.out.println', 'String.format', 'settings.node.nodes.size', 'System.err.println', 'e.getWhy', 'System.err.println', 'e.getMessage']
['Arrays.asList']
['clArgs.remove', 'GroupedOptions.select', 'printHelp', 'System.out.println', 'System.exit']
['GroupedOptions.printOptions']
['printHelp']
['printHelp']
['transportFactory.supportedOptions', '.', 'factoryOptions.put', 'options.trustStore.value', 'transportFactory.supportedOptions', '.', 'factoryOptions.put', 'options.trustStorePw.value', 'transportFactory.supportedOptions', '.', 'factoryOptions.put', 'options.protocol.value', 'transportFactory.supportedOptions', '.', 'factoryOptions.put', 'options.ciphers.value', 'transportFactory.supportedOptions', 'System.getProperty', 'factoryOptions.put', 'System.getProperty', 'transportFactory.setOptions']
['Class.forName', '.', 'configureTransportFactory']
['options.trustStore.present', 'options.trustStore.value', 'options.trustStorePw.value', 'options.alg.value', 'options.protocol.value', 'options.ciphers.value', '.']
['Arrays.asList']
['clArgs.remove', 'GroupedOptions.select', 'printHelp', 'System.out.println', 'System.exit']
['GroupedOptions.printOptions']
['printHelp']
['printHelp']
['parser.getTypeParameters', 'l.size', 'getInstance', 'l.get']
['internMap.get', 'internMap.put']
['elements.references']
[None]
[None]
[None]
[None]
['getInstance']
['.']
['isCompatibleWithFrozen']
['ListType.compareListOrSet']
[None]
['isMultiCell', 'sb.append', '.', '.', 'sb.append', 'getClass', '.', 'sb.append', 'TypeParser.stringifyTypeParameters', 'Collections.<', 'sb.append', 'sb.toString']
['cells.hasNext', 'bbs.add', 'cells.next', '.', '.']
['Json.decodeJson', 'String.format', 'parsed.getClass', '.', 'list.size', 'terms.add', 'elements.fromJSONObject']
['ListType.setOrListToJsonString']
['spinning.pollFirstEntry', 'descheduled.pollFirstEntry', 'e.getValue', '.', 'work.isStop', 'workerId.incrementAndGet']
['spinningCount.get', 'spinningCount.compareAndSet', 'schedule']
['executors.add']
[None]
['sigar.getResourceLimit', '.', 'logger.warn']
['sigar.getResourceLimit', '.', 'logger.warn']
['FBUtilities.isWindows', 'sigar.getResourceLimit', '.', 'logger.warn']
['sigar.getSwap', 'swap.getTotal', 'logger.warn']
['isSwapEnabled', 'hasAcceptableAddressSpace', 'hasAcceptableFileLimits', 'hasAcceptableProcNumber', 'logger.warn', 'logger.info', 'logger.info']
['bytes.remaining', 'ByteBufferUtil.toInt']
['ByteBufferUtil.bytes']
['rawPattern.matcher', '.', 'Long.parseLong', 'String.format', 'formatter.parseDateTime', 'parsed.getMillis', 'String.format', '.', 'String.format', '.', 'timeInMillisToDay', 'String.format']
['TimeUnit.MILLISECONDS.toDays']
['TimeUnit.DAYS.toMillis']
['bytes.remaining', 'String.format', 'bytes.remaining']
['formatter.print', 'dayToTimeInMillis']
[None]
['SimpleDateType.instance.fromString', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'intLimit.toString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'overLimit.toString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'Math.pow', 'SimpleDateType.instance.fromString', 'i1.toString', 'SimpleDateType.instance.fromString', 'i2.toString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.fromString', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'Math.pow', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize', 'Math.pow', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateSerializer.instance.serialize', 'makeUnsigned', 'SimpleDateType.instance.compare', 'String.format', 'SimpleDateSerializer.instance.deserialize', 'SimpleDateSerializer.instance.deserialize']
[None]
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple']
['Keyspace.open', '.']
['endpointTokens.add', 'String.valueOf', 'keyTokens.add', 'String.valueOf', 'verifyGetNaturalEndpoints', 'endpointTokens.toArray', 'keyTokens.toArray']
['endpointTokens.add', 'String.valueOf', 'keyTokens.add', 'partitioner.getToken', 'ByteBufferUtil.bytes', 'String.valueOf', 'verifyGetNaturalEndpoints', 'endpointTokens.toArray', 'keyTokens.toArray']
['Schema.instance.getNonSystemKeyspaces', 'getStrategy', 'InetAddress.getByName', 'String.valueOf', 'tmd.updateNormalToken', 'hosts.add', 'strategy.getNaturalEndpoints', 'assertEquals', 'strategy.getReplicationFactor', 'endpoints.size', 'endpoints.size', 'correctEndpoints.add', 'hosts.get', 'hosts.size', 'assertEquals']
['StorageServiceAccessor.setTokenMetadata', 'String.valueOf', 'String.valueOf', 'InetAddress.getByName', 'String.valueOf', 'tmd.updateNormalToken', 'hosts.add', 'String.valueOf', 'InetAddress.getByName', 'tmd.addBootstrapToken', 'Schema.instance.getNonSystemKeyspaces', 'getStrategy', 'PendingRangeCalculatorService.calculatePendingRanges', 'strategy.getReplicationFactor', 'tmd.getWriteEndpoints', 'strategy.getNaturalEndpoints', 'assertTrue', 'endpoints.size', 'assertTrue', 'endpoints.contains', 'hosts.get', 'hosts.size', 'assertFalse', 'endpoints.contains', 'assertTrue', 'endpoints.contains', 'StorageServiceAccessor.setTokenMetadata']
['Schema.instance.getKSMetaData', 'AbstractReplicationStrategy.createReplicationStrategy']
[None]
[None]
[None]
[None]
[None]
[None]
['entity.equals', 'operator']
['entity.toString', 'String.format', 'isIN', 'String.format', 'String.format']
['toColumnDefinition', 'toTerm', 'toReceivers', 'cfm.isDense', 'toReceivers', 'cfm.isDense', 'toTerm', 'Collections.singletonList', 'receivers.get', 'toTerm', 'Collections.singletonList', 'receivers.get']
['toColumnDefinition', 'toReceivers', 'cfm.isDense', 'toTerms', 'toTerm']
['toColumnDefinition', 'toTerm', 'toReceivers', 'cfm.isDense']
['toColumnDefinition', 'toTerm', 'toReceivers', 'cfm.isDense']
['toColumnDefinition', '.']
['checkFalse', 'columnDef.isPrimaryKeyColumn', 'isIN', 'checkFalse', 'columnDef.isPrimaryKeyColumn', 'canHaveOnlyOneValue', 'isSlice', 'checkFalse', 'columnDef.isPartitionKey', 'checkFalse', 'isContainsKey', 'checkFalse', 'isContains', 'receiver.type.isCollection', 'checkFalse', 'checkTrue', 'checkTrue', 'receiver.type.isMultiCell', 'checkTrue', 'isEQ', 'receiver.type.isCollection', 'checkFalse', 'receiver.type.isMultiCell', 'isLegalRelationForNonFrozenCollection', 'receiver.type.asCQL3Type', 'operator', 'isContainsKey', 'isContains', 'makeCollectionReceiver', 'isContainsKey', 'receiver.type.isMultiCell', 'isEQ', 'receivers.add', 'makeCollectionReceiver', 'receivers.add', 'makeCollectionReceiver', 'Collections.singletonList']
[None]
['isContainsKey', 'isContains', 'isMapEntryEquality']
['isEQ']
['isEQ', 'isIN', 'inValues.size']
['command.partitionKey', '.']
['command.limits']
['maxRemaining', 'remainingInPartition']
['command.forPaging', 'lastReturned.clustering', 'command.metadata']
['last.clustering', 'PagingState.RowMark.create', 'command.metadata']
[None]
[None]
['iter.metadata']
[None]
[None]
[None]
['iter.close']
['Double.compare', 'Long.compare', 'avgSize', 'avgSize']
['sstable.bytesOnDisk', 'sstables.size']
['cfs.getMinimumCompactionThreshold', 'cfs.getMaximumCompactionThreshold', 'filterSuspectSSTables', 'filter', 'cfs.getUncompactingSSTables', 'getBuckets', 'createSSTableAndLengthPairs', 'logger.trace', 'updateEstimatedCompactionsByTasks', 'mostInterestingBucket', 'mostInteresting.isEmpty', 'worthDroppingTombstones', 'sstablesWithTombstones.add', 'sstablesWithTombstones.isEmpty', 'Collections.emptyList', 'Collections.sort', 'Collections.singletonList', 'sstablesWithTombstones.get']
['buckets.size', 'trimToThresholdWithHotness', 'bucketAndHotness.left.size', 'prunedBucketsAndHotness.add', 'prunedBucketsAndHotness.isEmpty', 'Collections.emptyList', 'Collections.max']
['getHotnessMap', 'Collections.sort', 'Double.compare', 'hotnessSnapshot.get', 'hotnessSnapshot.get', 'bucket.subList', 'Math.min', 'bucket.size', 'hotness', 'Pair.create']
['Double.compare', 'hotnessSnapshot.get', 'hotnessSnapshot.get']
['sstables.size', 'hotness.put', 'hotness']
['sstr.getReadMeter', 'sstr.getReadMeter', '.', 'sstr.estimatedKeys']
['getNextBackgroundSSTables', 'hottestBucket.isEmpty', 'cfs.getTracker', '.']
['filterSuspectSSTables', 'Iterables.isEmpty', 'cfs.getTracker', '.', 'Arrays.<', 'Arrays.<']
['cfs.getTracker', '.', 'logger.trace', '.']
[None]
['Iterables.size', 'sstableLengthPairs.add', 'Pair.create', 'sstable.onDiskLength']
['Collections.sort', 'p1.right.compareTo', 'buckets.entrySet', 'entry.getValue', 'entry.getKey', 'buckets.remove', 'bucket.size', 'bucket.size', 'bucket.add', 'buckets.put', 'bucket.add', 'buckets.put', 'buckets.values']
['p1.right.compareTo']
['bucket.size', 'cfs.getMinimumCompactionThreshold', 'Math.ceil', 'bucket.size', 'cfs.getMaximumCompactionThreshold']
[None]
['AbstractCompactionStrategy.validateOptions', 'SizeTieredCompactionStrategyOptions.validateOptions', 'uncheckedOptions.remove', 'CompactionParams.Option.MIN_THRESHOLD.toString', 'uncheckedOptions.remove', 'CompactionParams.Option.MAX_THRESHOLD.toString']
[None]
['sstables.add']
['sstables.remove']
['String.format', 'cfs.getMinimumCompactionThreshold', 'cfs.getMaximumCompactionThreshold']
[None]
['allocate']
['onHeap', 'offHeap', 'unslabbedSize.addAndGet', 'ByteBuffer.allocate', 'ByteBuffer.allocateDirect', 'offHeapRegions.add', 'region.allocate', 'getRegion', 'region.allocate', 'currentRegion.compareAndSet']
[None]
[None]
['currentRegion.get', 'RACE_ALLOCATED.poll', 'ByteBuffer.allocate', 'ByteBuffer.allocateDirect', 'currentRegion.compareAndSet', 'offHeapRegions.add', 'regionCount.incrementAndGet', 'logger.trace', 'RACE_ALLOCATED.add']
[None]
['nextFreeOffset.get', 'nextFreeOffset.compareAndSet', 'allocCount.incrementAndGet', 'data.duplicate', '.', '.']
['System.identityHashCode', 'allocCount.get', 'data.capacity', 'nextFreeOffset.get']
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['unsetColumn_names', 'setColumn_names', 'unsetSlice_range', 'setSlice_range']
['getColumn_names', 'getSlice_range']
['isSetColumn_names', 'isSetSlice_range']
['.']
['.', 'that.isSetColumn_names', '.', '.', 'that.isSetSlice_range', '.']
['isSetColumn_names', 'builder.append', 'builder.append', 'isSetSlice_range', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetColumn_names', 'isSetColumn_names', 'isSetColumn_names', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetSlice_range', 'isSetSlice_range', 'isSetSlice_range', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['isSetColumn_names', 'sb.append', 'sb.append', 'sb.append', 'isSetSlice_range', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['slice_range.validate']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetColumn_names', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.column_names.size', 'oprot.writeBinary', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'struct.isSetSlice_range', 'oprot.writeFieldBegin', 'struct.slice_range.write', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetColumn_names', 'optionals.set', 'struct.isSetSlice_range', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetColumn_names', 'oprot.writeI32', 'struct.column_names.size', 'oprot.writeBinary', 'struct.isSetSlice_range', 'struct.slice_range.write']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readBinary', 'struct.column_names.add', 'struct.setColumn_namesIsSet', 'incoming.get', 'struct.slice_range.read', 'struct.setSlice_rangeIsSet']
['GCInspector.register', 'WindowsFailedSnapshotTracker.deleteOldSnapshots', 'SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD']
['Assume.assumeTrue', 'FBUtilities.isWindows', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.clearUnsafe', 'populate', 'store.snapshot', 'Thread.sleep', 'store.clearSnapshot', 'assertEquals', 'SnapshotDeletingTask.pendingDeletionCount', 'populate', 'store.forceBlockingFlush', 'store.forceMajorCompaction', 'System.currentTimeMillis', 'System.currentTimeMillis', 'SnapshotDeletingTask.pendingDeletionCount', 'Thread.yield', 'assertEquals', 'SnapshotDeletingTask.pendingDeletionCount']
['System.currentTimeMillis', 'Keyspace.open', '.', 'Util.dk', 'Integer.toString', '.', 'Integer.toString', '.', '.', '.', 'key.getKey']
['RepairJobDesc.serializer.serialize']
['RepairJobDesc.serializer.deserialize']
['RepairJobDesc.serializer.serializedSize']
['MessagingService.instance', '.', '.', 'TimeUnit.HOURS.toMillis']
['task.set']
[None]
['task.setException']
['properties.getProperty']
['properties.containsKey']
['TreeMultimap.<']
['defaultComparator', 'defaultComparator', 'TreeMultimap.<']
['SortedBiMultiValMap.<', 'newMap.forwardMap.putAll', 'newMap.reverseMap.putAll', 'map.inverse']
['create', 'newMap.forwardMap.putAll', 'newMap.reverseMap.putAll', 'map.inverse']
[None]
[None]
['Type.values', 'valid.name.equalsIgnoreCase']
['o1.getMaxTimestamp', 'o2.getMaxTimestamp']
['o1.first.compareTo']
['Iterables.isEmpty', 'Iterables.all', 'sstable.descriptor.version.hasNewStatsFile', 'sstable.descriptor.getMetadataSerializer', '.', 'sstable.getFilename', 'cardinality.merge', 'logger.warn', 'logger.warn', 'cardinality.cardinality', 'sstable.estimatedKeys']
['sstable.descriptor.version.hasNewStatsFile']
['overlapping.size', 'sstable.descriptor.getMetadataSerializer', '.', 'cardinalities.add', 'logger.trace', 'sstable.getFilename', 'logger.warn', 'cardinality.cardinality', 'mergeCardinalities', '.', 'logger.trace']
['base.merge', 'cardinalities.toArray', 'cardinalities.size', 'logger.warn']
['descriptor.cfname.contains', 'descriptor.cfname.indexOf', 'descriptor.cfname.substring', 'descriptor.cfname.substring', 'Schema.instance.getCFMetaData', 'parent.getIndexes', '.', '.', 'CassandraIndex.indexCfsMetadata', 'Schema.instance.getCFMetaData', 'open']
['open', 'componentsFor']
['open']
[None]
[None]
['components.contains', 'components.contains', 'EnumSet.of', 'descriptor.getMetadataSerializer', '.', 'sstableMetadata.get', 'sstableMetadata.get', 'sstableMetadata.get', 'metadata.partitioner.getClass', '.', 'partitionerName.equals', 'logger.error', 'String.format', 'System.exit', 'logger.debug', '.', 'descriptor.filenameFor', 'internalOpen', 'System.currentTimeMillis', 'header.toHeader', 'sstable.loadSummary', 'sstable.buildSummary', 'ibuilder.buildIndex', 'dbuilder.buildData', 'sstable.setup']
['components.contains', 'components.contains', 'descriptor.version.storeRows', 'components.contains', 'EnumSet.of', 'descriptor.getMetadataSerializer', '.', 'sstableMetadata.get', 'sstableMetadata.get', 'sstableMetadata.get', 'descriptor.version.storeRows', 'metadata.partitioner.getClass', '.', 'partitionerName.equals', 'logger.error', 'String.format', 'System.exit', 'logger.debug', '.', 'descriptor.filenameFor', 'internalOpen', 'System.currentTimeMillis', 'header.toHeader', 'System.nanoTime', 'sstable.load', 'logger.trace', 'TimeUnit.NANOSECONDS.toMillis', 'System.nanoTime', 'sstable.setup', 'sstable.validate', 'sstable.getKeyCache', 'logger.trace', 'sstable.getKeyCache', '.', 'sstable.getKeyCache', '.', 'sstable.selfRef', '.']
['logger.error', 'e.getMessage', 'logger.error']
['DebuggableThreadPoolExecutor.createWithFixedPoolSize', 'FBUtilities.getAvailableProcessors', 'open', 'entry.getKey', 'entry.getValue', 'FileUtils.handleCorruptSSTable', 'logger.error', 'FileUtils.handleFSError', 'logger.error', 'logger.error', 'sstables.add', 'executor.submit', 'executor.shutdown', 'executor.awaitTermination']
['open', 'entry.getKey', 'entry.getValue', 'FileUtils.handleCorruptSSTable', 'logger.error', 'FileUtils.handleFSError', 'logger.error', 'logger.error', 'sstables.add']
['internalOpen', 'reader.setup']
['descriptor.getFormat', '.', 'readerFactory.open']
['sstable.onDiskLength']
['sstable.uncompressedLength']
[None]
['.']
['dfile.path']
['Schema.instance.getColumnFamilyStoreInstance', 'setCrcCheckChance', 'cfs.getCrcCheckChance']
[None]
['load', 'components.contains', 'load', 'components.contains', 'load', 'load', 'load', 'loadBloomFilter', 'descriptor.version.hasOldBfHashOrder']
['descriptor.filenameFor', 'FilterFactory.deserialize']
['descriptor.filenameFor', 'summariesFile.exists', 'IndexSummary.serializer.deserialize', 'getPartitioner', 'descriptor.version.hasSamplingLevel', 'decorateKey', 'ByteBufferUtil.readWithLength', 'decorateKey', 'ByteBufferUtil.readWithLength', 'ibuilder.deserializeBounds', 'dbuilder.deserializeBounds', 'indexSummary.close', 'logger.trace', 'summariesFile.getPath', 'e.getMessage', 'FileUtils.closeQuietly', 'FileUtils.deleteWithConfirm', 'FileUtils.closeQuietly']
['getMinIndexInterval', 'ifile.createReader', 'in.getPath', 'in.isEOF', 'ByteBufferUtil.readWithShortLength', 'ByteBuffer.wrap', 'indexSummary.getKey', 'summaryKey.equals', 'RowIndexEntry.Serializer.skip', 'markSuspect']
['saveSummary']
['saveSummary']
['descriptor.filenameFor', 'summariesFile.exists', 'FileUtils.deleteWithConfirm', 'IndexSummary.serializer.serialize', 'descriptor.version.hasSamplingLevel', 'ByteBufferUtil.writeWithLength', 'first.getKey', 'ByteBufferUtil.writeWithLength', 'last.getKey', 'ibuilder.serializeBounds', 'dbuilder.serializeBounds', 'logger.trace', 'summariesFile.exists', 'FileUtils.deleteWithConfirm']
[None]
[None]
['AndThen.get']
['runFirst.run', 'runSecond.run']
[None]
['cloneAndReplace', 'indexSummary.sharedCopy']
['internalOpen', 'ifile.sharedCopy', 'dfile.sharedCopy', 'bf.sharedCopy', 'replacement.isSuspect.set', 'isSuspect.get']
['cloneAndReplace']
['newStart.compareTo', 'getPosition', 'getIndexScanPosition', 'cloneAndReplace']
['dfile.dropPageCache', 'ifile.dropPageCache', 'andThen.run']
['descriptor.version.hasSamplingLevel', 'indexSummary.getEffectiveIndexInterval', 'bytesOnDisk', 'indexSummary.getSamplingLevel', 'indexSummary.getMinIndexInterval', 'buildSummaryAtLevel', 'indexSummary.getSamplingLevel', 'IndexSummaryBuilder.downsample', 'getPartitioner', 'SegmentedFile.getBuilder', 'DatabaseDescriptor.getIndexAccessMode', 'SegmentedFile.getBuilder', 'DatabaseDescriptor.getDiskAccessMode', 'saveSummary', 'bytesOnDisk', 'StorageMetrics.load.inc', 'parent.metric.liveDiskSpaceUsed.inc', 'parent.metric.totalDiskSpaceUsed.inc', 'cloneAndReplace']
['RandomAccessReader.open', 'descriptor.filenameFor', 'primaryIndex.length', 'estimatedKeys', 'primaryIndex.getFilePointer', 'summaryBuilder.maybeAddEntry', 'decorateKey', 'ByteBufferUtil.readWithShortLength', 'RowIndexEntry.Serializer.skip', 'summaryBuilder.build', 'getPartitioner', 'FileUtils.closeQuietly']
[None]
['indexSummary.getSamplingLevel']
['indexSummary.getOffHeapSize']
['indexSummary.getMinIndexInterval']
['indexSummary.getEffectiveIndexInterval']
['tidy.releaseSummary']
['.', 'String.format']
['key.compareTo', 'getIndexScanPositionFromBinarySearchResult', 'indexSummary.binarySearch']
['referencedIndexSummary.getPosition', 'getIndexSummaryIndexFromBinarySearchResult']
[None]
[None]
['getCompressionMetadata', '.']
[None]
[None]
['bf.serializedSize']
['bf.offHeapSize']
['indexSummary.getEstimatedKeyCount']
['getSampleIndexesForRanges', 'indexSummary.getMinIndexInterval', 'indexSummary.getSamplingLevel', 'Math.max']
['indexSummary.size']
['indexSummary.getMaxNumberOfEntries']
['indexSummary.getKey']
['Range.normalize', 'range.left.maxKeyBound', 'range.right.maxKeyBound', 'summary.binarySearch', 'summary.size', 'Range.isWrapAround', 'summary.size', 'summary.binarySearch', 'positions.add', 'Pair.create']
['getSampleIndexesForRanges', 'Collections.singletonList', 'indexRanges.isEmpty', 'Collections.emptyList', 'indexRanges.iterator', 'rangeIter.hasNext', 'rangeIter.next', 'indexSummary.getKey', 'decorateKey', 'ByteBuffer.wrap']
['indexRanges.iterator', 'rangeIter.hasNext', 'rangeIter.next', 'indexSummary.getKey', 'decorateKey', 'ByteBuffer.wrap']
['rangeIter.hasNext', 'rangeIter.next']
['indexSummary.getKey', 'decorateKey', 'ByteBuffer.wrap']
[None]
['Range.normalize', 'range.isWrapAround', 'range.right.isMinimum', 'Range.makeRowRange', 'bounds.left.compareTo', 'first.getToken', '.', 'bounds.right.isMinimum', 'last.getToken', '.', 'leftBound.compareTo', 'rightBound.compareTo', 'getPosition', 'rightBound.compareTo', 'uncompressedLength', 'getPosition', 'String.format', 'positions.add', 'Pair.create']
['key.getKey']
['caching.cacheKeys', 'keyCache.getCapacity', 'key.getKey', 'logger.trace', 'keyCache.put']
['getCachedPosition', 'key.getKey']
['keyCache.getCapacity', 'metadata.params.caching.cacheKeys', 'keyCache.get', 'keyCacheRequest.incrementAndGet', 'keyCacheHit.incrementAndGet', 'bloomFilterTracker.addTruePositive', 'keyCache.getInternal']
['getPosition']
['getPosition']
[None]
[None]
[None]
['token.compareTo', 'getIndexScanPosition', 'ifile.createReader', 'in.getPath', 'in.isEOF', 'ByteBufferUtil.readWithShortLength', 'decorateKey', 'indexDecoratedKey.compareTo', 'RowIndexEntry.Serializer.skip', 'markSuspect']
[None]
[None]
[None]
[None]
['logger.isTraceEnabled', 'logger.trace', 'getFilename', 'tidy.global.stopReadMeterPersistence']
[None]
['logger.isTraceEnabled', 'logger.trace', 'getFilename', 'isSuspect.getAndSet']
['isSuspect.get']
['getScanner']
['getScanner']
['getScanner', 'getScanner', 'Collections.singletonList']
[None]
[None]
[None]
['dfile.createReader']
[None]
['descriptor.filenameFor', 'sourceFile.exists', 'sourceFile.getName', 'FileUtils.createHardLink']
[None]
[None]
[None]
[None]
[None]
['bloomFilterTracker.getFalsePositiveCount']
['bloomFilterTracker.getRecentFalsePositiveCount']
['bloomFilterTracker.getTruePositiveCount']
['bloomFilterTracker.getRecentTruePositiveCount']
[None]
[None]
[None]
['sstableMetadata.getEstimatedDroppableTombstoneRatio']
['sstableMetadata.getDroppableTombstonesBefore']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['descriptor.getMetadataSerializer', '.']
[None]
['dfile.createReader']
['dfile.createReader']
['ifile.createReader']
[None]
[None]
['.', 'descriptor.filenameFor']
['keyCacheHit.get']
['keyCacheRequest.get']
['readMeter.mark']
['getSSTableMetadata', 'other.getSSTableMetadata', 'm1.minClusteringValues.isEmpty', 'm1.maxClusteringValues.isEmpty', 'm2.minClusteringValues.isEmpty', 'm2.maxClusteringValues.isEmpty', 'compare', 'compare']
['Math.min', 'values1.size', 'values2.size', 'comparator.subtype', '.', 'values1.get', 'values2.get']
['Longs.compare', 'o1.onDiskLength', 'o2.onDiskLength']
['selfRef.tryRef']
[None]
['selfRef.ref']
['tidy.setup']
[None]
['identities.add', 'identities.add', 'dfile.addTo', 'ifile.addTo', 'bf.addTo', 'indexSummary.addTo']
['GlobalTidy.get', 'globalRef.get', 'global.ensureReadMeter']
['Schema.instance.getColumnFamilyStoreInstance', 'cfs.readOrdering.newBarrier', 'barrier.issue', 'ScheduledExecutors.nonPeriodicTasks.execute', 'barrier.await', 'bf.close', 'summary.close', 'runOnClose.run', 'dfile.close', 'ifile.close', 'globalRef.release']
['barrier.await', 'bf.close', 'summary.close', 'runOnClose.run', 'dfile.close', 'ifile.close', 'globalRef.release']
['descriptor.toString']
['summary.close', 'summary.isCleanedUp']
['Schema.isSystemKeyspace', 'SystemKeyspace.getSSTableReadMeter', 'syncExecutor.scheduleAtFixedRate', 'meterSyncThrottle.acquire', 'SystemKeyspace.persistSSTableReadMeter']
['meterSyncThrottle.acquire', 'SystemKeyspace.persistSSTableReadMeter']
['readMeterSyncFuture.cancel']
['lookup.remove', 'obsoletion.run', 'CLibrary.trySkipCache', 'desc.filenameFor', 'CLibrary.trySkipCache', 'desc.filenameFor']
['desc.toString']
['lookup.get', 'refc.ref', 'lookup.putIfAbsent', 'refc.close']
['GlobalTidy.lookup.clear']
['partitioner.getToken', 'ByteBufferUtil.bytes', 'String.valueOf']
['SchemaLoader.prepareServer', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.compositeIndexCFMD', 'SchemaLoader.standardCFMD', '.', '.', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', 'CompactionManager.instance.disableAutoCompaction', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'ranges.add', 't', 't', 'ranges.add', 't', 't', 'ranges.add', 't', 'partitioner.getMinimumToken', 'ranges.add', 't', 't', 'store.getLiveSSTables', '.', '.', 'sstable.getPositionsForRanges']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', 'CompactionManager.instance.disableAutoCompaction', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'store.getLiveSSTables', '.', '.', 'Util.dk', 'String.valueOf', 'sstable.getFileDataInput', 'sstable.getPosition', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'keyInDisk.equals', 'String.format', 'file.getPath', 'Util.dk', 'String.valueOf', 'sstable.getPosition']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'clearAndLoad', 'store.metric.maxPartitionSize.getValue']
['cfs.clearUnsafe', 'cfs.loadNewSSTables']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'store.getLiveSSTables', '.', '.', 'assertEquals', 'sstable.getReadMeter', '.', 'sstable.decorateKey', 'ByteBufferUtil.bytes', 'Util.getAll', 'Util.cmd', '.', 'assertEquals', 'sstable.getReadMeter', '.', 'Util.getAll', 'Util.cmd', '.', '.', 'assertEquals', 'sstable.getReadMeter', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', 'CacheService.instance.keyCache.setCapacity', 'CompactionManager.instance.disableAutoCompaction', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'store.getLiveSSTables', '.', '.', 'sstable.getPosition', 'k', 'sstable.getPosition', 'k', 'sstable.getPosition', 'k', 'sstable.getPosition', 'k', 'sstable.getPositionsForRanges', '.', 'makeRanges', 't', 't']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', '.', '.', '.', '.', 'System.currentTimeMillis', 'store.forceBlockingFlush', 'assertIndexQueryWorks']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', 'CacheService.instance.keyCache.setCapacity', 'CompactionManager.instance.disableAutoCompaction', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'store.getLiveSSTables', '.', '.', 'sstable.getPosition', 'k', 'assertEquals', 'sstable.getKeyCacheHit', 'assertEquals', 'sstable.getBloomFilterTruePositiveCount', 'sstable.getPosition', 'k', 'assertEquals', 'sstable.getKeyCacheHit', 'assertEquals', 'sstable.getBloomFilterTruePositiveCount', 'sstable.getPosition', 'k', 'assertEquals', 'sstable.getKeyCacheHit', 'assertEquals', 'sstable.getBloomFilterTruePositiveCount']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.clearUnsafe', 'store.disableAutoCompaction', 'System.currentTimeMillis', 'Util.dk', 'String.valueOf', 'store.metadata.getKeyValidator', '.', 'lastKey.getKey', 'key.getKey', '.', '.', '.', '.', 'key.getKey', 'store.forceBlockingFlush', 'store.getLiveSSTables', '.', '.', 'SSTableReader.open', 'Assert.assertEquals', 'target.getIndexSummarySize', 'Assert.assertArrayEquals', 'ByteBufferUtil.getArray', 'firstKey.getKey', 'target.getIndexSummaryKey', 'target.first.equals', 'target.last.equals', 'target.selfRef', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', '.', '.', '.', '.', 'System.currentTimeMillis', 'store.forceBlockingFlush', 'store.indexManager.getAllIndexColumnFamilyStores', 'indexCfs.isIndex', 'indexCfs.getLiveSSTables', '.', '.', 'sstable.first.getToken', 'SegmentedFile.getBuilder', 'DatabaseDescriptor.getIndexAccessMode', 'SegmentedFile.getBuilder', 'DatabaseDescriptor.getDiskAccessMode', 'sstable.saveSummary', 'SSTableReader.open', 'reopened.first.getToken', 'reopened.selfRef', '.']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', '.', '.', '.', '.', 'store.forceBlockingFlush', 'store.getLiveSSTables', 's.getScanner', 't', 't', 'assertTrue']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'store.getPartitioner', 'CompactionManager.instance.disableAutoCompaction', '.', '.', '.', '.', 'String.valueOf', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'ranges.add', 't', 't', 'store.getLiveSSTables', '.', '.', 'sstable.getPositionsForRanges', 'sections.size', 'Sets.newHashSet', 'sstable.components.contains', 'components.add', 'SSTableReader.openForBatch', 'bulkLoaded.getPositionsForRanges', 'sections.size', 'bulkLoaded.selfRef', '.']
['Keyspace.open', 'CompactionManager.instance.disableAutoCompaction', '.', '.', 'String.format', '.', '.', 'String.format', 'store.forceBlockingFlush', 'CompactionManager.instance.performMaximal', 'store.getLiveSSTables', 'sstables.size', 'sstables.iterator', '.', 'ByteBufferUtil.bytes', 'String.format', 'futures.add', 'executor.submit', 'Util.getOnlyRowUnfiltered', 'Util.cmd', '.', 'assertEquals', 'ByteBufferUtil.compare', 'String.format', '.', 'row.cells', '.', '.', '.', 'futures.add', 'executor.submit', 'store.keySamples', 'sstable.getPartitioner', '.', 'sstable.getPartitioner', '.', 'assertTrue', 'results.iterator', '.', 'store.getTracker', '.', 'Arrays.asList', 'sstable.cloneWithNewSummarySamplingLevel', 'txn.update', 'txn.finish', 'future.get', 'assertEquals', 'sstable.estimatedKeys', 'replacement.estimatedKeys']
['Util.getOnlyRowUnfiltered', 'Util.cmd', '.', 'assertEquals', 'ByteBufferUtil.compare', 'String.format', '.', 'row.cells', '.', '.', '.']
['store.keySamples', 'sstable.getPartitioner', '.', 'sstable.getPartitioner', '.', 'assertTrue', 'results.iterator', '.']
['STR_.equals', 'indexedCFS.concatWithIndexes', 'clearAndLoad', 'Util.cmd', '.', '.', '.', '.', '.', 'indexedCFS.indexManager.getBestIndexFor', '.', 'assertNotNull', 'ReadExecutionController.forCommand', 'assertEquals', 'Util.size', 'UnfilteredPartitionIterators.filter', 'searcher.search', 'rc.nowInSec']
['Arrays.asList']
['t', 'ByteBufferUtil.bytes', 'String.valueOf']
['calculateOpenInterval']
['DatabaseDescriptor.getSSTablePreempiveOpenIntervalInMB']
[None]
['partition.partitionKey', 'maybeReopenEarly', 'writer.append', 'transaction.originals', 'reader.getCachedPosition', 'cachedKeys.put']
['writer.mark', 'append', 'writer.resetAndTruncate']
['writer.getFilePointer', 'transaction.originals', 'reader.getPosition', 'CLibrary.trySkipCache', 'reader.getFilename', 'writer.setMaxDataAge', '.', 'transaction.update', 'writer.getFilePointer', 'moveStarts', 'transaction.checkpoint']
['writer.abort', 'transaction.abort']
['writer.commit', 'transaction.commit']
['invalidateKeys.addAll', 'cachedKeys.keySet', 'newReader.setupOnline', 'cachedKeys.entrySet', 'newReader.cacheKey', 'cacheKey.getKey', 'cacheKey.getValue', 'transaction.originals', 'transaction.current', 'latest.first.compareTo', 'lowerbound.compareTo', 'transaction.isObsolete', 'latest.runOnClose', 'transaction.obsolete', 'latest.firstKeyBeyond', 'latest.cloneWithNewStart', 'transaction.update']
['cache.remove']
['writers.add', 'newWriter.setMaxDataAge', 'writer.getFilePointer', 'writer.abort', 'transaction.untrackNew', 'writers.remove', 'writer.setMaxDataAge', '.', 'transaction.update', 'moveStarts', 'transaction.checkpoint']
[None]
['finished']
['state', 'state']
['switchWriter', 'writer.getFilePointer', 'writer.setRepairedAt', '.', '.', 'writer.finished', 'transaction.update', 'preparedForCommit.add', 'transaction.checkpoint', 'transaction.obsoleteOriginals', 'transaction.prepareToCommit']
[None]
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', '.', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush', 'cfs.getLiveSSTables', 'assertEquals', 'sstables.size', 'assertEquals', 'sstables.iterator', '.', '.', 'cfs.metric.liveDiskSpaceUsed.getCount', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', '.', 'cfs.getTracker', '.', 'cfs.gcBefore', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'getWriter', 'sstables.iterator', '.', 'ci.hasNext', 'writer.append', 'ci.next', 'writer.finish', 'LifecycleTransaction.waitForDeletions', 'validateCFS', 'assertFileCounts', 'sstables.iterator', '.', '.', 'assertEquals', 'truncate']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'cfs.getLiveSSTables', 'assertEquals', 'sstables.size', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', '.', 'cfs.getTracker', '.', 'cfs.gcBefore', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'getWriter', 'sstables.iterator', '.', 'ci.hasNext', 'writer.append', 'ci.next', 'writer.finish', 'LifecycleTransaction.waitForDeletions', 'validateCFS', 'assertFileCounts', 'sstables.iterator', '.', '.', 'assertEquals']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'cfs.getLiveSSTables', 'assertEquals', 'sstables.size', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', '.', 'cfs.getTracker', '.', 'cfs.gcBefore', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'getWriter', 'sstables.iterator', '.', 'ci.hasNext', 'ci.next', 'writer.append', 'writer.currentWriter', '.', 'cfs.getLiveSSTables', 'txn.current', 'sstables.iterator', '.', 'Arrays.asList', 'cfs.getPartitioner', '.', 'cfs.getPartitioner', '.', 'sstable.getPositionsForRanges', 'c.getPositionsForRanges', 'assertEquals', 'tmplinkPositions.size', 'assertEquals', 'compactingPositions.size', 'assertEquals', 'tmplinkPositions.get', '.', 'assertEquals', 'tmplinkPositions.get', '.', 'compactingPositions.get', '.', 'assertEquals', 'c.uncompressedLength', 'compactingPositions.get', '.', 'assertTrue', 'writer.finish', 'LifecycleTransaction.waitForDeletions', 'validateCFS', 'assertFileCounts', 'sstables.iterator', '.', '.', 'assertEquals', 'truncate']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'StorageMetrics.load.getCount', 's.bytesOnDisk', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'assertEquals', 's.bytesOnDisk', 'cfs.metric.liveDiskSpaceUsed.getCount', 'assertEquals', 's.bytesOnDisk', 'cfs.metric.totalDiskSpaceUsed.getCount', 'rewriter.finish', 'LifecycleTransaction.waitForDeletions', 'cfs.getLiveSSTables', 'x.bytesOnDisk', 'assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'assertEquals', 'StorageMetrics.load.getCount', 'assertEquals', 'sstables.size', 'assertEquals', 'cfs.getLiveSSTables', '.', 'LifecycleTransaction.waitForDeletions', 'assertEquals', 'cfs.metric.totalDiskSpaceUsed.getCount', 'assertFileCounts', 's.descriptor.directory.list', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.finish', 'assertEquals', 'sstables.size', 'assertEquals', 'cfs.getLiveSSTables', '.', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 's.descriptor.directory.list', 'validateCFS']
['testNumberOfFiles_abort', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['testNumberOfFiles_abort', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['testNumberOfFiles_abort', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.abort']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'cfs.metric.liveDiskSpaceUsed.getCount', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'rewriter.switchWriter', 'getWriter', 'test.run', 'LifecycleTransaction.waitForDeletions', 'assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'assertEquals', 'cfs.getLiveSSTables', '.', 'assertFileCounts', 's.descriptor.directory.list', 'assertEquals', 'cfs.getLiveSSTables', '.', '.', 'assertEquals', 'cfs.getLiveSSTables', '.', '.', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.finish', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 's.descriptor.directory.list', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.disableAutoCompaction', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.finish', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 's.descriptor.directory.list', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.disableAutoCompaction', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 's.getScanner', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.finish', 'assertEquals', 'sstables.size', 'assertEquals', 'cfs.getLiveSSTables', '.', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 's.descriptor.directory.list', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.disableAutoCompaction', 'writeFile', 'LifecycleTransaction.offline', 'splitter.split', 'assertFileCounts', 's.descriptor.directory.list', 'LifecycleTransaction.waitForDeletions', 's.descriptor.directory.listFiles', 'FileUtils.deleteRecursive', 'truncate']
['testAbortHelper']
['testAbortHelper']
['testAbortHelper']
['testAbortHelper']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 'compacting.iterator', '.', '.', 'LifecycleTransaction.offline', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.currentWriter', '.', 'rewriter.switchWriter', 'getWriter', 'rewriter.throwDuringPrepare', 'rewriter.prepareToCommit', 'rewriter.abort', 's.selfRef', '.', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 's.descriptor.directory.list', 'assertEquals', 'assertEquals', 'cfs.getLiveSSTables', '.', 'validateCFS', 'truncate', 'assertEquals', 'cfs.getLiveSSTables', '.', 'cfs.truncateBlocking', 'assertFileCounts', 's.descriptor.directory.list', 'assertEquals', 's.descriptor.directory.listFiles', 'FileUtils.deleteRecursive', 'assertFileCounts', 's.descriptor.directory.list', 'assertEquals', 'truncate']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'Integer.toString', '.', 'Integer.toString', '.', '.', '.', 'cfs.forceBlockingFlush', 'cfs.forceMajorCompaction', 'validateKeys', 'assertEquals', 'cfs.getLiveSSTables', '.', 'cfs.getLiveSSTables', '.', '.', 'compacting.add', 'compacting.iterator', '.', '.', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'rewriter.switchWriter', 'getWriter', 'ci.hasNext', 'rewriter.append', 'ci.next', 'rewriter.switchWriter', 'getWriter', 'validateKeys', 'rewriter.finish', 'validateKeys', 'LifecycleTransaction.waitForDeletions', 'validateCFS', 'truncate']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 'assertEquals', 'sstables.size', 'sstables.iterator', '.', '.', 'cfs.getTracker', '.', 'Collections.singletonList', 'FBUtilities.nowInSeconds', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'getWriter', 'sstables.iterator', '.', 'ci.hasNext', 'writer.append', 'ci.next', 'writer.currentWriter', '.', 'cfs.select', 'View.select', 'assertEquals', 'viewFragment.sstables.size', 'viewFragment.sstables.get', 'assertEquals', 'assertTrue', 'sstable.getFilename', 'truncateCF', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'writeFile', 'cfs.addSSTable', 'Sets.newHashSet', 'assertEquals', 'sstables.size', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', '.', 'cfs.getTracker', '.', 'cfs.gcBefore', 'UUIDGen.getTimeUUID', 'writer.switchWriter', 'getWriter', 'sstables.iterator', '.', 'writer2.switchWriter', 'getWriter', 'sstables.iterator', '.', 'ci.hasNext', 'writer.currentWriter', '.', 'writer.append', 'ci.next', 'writer2.append', 'ci.next', 'assertFalse', 'Util.getOnlyPartition', '.', 'Util.cmd', '.', 'ByteBufferUtil.bytes', 'truncateCF', 'validateCFS']
['Util.dk', 'Integer.toString', 'Util.getOnlyPartitionUnfiltered', 'Util.cmd', '.', 'ks.getColumnFamilyStore', 'assertTrue', 'partition.rowCount']
['Iterables.getFirst', 'writeFiles']
['cfs.getDirectories', '.', 'cfs.getSSTablePath', 'SSTableTxnWriter.create', 'cfs.metadata.partitionColumns', 'UpdateBuilder.create', 'ByteBufferUtil.bytes', 'builder.newRow', '.', 'random', 'Integer.toString', 'writer.append', 'builder.build', '.', 'result.addAll', 'writer.finish']
['buffer.get', 'createPartitionUpdate', 'PartitionUpdate.serializer.serializedSize', 'formatType.info.getLatestVersion', '.', 'previous.allowNewUpdates', 'buffer.put']
['UnfilteredSerializer.serializer.serializedSize', 'formatType.info.getLatestVersion', '.']
['sync']
['countRow', 'maybeSync']
['countRow', 'maybeSync']
['sync', 'put', 'diskWriter.join', 'checkForWriterException', 'checkForWriterException']
['buffer.isEmpty', 'put']
['checkForWriterException', 'writeQueue.offer']
['Throwables.propagate']
['writeQueue.take', 'createWriter', 'b.entrySet', 'writer.append', 'entry.getValue', '.', 'writer.finish', 'JVMStabilityInspector.inspectThrowable']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.getDirectories', '.', 'LifecycleTransaction.offline', 'getWriter', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer.append', 'builder.build', '.', 'writer.setMaxDataAge', '.', 'assertFileCounts', 'dir.list', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer.append', 'builder.build', '.', 'writer.setMaxDataAge', '.', 'assertTrue', 's.last.compareTo', 'assertFileCounts', 'dir.list', 's.selfRef', '.', 's2.selfRef', '.', 'assertFileCounts', 'dir.list', 'assertEquals', 'FBUtilities.isWindows', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'writer.abort', 'txn.abort', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'assertEquals', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.getDirectories', '.', 'LifecycleTransaction.offline', 'getWriter', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer.append', 'builder.build', '.', 'assertFileCounts', 'dir.list', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer.append', 'builder.build', '.', 'writer.finish', 'assertFileCounts', 'dir.list', 'assertEquals', 'sstable.selfRef', '.', 'FBUtilities.isWindows', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'txn.abort', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'assertEquals', 'validateCFS']
['Keyspace.open', 'keyspace.getColumnFamilyStore', 'truncate', 'cfs.getDirectories', '.', 'LifecycleTransaction.offline', 'getWriter', 'getWriter', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer1.append', 'builder.build', '.', 'assertFileCounts', 'dir.list', 'UpdateBuilder.create', '.', 'random', 'builder.newRow', '.', 'ByteBuffer.allocate', 'writer2.append', 'builder.build', '.', 'writer1.finish', 'txn.update', 'assertFileCounts', 'dir.list', 'assertFileCounts', 'dir.list', 'assertEquals', 'FBUtilities.isWindows', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'txn.abort', 'LifecycleTransaction.waitForDeletions', 'assertFileCounts', 'dir.list', 'assertEquals', 'validateCFS', 'writer1.close', 'writer2.close']
['MessagingService.instance', '.', 'Stage.TRACING.getJmxName']
['MessagingService.instance', '.']
['stage.getJmxName', 'stage.getJmxType']
['SharedExecutorPool.SHARED.newExecutor', 'stage.getJmxType', 'stage.getJmxName']
['stages.get']
['Stage.values', 'StageManager.stages.get', '.']
[None]
['execute']
[None]
[None]
[None]
['Options.parseArgs', 'Schema.instance.loadFromDisk', 'Schema.instance.getCFMetaData', 'String.format', 'handler.output', 'LifecycleTransaction.removeUnfinishedLeftovers', 'handler.output', 'listFiles', 'System.exit', 'System.err.println', 'e.getMessage', 'e.printStackTrace', 'System.exit']
['directories.getCFDirectories', 'LifecycleTransaction.getFiles', 'dir.toPath', 'getFilter', 'handler.output', 'file.getCanonicalPath']
[None]
['FileType.values', 'fileType.option.equals']
['FileType.values', 'str.append', 'str.append', 'str.append', 'str.append', 'str.toString']
['getCmdLineOptions', 'parser.parse', 'cmd.hasOption', 'printUsage', 'System.exit', 'cmd.getArgs', 'System.err.println', 'printUsage', 'System.exit', 'cmd.hasOption', 'cmd.hasOption', 'FileType.fromOption', 'cmd.getOptionValue', 'cmd.hasOption', 'cmd.hasOption', 'errorMsg', 'e.getMessage']
['System.err.println', 'printUsage', 'System.exit']
['options.addOption', 'options.addOption', 'options.addOption', 'options.addOption', 'options.addOption', 'FileType.descr', 'options.addOption']
['String.format', 'header.append', 'header.append', 'header.append', 'header.append', '.', 'header.toString']
['Options.parseArgs', 'Util.initDatabaseDescriptor', 'Schema.instance.loadFromDisk', 'Schema.instance.getCFMetaData', 'String.format', 'Keyspace.openWithoutSSTables', 'keyspace.getColumnFamilyStore', 'cfs.getDirectories', '.', '.', 'lister.list', '.', 'entry.getValue', 'components.contains', 'components.contains', 'SSTableReader.openNoValidation', 'entry.getKey', 'sstables.add', 'JVMStabilityInspector.inspectThrowable', 'System.err.println', 'String.format', 'entry.getKey', 'e.getMessage', 'e.printStackTrace', 'verifier.verify', 'System.err.println', 'String.format', 'cs.getMessage', 'System.err.println', 'String.format', 'e.getMessage', 'e.printStackTrace', 'CompactionManager.instance.finishCompactionsAndShutdown', 'System.err.println', 'e.getMessage', 'e.printStackTrace', 'System.exit']
['getCmdLineOptions', 'parser.parse', 'cmd.hasOption', 'printUsage', 'System.exit', 'cmd.getArgs', 'System.err.println', 'printUsage', 'System.exit', 'cmd.hasOption', 'cmd.hasOption', 'cmd.hasOption', 'errorMsg', 'e.getMessage']
['System.err.println', 'printUsage', 'System.exit']
['options.addOption', 'options.addOption', 'options.addOption', 'options.addOption']
['String.format', 'header.append', 'header.append', 'header.append', 'header.append', '.', 'header.toString']
['preFlightChecks.addAll']
['preFlightChecks.add']
['test.execute']
['FBUtilities.isWindows', 'System.getProperty', 'logger.warn', 'STR_.equals', 'logger.info', 'logger.info']
['System.currentTimeMillis', 'String.format', '.']
['System.getProperty', 'logger.warn', 'System.getProperty', 'logger.error', 'logger.info']
['DatabaseDescriptor.hasLargeAddressSpace', 'logger.warn', 'System.getProperty', 'javaVmName.contains', 'logger.warn', 'javaVmName.contains', 'logger.warn']
['CLibrary.jnaAvailable']
['.']
['Descriptor.isValidFile', 'file.getFileName', '.', 'Descriptor.fromFilename', '.', 'file.toString', 'invalid.add', 'file.toString', 'invalid.add', 'file.toString', 'dir.getFileName', '.', 'name.equals', 'name.equals', 'DatabaseDescriptor.getAllDataFileLocations', 'Files.walkFileTree', 'Paths.get', 'invalid.isEmpty', 'String.format', 'Joiner.on', '.']
['Descriptor.isValidFile', 'file.getFileName', '.', 'Descriptor.fromFilename', '.', 'file.toString', 'invalid.add', 'file.toString', 'invalid.add', 'file.toString']
['dir.getFileName', '.', 'name.equals', 'name.equals']
['Schema.instance.getTablesAndViews', 'ColumnFamilyStore.scrubDataDirectories', 'SystemKeyspace.checkHealth']
['Boolean.getBoolean', 'SystemKeyspace.getDatacenter', 'DatabaseDescriptor.getEndpointSnitch', '.', 'FBUtilities.getBroadcastAddress', 'storedDc.equals', 'String.format']
['Boolean.getBoolean', 'SystemKeyspace.getRack', 'DatabaseDescriptor.getEndpointSnitch', '.', 'FBUtilities.getBroadcastAddress', 'storedRack.equals', 'String.format']
['upperCaseKeys', 'CBUtil.readStringMap']
['CBUtil.writeStringMap']
['CBUtil.sizeOfStringMap']
['options.get', '.', 'String.format', 'e.getMessage', 'options.containsKey', 'options.get', '.', 'compression.equals', 'connection.setCompressor', 'compression.equals', 'connection.setCompressor', 'String.format', 'DatabaseDescriptor.getAuthenticator', '.', 'DatabaseDescriptor.getAuthenticator', '.', '.']
['options.size', 'options.entrySet', 'newMap.put', 'entry.getKey', '.', 'entry.getValue']
[None]
[None]
['restriction.isMultiColumn', 'clusteringColumnsRestrictions.mergeWith', 'restriction.isOnToken', 'partitionKeyRestrictions.mergeWith', 'addSingleColumnRestriction']
['Iterables.concat', 'partitionKeyRestrictions.getFunctions', 'clusteringColumnsRestrictions.getFunctions', 'nonPrimaryKeyRestrictions.getFunctions']
['def.isPartitionKey', 'partitionKeyRestrictions.mergeWith', 'def.isClusteringColumn', 'clusteringColumnsRestrictions.mergeWith', 'nonPrimaryKeyRestrictions.addRestriction']
['indexRestrictions.getRestrictions', 'r.getColumnDefs', 'def.isPrimaryKeyColumn', 'columns.add', 'def.isPrimaryKeyColumn', 'columns.add']
[None]
['notNullColumns.contains', 'column.isPartitionKey', 'partitionKeyRestrictions.getColumnDefs', '.', 'column.isClusteringColumn', 'clusteringColumnsRestrictions.getColumnDefs', '.', 'nonPrimaryKeyRestrictions.getColumnDefs', '.']
['partitionKeyRestrictions.isIN']
[None]
[None]
['type.allowPartitionKeyRanges', 'checkFalse', 'partitionKeyRestrictions.isOnToken', 'hasUnrestrictedPartitionKeyComponents', 'invalidRequest', 'Joiner.on', '.', 'getPartitionKeyUnrestrictedComponents', 'partitionKeyRestrictions.isOnToken', 'hasUnrestrictedPartitionKeyComponents', 'partitionKeyRestrictions.isEmpty', 'invalidRequest', 'Joiner.on', '.', 'getPartitionKeyUnrestrictedComponents']
['partitionKeyRestrictions.size', 'cfm.partitionKeyColumns', '.']
['partitionKeyRestrictions.isEmpty']
['cfm.partitionKeyColumns', 'list.removeAll', 'partitionKeyRestrictions.getColumnDefs', 'ColumnDefinition.toIdentifiers']
['partitionKeyRestrictions.isOnToken']
['checkFalse', 'type.allowClusteringColumnSlices', 'clusteringColumnsRestrictions.isSlice', 'type.allowClusteringColumnSlices', 'cfm.isCompactTable', 'cfm.isCompactTable', 'hasClusteringColumnsRestriction', 'hasUnrestrictedClusteringColumns', 'invalidRequest', 'Joiner.on', '.', 'getUnrestrictedClusteringColumns', 'checkFalse', 'clusteringColumnsRestrictions.isIN', 'checkFalse', 'clusteringColumnsRestrictions.isContains', 'hasClusteringColumnsRestriction', 'cfm.clusteringColumns', 'clusteringColumnsRestrictions.getColumnDefs', 'restrictedColumns.size', 'clusteringColumns.get', 'restrictedColumns.get', 'clusteringColumn.equals', 'checkTrue', 'clusteringColumnsRestrictions.isContains']
['cfm.clusteringColumns', 'missingClusteringColumns.removeAll', 'clusteringColumnsRestrictions.getColumnDefs', 'ColumnDefinition.toIdentifiers']
['cfm.clusteringColumns', '.', 'clusteringColumnsRestrictions.size']
['MessagingService.instance', '.', 'expressions.size', 'expressions.get', 'expression.targetIndex.getCfName', 'cfName.hasKeyspace', 'expression.targetIndex.getKeyspace', '.', 'IndexRestrictions.invalidIndex', 'cfName.getColumnFamily', 'cfName.getColumnFamily', '.', 'IndexRestrictions.invalidIndex', 'cfm.getIndexes', '.', 'expression.targetIndex.getIdx', 'IndexRestrictions.indexNotFound', 'indexManager.getIndex', 'cfm.getIndexes', '.', 'expression.targetIndex.getIdx', '.', 'index.getIndexMetadata', '.', 'IndexRestrictions.nonCustomIndexInExpression', 'index.customExpressionValueType', 'IndexRestrictions.customExpressionNotSupported', 'expression.prepareValue', 'indexRestrictions.add']
['indexRestrictions.isEmpty', 'RowFilter.create', 'indexRestrictions.getRestrictions', 'restrictions.addRowFilterTo', 'indexRestrictions.getCustomIndexExpressions', 'expression.addToRowFilter']
['partitionKeyRestrictions.values']
['hasUnrestrictedPartitionKeyComponents', 'partitionKeyRestrictions.bounds', '.']
['partitionKeyRestrictions.isOnToken', 'getPartitionKeyBoundsForTokenRestrictions', 'getPartitionKeyBounds']
['getPartitionKeyBound', 'getPartitionKeyBound', 'PartitionPosition.ForKey.get', 'PartitionPosition.ForKey.get', 'startKey.compareTo', 'finishKey.isMinimum', 'partitionKeyRestrictions.isInclusive', 'partitionKeyRestrictions.isInclusive', 'partitionKeyRestrictions.isInclusive']
['getTokenBound', 'getTokenBound', 'partitionKeyRestrictions.isInclusive', 'partitionKeyRestrictions.isInclusive', 'startToken.compareTo', 'startToken.isMinimum', 'endToken.isMinimum', 'startToken.minKeyBound', 'startToken.maxKeyBound', 'endToken.maxKeyBound', 'endToken.minKeyBound']
['partitionKeyRestrictions.hasBound', 'p.getMinimumToken', 'partitionKeyRestrictions.bounds', '.', 'checkNotNull', 'p.getTokenFactory', '.']
['clusteringColumnsRestrictions.isEmpty']
['cfm.isStaticCompactTable', 'BTreeSet.empty', 'clusteringColumnsRestrictions.valuesAsClustering']
['clusteringColumnsRestrictions.boundsAsClustering']
['clusteringColumnsRestrictions.isInclusive']
['cfm.isStaticCompactTable', 'cfm.clusteringColumns', '.', 'clusteringColumnsRestrictions.size', 'clusteringColumnsRestrictions.isEQ', 'clusteringColumnsRestrictions.isIN']
['indexRestrictions.getCustomIndexExpressions', '.', 'indexRestrictions.getRestrictions', 'restrictions.size', 'clusteringColumnsRestrictions.isEmpty', 'nonPrimaryKeyRestrictions.hasMultipleContains']
['checkFalse', 'keyIsInRelation', 'checkFalse']
['isPartitionKeyRestrictionsOnToken', 'hasUnrestrictedPartitionKeyComponents', 'partitionKeyRestrictions.isEQ', 'partitionKeyRestrictions.isIN', 'hasUnrestrictedClusteringColumns', 'clusteringColumnsRestrictions.isEQ', 'clusteringColumnsRestrictions.isIN']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['probe.getJoiningNodes', 'probe.getLeavingNodes', 'probe.getMovingNodes', 'probe.getLoadMap', 'probe.getTokenToEndpointMap', 'probe.getLiveNodes', 'probe.getUnreachableNodes', 'probe.getHostIdMap', 'probe.getEndpointSnitchInfoProxy', 'probe.effectiveOwnership', 'probe.getOwnership', 'errors.append', 'e.getMessage', 'System.out.printf', 'ex.getMessage', 'System.exit', 'NodeTool.getOwnershipByDc', 'dcs.values', '.', 'tokensToEndpoints.keySet', '.', 'findMaxAddressLength', 'dcs.entrySet', 'String.format', 'dc.getKey', 'System.out.printf', 'dcHeader.length', 'System.out.print', 'System.out.println', 'System.out.println', 'System.out.println', 'printNodesHeader', 'ArrayListMultimap.create', 'dc.getValue', 'hostToTokens.put', 'hostToTokens.keySet', 'ownerships.get', 'hostToTokens.get', 'printNode', 'endpoint.getHostAddress', 'System.out.printf', 'errors.toString']
['dcs.entrySet', 'dc.getValue', 'Math.max', 'stat.ipOrDns', '.']
['getFormat', 'System.out.printf', 'System.out.printf']
['getFormat', 'liveNodes.contains', 'unreachableNodes.contains', 'joiningNodes.contains', 'leavingNodes.contains', 'movingNodes.contains', 'loadMap.containsKey', 'loadMap.get', '.', 'hostIDMap.get', 'epSnitchInfo.getRack', 'tokens.get', '.', 'System.out.printf', 'tokens.get', 'System.out.printf', 'tokens.size']
['System.out.println', 'probe.isGossipRunning']
['System.out.println', 'String.format', 'probe.isHandoffEnabled', 'probe.getHintedHandoffDisabledDCs', 'System.out.println', 'String.format']
['compactionId.isEmpty', 'probe.stopById', 'probe.stop', 'compactionType.name']
['stopInPartition']
[None]
[None]
[None]
[None]
[None]
[None]
['update']
['bin.get', 'bin.put', 'bin.put', 'bin.size', 'bin.keySet', '.', 'keys.next', 'keys.next', 'keys.hasNext', 'keys.next', 'bin.remove', 'bin.remove', 'bin.put']
['other.getAsMap', '.', 'update', 'entry.getKey', 'entry.getValue']
['bin.higherEntry', 'bin.values', 'bin.floorEntry', 'pi.getKey', 'pnext.getKey', 'pi.getKey', 'pi.getValue', 'pnext.getValue', 'pi.getValue', 'pi.getValue', 'pi.getValue', 'bin.headMap', '.', 'pi.getKey']
['Collections.unmodifiableMap']
['out.writeInt', 'histogram.getAsMap', 'out.writeInt', 'entries.size', 'entries.entrySet', 'out.writeDouble', 'entry.getKey', 'out.writeLong', 'entry.getValue']
['in.readInt', 'in.readInt', 'tmp.put', 'in.readDouble', 'in.readLong']
['TypeSizes.sizeof', 'histogram.getAsMap', 'TypeSizes.sizeof', 'entries.size', 'entries.size']
['bin.equals']
['Objects.hashCode', 'bin.hashCode']
['SystemKeyspace.getPreferredIP', 'logger.info', 'String.format', 'request.ranges.size', 'ActiveRepairService.instance.getParentRepairSession', '.', '.', '.', '.', '.']
[None]
['logger.info', 'String.format', 'MessagingService.instance', '.', '.']
['MessagingService.instance', '.', '.']
[None]
['rateLimiter.getRate', 'rateLimiter.setRate']
['limiter.acquire', 'interDCLimiter.acquire']
['Sets.newHashSet', 'Iterables.transform', 'Iterables.concat', 'initiatedStreams.values', 'receivingStreams.values', 'StreamStateCompositeData.toCompositeData', 'input.getCurrentState']
['StreamStateCompositeData.toCompositeData', 'input.getCurrentState']
['result.addEventListener', 'result.addListener', 'initiatedStreams.remove', 'MoreExecutors.sameThreadExecutor', 'initiatedStreams.put']
['initiatedStreams.remove']
['result.addEventListener', 'result.addListener', 'receivingStreams.remove', 'MoreExecutors.sameThreadExecutor', 'receivingStreams.put']
['receivingStreams.remove']
['receivingStreams.get']
['notifier.addNotificationListener']
['notifier.removeNotificationListener']
['notifier.removeNotificationListener']
['notifier.getNotificationInfo']
['out.writeUTF', 'out.writeLong', 'out.writeInt', 'request.ranges.size', 'MessagingService.validatePartitioner', 'Token.serializer.serialize', 'Token.serializer.serialize', 'out.writeInt', 'request.columnFamilies.size', 'out.writeUTF']
['in.readUTF', 'in.readLong', 'in.readInt', 'Token.serializer.deserialize', 'MessagingService.globalPartitioner', 'Token.serializer.deserialize', 'MessagingService.globalPartitioner', 'ranges.add', 'in.readInt', 'columnFamilies.add', 'in.readUTF']
['TypeSizes.sizeof', 'TypeSizes.sizeof', 'TypeSizes.sizeof', 'request.ranges.size', 'Token.serializer.serializedSize', 'Token.serializer.serializedSize', 'TypeSizes.sizeof', 'request.columnFamilies.size', 'TypeSizes.sizeof']
['settings.maybeCreateKeyspaces', 'output.println', 'Uninterruptibles.sleepUninterruptibly', 'warmup', 'settings.command.getFactory', 'settings.command.truncateTables', 'RateLimiter.create', 'runMulti', 'run', 'settings.command.getFactory', 'output.println', 'output.println', 'settings.disconnect']
['settings.node.nodes.size', 'Math.min', 'Math.min', 'operations.each', 'output.println', 'String.format', 'single.desc', 'run']
[None]
['output.println', 'hasAverageImprovement', 'hasAverageImprovement', 'output.println', 'output.println', 'String.format', 'settings.command.truncateTables', 'run', 'settings.command.getFactory', 'results.add', 'System.out.println', 'String.format', 'averageImprovement', 'runIds.add', 'results.isEmpty', 'output.println', 'Thread.sleep', 'StressMetrics.summarise']
['results.size', 'averageImprovement']
['results.size', 'results.size', 'results.get', '.', '.', '.', 'results.get', '.', '.', '.']
['output.println', 'String.format', 'operations.desc', 'durationUnits.toString', '.', '.', 'metrics.start', 'Uninterruptibles.sleepUninterruptibly', 'workManager.stop', 'metrics.waitUntilConverges', 'workManager.stop', 'done.await', 'metrics.stop', 'metrics.wasCancelled', 'metrics.summarise']
['operations.initTimers', 'settings.getJavaDriverClient', 'settings.getSimpleNativeClient', 'settings.getThriftClient', 'operations.next', 'op.ready', 'op.run', 'op.run', 'op.run', 'System.err.println', 'e.getMessage', 'System.exit', 'e.printStackTrace', 'workManager.stop', 'metrics.cancel', 'done.countDown', 'operations.closeTimers']
['htmlFile.isFile', 'Files.readAllBytes', 'Paths.get', 'htmlFile.toURI', 'parseExistingStats', '.', '.', 'stats.toJSONString', 'getGraphHTML', '.', 'out.write', 'out.close']
['Pattern.compile', 'pattern.matcher', 'matcher.matches', 'JSONValue.parse', 'matcher.group']
['.', '.', 'ByteStreams.toByteArray']
['Pattern.compile', 'reader.readLine', 'line.startsWith', 'threadCountMessage.matcher', 'tc.matches', 'tc.group', 'line.equals', 'line.equals', 'line.equals', 'line.equals', 'line.equals', 'line.split', 'metrics.add', 'm.trim', 'metrics.add', 'intervals.add', 'line.split', 'json.put', '.', '.', 'json.put', 'Arrays.asList', 'json.put', 'json.put', 'json.put', 'String.format', 'json.put', 'StringUtils.join', 'json.put', 'stats.add', 'stats.add']
['json.get', 'parseLogStats', 'json.put', 'json.put']
['getSimpleThriftClient', 'getSmartThriftClient']
['getJavaDriverClient', '.', '.']
['getRawThriftClient', 'node.randomNode']
['getRawThriftClient', 'node.randomNode']
['getRawThriftClient']
['.', '.', 'mode.cqlVersion.isCql', 'client.set_cql_version', 'client.set_keyspace', 'client.login', 'ImmutableMap.of', 'e.getWhy']
['node.randomNode', 'client.connect', 'client.execute', 'e.getMessage']
['getJavaDriverClient']
['node.randomNode', 'transport.getEncryptionOptions', 'c.connect', 'mode.compression', 'c.execute']
['schema.createKeySpaces']
['repairParams', 'parseMap', 'clArgs.containsKey', 'Legacy.build', 'Arrays.copyOfRange', 'SettingsMisc.maybeDoSpecial', 'System.exit', 'get', 'System.out.println', 'e.getMessage', 'System.exit']
['sb.append', 'sb.append', 'sb.toString', '.', '.', '.']
['SettingsCommand.get', 'SettingsMisc.getSendToDaemon', 'SettingsPort.get', 'SettingsRate.get', 'SettingsPopulation.get', 'SettingsInsert.get', 'SettingsColumn.get', 'SettingsSamples.get', 'SettingsErrors.get', 'SettingsLog.get', 'SettingsMode.get', 'SettingsNode.get', 'SettingsSchema.get', 'SettingsTransport.get', 'SettingsGraph.get', 'clArgs.isEmpty', 'printHelp', 'System.out.println', 'clArgs.entrySet', 'System.out.print', 'e.getKey', 'e.getValue', 'System.out.print', 'System.out.print', 'System.out.println', 'System.exit']
['System.out.println', 'printHelp', 'System.exit', '.', 'putParam', 'params.toArray', '.', 'params.clear', 'params.add', 'putParam', 'params.toArray']
['clArgs.put']
['SettingsMisc.printHelp']
['client.disconnect']
['RepairJobDesc.serializer.serialize', 'NodePair.serializer.serialize', 'out.writeBoolean']
['RepairJobDesc.serializer.deserialize', 'NodePair.serializer.deserialize', 'in.readBoolean']
['RepairJobDesc.serializer.serializedSize', 'NodePair.serializer.serializedSize', 'TypeSizes.sizeof']
['CFMetaData.compile', '.', 'String.format']
['KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of']
['String.format', 'parent_id.toString', 'Joiner.on', '.', 'Joiner.on', '.', 'processSilent']
['t.printStackTrace', 'String.format', 'parent_id.toString', 'processSilent', 't.getMessage', 'sw.toString']
['String.format', 'Joiner.on', '.', 'parent_id.toString', 'processSilent']
['FBUtilities.getBroadcastAddress', '.', 'Sets.newHashSet', 'participants.add', 'endpoint.getHostAddress', 'String.format', 'id.toString', 'parent_id.toString', 'range.left.toString', 'range.right.toString', 'Joiner.on', '.', 'RepairState.STARTED.toString', 'processSilent']
['failedRepairJob']
['String.format', 'RepairState.SUCCESS.toString', 'id.toString', 'processSilent']
['t.printStackTrace', 'String.format', 'RepairState.FAILED.toString', 'id.toString', 'processSilent', 't.getMessage', 'sw.toString']
['valueList.add', 'ByteBufferUtil.bytes', 'QueryProcessor.process', 'logger.error']
['CFMetaData.compile', '.', 'String.format']
['KeyspaceMetadata.create', 'KeyspaceParams.local', 'tables', 'Views.none', 'Types.none', 'functions']
['Tables.of']
['Functions.builder', '.', 'UuidFcts.all', '.', 'TimeFcts.all', '.', 'BytesConversionFcts.all', '.', 'AggregateFcts.all', '.', 'CastFcts.all', '.']
['persistLocalMetadata', 'SchemaKeyspace.saveSystemKeyspacesSchema']
['DatabaseDescriptor.getEndpointSnitch', 'executeOnceInternal', 'String.format', 'DatabaseDescriptor.getClusterName', 'FBUtilities.getReleaseVersionString', 'QueryProcessor.CQL_VERSION.toString', 'String.valueOf', 'snitch.getDatacenter', 'FBUtilities.getBroadcastAddress', 'snitch.getRack', 'FBUtilities.getBroadcastAddress', 'DatabaseDescriptor.getPartitioner', '.', '.', 'DatabaseDescriptor.getRpcAddress', 'FBUtilities.getBroadcastAddress', 'FBUtilities.getLocalAddress']
['ksname.equals', 'cfname.equals', 'executeInternal', 'String.format', 'UUIDGen.getTimeUUID', 'ByteBufferUtil.bytes']
['executeInternal', 'String.format', 'CompactionHistoryTabularData.from']
['executeInternal', 'String.format', 'result.isEmpty']
['executeInternal', 'String.format', 'forceBlockingFlush']
['executeInternal', 'String.format', 'forceBlockingFlush', 'executeInternal', 'String.format', 'forceBlockingFlush']
['executeInternal', 'String.format']
['setViewBuilt', 'forceBlockingFlush', 'executeInternal', 'String.format', 'forceBlockingFlush']
['ViewsBuildsInProgress.partitioner.getTokenFactory', 'executeInternal', 'String.format', 'factory.toString']
['executeInternal', 'String.format', 'queryResultSet.isEmpty', 'queryResultSet.one', 'row.has', 'row.getInt', 'row.has', 'ViewsBuildsInProgress.partitioner.getTokenFactory', 'factory.fromString', 'row.getString', 'Pair.create']
['executeInternal', 'String.format', 'truncationAsMapEntry', 'forceBlockingFlush']
['executeInternal', 'String.format', 'forceBlockingFlush']
['ReplayPosition.serializer.serialize', 'out.writeLong', 'singletonMap', 'ByteBuffer.wrap', 'out.getData', 'out.getLength']
['getTruncationRecord']
['getTruncationRecord']
['readTruncationRecords', 'truncationRecords.get']
['executeInternal', 'String.format', 'rows.isEmpty', 'rows.one', '.', 'rows.one', '.', 'map.entrySet', 'records.put', 'entry.getKey', 'truncationRecordFromBlob', 'entry.getValue']
['Pair.create', 'ReplayPosition.serializer.deserialize', 'in.available', 'in.readLong']
['ep.equals', 'FBUtilities.getBroadcastAddress', 'executeInternal', 'String.format', 'tokensAsSet']
['executeInternal', 'String.format', 'forceBlockingFlush']
['ep.equals', 'FBUtilities.getBroadcastAddress', 'executeInternal', 'String.format']
['executeInternal', 'String.format']
['executeInternal', 'String.format']
['tokens.isEmpty', 'Collections.emptySet', 'StorageService.instance.getTokenFactory', 'tokens.size', 's.add', 'factory.toString']
['StorageService.instance.getTokenFactory', 'tokensStrings.size', 'tokens.add', 'factory.fromString']
['executeInternal', 'String.format', 'forceBlockingFlush']
['tokens.isEmpty', 'executeInternal', 'String.format', 'tokensAsSet', 'forceBlockingFlush']
['Boolean.getBoolean', 'FBUtilities.waitOnFuture', 'Keyspace.open', '.', '.']
['HashMultimap.create', 'executeInternal', 'row.getInetAddress', 'row.has', 'tokenMap.putAll', 'deserializeTokens', 'row.getSet']
['executeInternal', 'row.getInetAddress', 'row.has', 'hostIdMap.put', 'row.getUUID']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'result.one', '.']
['executeInternal', 'row.getInetAddress', 'row.has', 'row.has', 'dcRack.put', 'row.getString', 'dcRack.put', 'row.getString', 'result.put']
['FBUtilities.getBroadcastAddress', '.', 'FBUtilities.getReleaseVersionString', 'executeInternal', 'String.format', 'result.one', '.', 'result.one', '.']
['Keyspace.open', 'ex.initCause', 'keyspace.getColumnFamilyStore', 'executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'cfs.getLiveSSTables', '.', 'result.one', '.', 'DatabaseDescriptor.getClusterName', '.', 'DatabaseDescriptor.getClusterName']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'Collections.<', 'deserializeTokens', 'result.one', '.']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'System.currentTimeMillis', 'result.one', '.', 'System.currentTimeMillis', 'logger.warn', 'executeInternal', 'String.format', 'forceBlockingFlush']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'BootstrapState.valueOf', 'result.one', '.']
['getBootstrapState']
['getBootstrapState']
['getBootstrapState']
['executeInternal', 'String.format', 'state.name', 'forceBlockingFlush']
['executeInternal', 'String.format', 'result.isEmpty']
['executeInternal', 'String.format', 'forceBlockingFlush']
['executeInternal', 'String.format', 'forceBlockingFlush']
['executeInternal', 'String.format', 'StreamSupport.stream', '.', 'r.getString', '.', 'Collectors.toList', 'results.spliterator']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'result.one', '.', 'UUID.randomUUID', 'logger.warn', 'setLocalHostId']
['executeInternal', 'String.format']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'result.one', '.']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'result.one', '.']
['executeInternal', 'String.format', 'key.getKey', 'results.isEmpty', 'results.one', 'row.has', 'row.getUUID', 'metadata.partitionColumns', 'Commit.emptyCommit', 'row.has', 'row.getInt', 'row.has', 'row.getUUID', 'PartitionUpdate.fromBytes', 'row.getBytes', 'Commit.emptyCommit', 'row.has', 'row.getInt', 'row.has', 'row.getUUID', 'PartitionUpdate.fromBytes', 'row.getBytes', 'Commit.emptyCommit']
['executeInternal', 'String.format', 'UUIDGen.microsTimestamp', 'paxosTtl', 'promise.update.metadata', 'promise.update.partitionKey', '.', 'promise.update.metadata']
['executeInternal', 'String.format', 'UUIDGen.microsTimestamp', 'paxosTtl', 'proposal.update.metadata', 'PartitionUpdate.toBytes', 'proposal.update.partitionKey', '.', 'proposal.update.metadata']
['Math.max']
['executeInternal', 'String.format', 'UUIDGen.microsTimestamp', 'paxosTtl', 'commit.update.metadata', 'PartitionUpdate.toBytes', 'commit.update.partitionKey', '.', 'commit.update.metadata']
['executeInternal', 'String.format', 'results.isEmpty', 'results.one', 'row.getDouble', 'row.getDouble']
['executeInternal', 'String.format', 'meter.fifteenMinuteRate', 'meter.twoHourRate']
['executeInternal', 'String.format']
['FBUtilities.timestampMicros', 'UTF8Type.instance.decompose', 'SizeEstimates.partitionColumns', 'estimates.size', 'FBUtilities.nowInSeconds', 'update.add', 'Slice.make', 'estimates.entrySet', 'entry.getKey', 'entry.getValue', '.', 'range.left.toString', 'range.right.toString', '.', '.', '.', 'mutation.apply']
['String.format', 'executeInternal']
['completedRanges.size', 'rangesToUpdate.add', 'rangeToBytes', 'executeInternal', 'String.format']
['executeInternal', 'String.format', 'row.getSet', 'result.add', 'byteBufferToRange', 'ImmutableSet.copyOf']
['Keyspace.open', '.', 'availableRanges.truncateBlocking']
['getPreviousVersionString', 'FBUtilities.getReleaseVersionString', 'previous.equals', 'NULL_VERSION.toString', 'previous.equals', 'logger.info', 'Keyspace.getTimestampedSnapshotName', 'String.format', 'Keyspace.open', 'systemKs.snapshot']
['executeInternal', 'String.format', 'result.isEmpty', 'result.one', '.', 'Directories.getKSChildDirectories', 'dataDirectory.getName', '.', 'dataDirectory.listFiles', 'logger.trace', 'UNREADABLE_VERSION.toString', 'NULL_VERSION.toString', 'result.one', '.']
['Arrays.asList', 'DatabaseDescriptor.getAllDataFileLocations', 'logger.trace', 'dir.exists', 'dir.listFiles', '.', 'logger.trace', 'ksdir.listFiles', '.', 'logger.trace', 'Descriptor.isLegacyFile', 'FileUtils.deleteRecursive', 'FileUtils.delete', 'cfdir.listFiles', 'Descriptor.isLegacyFile']
['Range.tokenSerializer.serialize', 'out.buffer']
['Range.tokenSerializer.deserialize', 'ByteStreams.newDataInput', 'ByteBufferUtil.getArray']
['args.size', 'args.get', 'args.get', 'args.size', 'args.get', '.', 'checkArgument', 'checkArgument', 'probe.getColumnFamilyMetric', 'probe.getColumnFamilyMetric', 'ArrayUtils.isEmpty', 'ArrayUtils.isEmpty', 'System.err.println', 'partitionSizeHist.isOverflowed', 'System.err.println', 'String.format', 'partitionSizeHist.getLargestBucketOffset', 'partitionSizeHist.percentile', 'columnCountHist.isOverflowed', 'System.err.println', 'String.format', 'columnCountHist.getLargestBucketOffset', 'columnCountHist.percentile', 'partitionSizeHist.min', 'columnCountHist.min', 'partitionSizeHist.max', 'columnCountHist.max', 'probe.metricPercentilesAsArray', 'probe.getColumnFamilyMetric', 'probe.metricPercentilesAsArray', 'probe.getColumnFamilyMetric', 'probe.metricPercentilesAsArray', 'probe.getColumnFamilyMetric', 'System.out.println', 'format', 'System.out.println', 'format', 'System.out.println', 'format', 'System.out.println', 'format', 'System.out.println']
['name', '.']
[None]
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
['compaction.validate', 'compression.validate', 'fail', 'fail', 'fail', 'fail', 'fail', 'fail', 'fail', 'fail', 'fail']
['format']
['comment.equals', 'speculativeRetry.equals', 'caching.equals', 'compaction.equals', 'compression.equals', 'extensions.equals']
['Objects.hashCode']
['MoreObjects.toStringHelper', '.', 'Option.COMMENT.toString', '.', 'Option.READ_REPAIR_CHANCE.toString', '.', 'Option.DCLOCAL_READ_REPAIR_CHANCE.toString', '.', 'Option.BLOOM_FILTER_FP_CHANCE.toString', '.', 'Option.CRC_CHECK_CHANCE.toString', '.', 'Option.GC_GRACE_SECONDS.toString', '.', 'Option.DEFAULT_TIME_TO_LIVE.toString', '.', 'Option.MEMTABLE_FLUSH_PERIOD_IN_MS.toString', '.', 'Option.MIN_INDEX_INTERVAL.toString', '.', 'Option.MAX_INDEX_INTERVAL.toString', '.', 'Option.SPECULATIVE_RETRY.toString', '.', 'Option.CACHING.toString', '.', 'Option.COMPACTION.toString', '.', 'Option.COMPRESSION.toString', '.', 'Option.EXTENSIONS.toString', '.']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['ImmutableMap.copyOf']
[None]
['builder', '.']
['builder', '.', '.']
['builder', '.', '.']
['tables.values', '.']
['tables.size']
['Optional.ofNullable', 'tables.get']
['tables.get']
['get', '.', 'String.format', 'builder', '.', '.', '.']
['get', '.', 'String.format', 'builder', '.', 'filter', '.']
['Maps.difference']
['tables.equals']
['tables.hashCode']
['tables.values', '.']
[None]
['tables.put']
['add']
['tables.forEach']
['tsocket.getSocketChannel', 'tsocket.getSocketChannel', '.', 'socket.setKeepAlive', 'logger.warn', 'socket.setSendBufferSize', '.', 'logger.warn', 'socket.setReceiveBufferSize', '.', 'logger.warn']
['aai.appendLoopOnAppenders']
['aai.addAppender']
['aai.detachAndStopAllAppenders']
['aai.detachAppender']
['aai.detachAppender']
['aai.getAppender']
['aai.isAttached']
['aai.iteratorForAppenders']
['detachAndStopAllAppenders']
['System.out.println', 'socket.open', 'DatabaseDescriptor.getSeeds', '.', '.', '.', 'ConfigHelper.setOutputPartitioner', 'DatabaseDescriptor.getPartitioner', '.', '.', 'ConfigHelper.setOutputInitialAddress', 'ConfigHelper.setOutputRpcPort', 'Integer.toString', 'DatabaseDescriptor.getRpcPort']
['Integer.parseInt', 'ByteBufferUtil.bytes', '.', '.', 'STR_.getBytes', '.', 'tester.ringCache.getEndpoint', 'endpoints.iterator', '.', 'System.out.printf', 'row.array', 'StringUtils.join', 'tester.setup', 'firstEndpoint.getHostAddress', 'DatabaseDescriptor.getRpcPort', 'tester.thriftClient.set_keyspace', 'tester.thriftClient.insert', '.', 'ByteBufferUtil.bytes', '.', 'ByteBufferUtil.bytes', 'tester.thriftClient.get', 'System.out.println', 'row.array', 'column.name.array', 'column.value.array', 'System.exit']
[None]
['select', '.', 'columns.add', 'counteradd.next', 'columns.size', '.', 'mutations.add', '.', 'Collections.singletonMap', 'getKey', 'Collections.singletonMap', 'timeWithRetry', 'client.batch_mutate']
['client.batch_mutate']
[None]
[None]
[None]
['getKey', 'getColumns', 'columns.size', '.', 'mutations.add', '.', 'Collections.singletonMap', 'Collections.singletonMap', 'timeWithRetry', 'client.batch_mutate']
['client.batch_mutate']
[None]
[None]
['select', 'getColumnValues', 'values.size', 'select', '.', 'values.size', 'columns.add', '.', 'values.get', '.', 'Long.parseLong', 'FBUtilities.timestampMicros', 'names.get']
['metadata.isStaticCompactTable', 'metadata.isSuper', 'Transformation.apply']
['iterator.metadata', '.', 'iterator.metadata', '.', 'iterator.metadata', '.', 'Transformation.apply']
['iter.metadata', '.', 'Transformation.apply']
['staticRow.hasComplex', 'staticRow.cells', '.', 'updateNextToMerge']
[None]
['init']
['init', 'consumeNextToMerge', 'consumeNextWrapped', 'metadata', '.', 'consumeNextToMerge', 'consumeNextWrapped', 'Rows.merge', 'consumeNextWrapped', 'consumeNextToMerge']
[None]
['updateNextToMerge']
['staticCells.hasNext', 'staticCells.next', 'builder.newRow', 'cell.column', 'builder.addCell', 'metadata', '.', 'cell.timestamp', 'cell.ttl', 'cell.localDeletionTime', 'cell.value', 'cell.path', 'builder.build']
['Iterators.peekingIterator', 'simpleCellsIterator', 'staticCells.hasNext', 'builder.newRow', 'row.clustering', 'row.getComplexColumnData', 'Iterators.peekingIterator', 'Collections.<', 'complexData.iterator', 'builder.addComplexDeletion', 'complexData.complexDeletion', 'staticCells.hasNext', 'dynamicCells.hasNext', 'staticCells.peek', 'dynamicCells.peek', 'columnComparator.compare', 'staticCell.column', 'dynamicCell.path', '.', 'builder.addCell', 'makeDynamicCell', 'staticCells.next', 'builder.addCell', 'dynamicCells.next', 'builder.addCell', 'Cells.reconcile', 'makeDynamicCell', 'staticCells.next', 'dynamicCells.next', 'staticCells.hasNext', 'builder.addCell', 'makeDynamicCell', 'staticCells.next', 'dynamicCells.hasNext', 'builder.addCell', 'dynamicCells.next', 'builder.build']
['staticCell.timestamp', 'staticCell.ttl', 'staticCell.localDeletionTime', 'staticCell.value', 'CellPath.create', 'staticCell.column']
['row.cells', '.', 'cells.hasNext', 'cells.next', 'cell.column', '.', 'endOfData']
['cells.hasNext', 'cells.next', 'cell.column', '.', 'endOfData']
['key.remaining', 'key.remaining', 'key.remaining', 'metadata.getKeyValidator', '.', 'e.getMessage']
['Schema.instance.getKeyspaces', '.']
['validateColumnFamily', 'metadata.isCounter', 'metadata.isCounter']
['validateKeyspace', 'cfName.isEmpty', 'Schema.instance.getCFMetaData']
['metadata.isSuper', 'validateColumnNames', 'Arrays.asList', 'validateColumnNames', 'Arrays.asList']
['metadata.isSuper', 'validateColumnNames', 'Arrays.asList']
['metadata.isSuper', 'validateColumnNames', 'Arrays.asList', 'validateColumnNames', 'Arrays.asList']
['metadata.isSuper', 'LegacyLayout.makeLegacyComparator', 'metadata.comparator.subtype', 'metadata.thriftColumnNameType']
['validateColumnNames']
['range.start.remaining', 'range.finish.remaining', 'getThriftColumnNameComparator', 'comparator.validate', 'comparator.validate', 'e.getMessage', 'range.isReversed', 'range.start.remaining', 'range.finish.remaining', 'orderedComparator.compare']
['column.isSetTtl', 'String.format']
['validateColumnNames', 'Arrays.asList', 'validateSlicePredicate', 'metadata.isSuper', 'String.format', 'metadata.isCounter', 'FBUtilities.timestampMicros', 'del.isSetTimestamp']
['validateRange', '.', 'validateColumnNames']
['validateTtl', 'column.isSetValue', 'column.isSetTimestamp', 'LegacyLayout.decodeCellName', 'cn.column.validateCellValue', 'e.getMessage', 'logger.isTraceEnabled', 'logger.trace', 'ByteBufferUtil.bytesToHex', 'summarize', 'String.format', 'me.getMessage', 'getThriftColumnNameComparator', '.']
['buffer.remaining', 'buffer.slice', '.', 'buffer.position']
['p.getToken', 'p.getToken', 'startToken.compareTo', 'endToken.isMinimum', 'p.preservesOrder', 'p.getTokenFactory', '.', '.', 'PartitionPosition.ForKey.get', '.', 'stop.isMinimum', 'validateFilterClauses', 'isEmpty']
['clause.isEmpty']
['Schema.instance.getKeyspaces', 'ksName.equalsIgnoreCase', 'String.format']
['Schema.isSystemKeyspace', 'String.format']
['existingFail.addSuppressed']
['failIfCanCast']
['failIfCanCast']
['checked.isInstance', 'checked.cast']
['perform', 'Stream.of']
['perform', 'Stream.concat', 'Stream.of']
['perform', 'failIfCanCast']
['perform', 'Arrays.stream']
['perform', 'actions.iterator']
['actions.hasNext', 'actions.next', 'action.perform', 'merge']
['perform', 'against.getPath']
['maybeFail', 'perform']
['perform', 'Arrays.stream']
['perform', 'actions.map', 'action.perform']
['closeable.close', 'merge']
[None]
[None]
[None]
['setAcknowledged_byIsSet', 'setAcknowledged_by_batchlogIsSet', 'setPaxos_in_progressIsSet']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['EncodingUtils.clearBit']
['EncodingUtils.testBit']
['EncodingUtils.setBit']
['unsetAcknowledged_by', 'setAcknowledged_by', 'unsetAcknowledged_by_batchlog', 'setAcknowledged_by_batchlog', 'unsetPaxos_in_progress', 'setPaxos_in_progress']
['Integer.valueOf', 'getAcknowledged_by', 'Boolean.valueOf', 'isAcknowledged_by_batchlog', 'Boolean.valueOf', 'isPaxos_in_progress']
['isSetAcknowledged_by', 'isSetAcknowledged_by_batchlog', 'isSetPaxos_in_progress']
['.']
['.', 'that.isSetAcknowledged_by', '.', 'that.isSetAcknowledged_by_batchlog', '.', 'that.isSetPaxos_in_progress']
['isSetAcknowledged_by', 'builder.append', 'builder.append', 'isSetAcknowledged_by_batchlog', 'builder.append', 'builder.append', 'isSetPaxos_in_progress', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetAcknowledged_by', 'isSetAcknowledged_by', 'isSetAcknowledged_by', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetAcknowledged_by_batchlog', 'isSetAcknowledged_by_batchlog', 'isSetAcknowledged_by_batchlog', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetPaxos_in_progress', 'isSetPaxos_in_progress', 'isSetPaxos_in_progress', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['isSetAcknowledged_by', 'sb.append', 'sb.append', 'isSetAcknowledged_by_batchlog', 'sb.append', 'sb.append', 'sb.append', 'isSetPaxos_in_progress', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
[None]
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'struct.isSetAcknowledged_by', 'oprot.writeFieldBegin', 'oprot.writeI32', 'oprot.writeFieldEnd', 'struct.isSetAcknowledged_by_batchlog', 'oprot.writeFieldBegin', 'oprot.writeBool', 'oprot.writeFieldEnd', 'struct.isSetPaxos_in_progress', 'oprot.writeFieldBegin', 'oprot.writeBool', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['struct.isSetAcknowledged_by', 'optionals.set', 'struct.isSetAcknowledged_by_batchlog', 'optionals.set', 'struct.isSetPaxos_in_progress', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetAcknowledged_by', 'oprot.writeI32', 'struct.isSetAcknowledged_by_batchlog', 'oprot.writeBool', 'struct.isSetPaxos_in_progress', 'oprot.writeBool']
['iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'struct.setAcknowledged_byIsSet', 'incoming.get', 'iprot.readBool', 'struct.setAcknowledged_by_batchlogIsSet', 'incoming.get', 'iprot.readBool', 'struct.setPaxos_in_progressIsSet']
['ThreadLocalRandom.current']
['System.nanoTime']
[None]
[None]
['maybeReport', 'System.nanoTime', 'rnd.nextInt', 'p', 'index']
[None]
['Arrays.asList', 'Arrays.copyOf', 'index', 'p', 'Arrays.copyOfRange', 'index', 'Math.min', 'p', 'SampleOfLongs.merge']
['buildReport', 'reportRequest.countDown']
['signal.countDown']
['buildReport', 'buildReport', 'reportRequest.countDown']
['identityDistribution.next']
['TimeSerializer.timeStringToLong', 'String.format', 'TimeUnit.MICROSECONDS.toNanos', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeUnit.MILLISECONDS.toNanos', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeUnit.SECONDS.toNanos', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeUnit.MINUTES.toNanos', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeUnit.HOURS.toNanos', 'TimeSerializer.timeStringToLong', 'String.format', 'buildExpected', 'TimeSerializer.timeStringToLong', 'String.format', 'buildExpected', 'TimeSerializer.timeStringToLong', 'String.format', 'buildExpected', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeSerializer.timeStringToLong', 'String.format', 'TimeSerializer.timeStringToLong', 'String.format']
['TimeUnit.HOURS.toNanos', 'TimeUnit.MINUTES.toNanos', 'TimeUnit.SECONDS.toNanos', 'TimeUnit.MILLISECONDS.toNanos', 'TimeUnit.MICROSECONDS.toNanos']
['TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'source.equals', 'TimeSerializer.instance.toString', 'TimeSerializer.timeStringToLong', 'TimeSerializer.instance.toString', 'result.equals', 'TimeSerializer.timeStringToLong', 'TimeSerializer.instance.toString', 'result.equals', 'TimeSerializer.timeStringToLong', 'TimeSerializer.instance.toString', 'result.equals']
['TimeSerializer.timeStringToLong', 'TimeSerializer.instance.serialize', 'TimeSerializer.instance.validate', 'TimeSerializer.instance.deserialize', 'TimeSerializer.instance.toString', 'strResult.equals']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeSerializer.timeStringToLong']
['TimeUnit.DAYS.toNanos', 'TimeSerializer.timeStringToLong', 'input.toString']
['createTable', 'execute', 'assertRows', 'execute', 'row', 'assertInvalid']
['createTable', 'execute', 'execute', 'getRows', 'execute', 'Assert.assertEquals', 'assertTrue', '.', 'assertNull', 'assertTrue', 'getRows', 'execute', 'Assert.assertEquals', 'assertTrue', '.', 'assertNull', 'assertTrue', 'getRows', 'execute', 'Assert.assertEquals', 'assertTrue', '.', 'assertNull', 'assertTrue', 'assertInvalid', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'assertInvalid', 'assertInvalid', 'execute', 'assertInvalid', 'createTable', 'execute', 'assertInvalid', 'execute', 'assertInvalid', 'assertInvalid']
['createTable']
['dateGen.setSeed']
['UUIDGen.getTimeUUID', 'dateGen.generate', '.']
['String.format']
['ThreadLocalRandom.current', 'Math.max', 'Math.max', 'latencies.addAll', 'Arrays.asList', 'Math.max', 'Math.min', 'SampleOfLongs.merge']
[None]
[None]
[None]
[None]
[None]
[None]
['sample.medianLatency']
['sample.rankLatency']
[None]
[None]
[None]
['getStringValue']
['String.format', 'opRate', 'String.format', 'rowRate', 'String.format', 'adjustedRowRate', 'String.format', 'partitionRate', 'String.format', 'meanLatency', 'String.format', 'maxLatency', 'String.format', 'medianLatency', 'String.format', 'rankLatency', 'String.format', 'String.format']
[None]
[None]
[None]
['token.getPartitioner', 'p.getTokenFactory', '.', 'ByteBufferUtil.writeWithLength']
['in.readInt', 'in.readFully', 'p.getTokenFactory', '.', 'ByteBuffer.wrap']
['object.getPartitioner', 'p.getTokenFactory', '.', 'TypeSizes.sizeof', 'b.remaining', 'b.remaining']
[None]
[None]
[None]
[None]
[None]
[None]
['getPartitioner', '.']
['.', 'minValue']
[None]
['isMinimum', 'minKeyBound']
['klass.equals', 'getClass', 'maxKeyBound']
[None]
['getToken', '.', 'pos.getToken']
['getToken', '.']
['getPartitioner', '.', '.']
['getToken', '.']
[None]
['.', 'obj.getClass', 'token.equals']
['getToken', '.']
['String.format', 'getToken', '.']
['StorageService.instance.getTokenMetadata', 'tmd.updateNormalToken', 'token', 'InetAddress.getByName', 'tmd.updateNormalToken', 'token', 'InetAddress.getByName']
['Iterators.addAll', 'TokenMetadata.ringIterator', 'token', 'assertEquals', 'actual.toString', 'actual.size', 'assertEquals', 'token', 'actual.get']
['tmd.sortedTokens', 'testRingIterator', 'testRingIterator', 'testRingIterator', 'testRingIterator']
['tmd.sortedTokens', 'testRingIterator', 'testRingIterator', 'testRingIterator', 'testRingIterator']
['testRingIterator']
['InetAddress.getByName', 'InetAddress.getByName', 'DatabaseDescriptor.setEndpointSnitch', 'endpoint.equals', 'tmd.updateNormalToken', 'token', 'tmd.updateNormalToken', 'token', 'tmd.cloneOnlyTokenMap', 'assertNotNull', 'tokenMetadata.getTopology', 'assertNotNull', 'topology.getDatacenterEndpoints', 'assertNotNull', 'assertTrue', 'allEndpoints.size', 'assertTrue', 'allEndpoints.containsKey', 'assertTrue', 'allEndpoints.get', '.', 'assertTrue', 'allEndpoints.get', '.', 'topology.getDatacenterRacks', 'assertNotNull', 'assertTrue', 'racks.size', 'assertTrue', 'racks.containsKey', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', '.', 'assertTrue', 'racks.get', '.', '.', 'DatabaseDescriptor.setEndpointSnitch', 'tokenMetadata.updateTopology', 'tokenMetadata.updateTopology', 'topology.getDatacenterEndpoints', 'assertNotNull', 'assertTrue', 'allEndpoints.size', 'assertTrue', 'allEndpoints.containsKey', 'assertTrue', 'allEndpoints.get', '.', 'assertTrue', 'allEndpoints.get', '.', 'topology.getDatacenterRacks', 'assertNotNull', 'assertTrue', 'racks.size', 'assertTrue', 'racks.containsKey', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertFalse', 'racks.get', '.', 'assertTrue', 'racks.get', '.', '.', 'assertTrue', 'racks.get', '.', '.']
['endpoint.equals']
[None]
[None]
[None]
[None]
[None]
['InetAddress.getByName', 'InetAddress.getByName', 'DatabaseDescriptor.setEndpointSnitch', 'tmd.updateNormalToken', 'token', 'tmd.updateNormalToken', 'token', 'tmd.cloneOnlyTokenMap', 'assertNotNull', 'tokenMetadata.getTopology', 'assertNotNull', 'topology.getDatacenterEndpoints', 'assertNotNull', 'assertTrue', 'allEndpoints.size', 'assertTrue', 'allEndpoints.containsKey', 'assertTrue', 'allEndpoints.get', '.', 'assertTrue', 'allEndpoints.get', '.', 'topology.getDatacenterRacks', 'assertNotNull', 'assertTrue', 'racks.size', 'assertTrue', 'racks.containsKey', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertFalse', 'racks.get', '.', 'assertTrue', 'racks.get', '.', '.', 'assertTrue', 'racks.get', '.', '.', 'DatabaseDescriptor.setEndpointSnitch', 'endpoint.equals', 'tokenMetadata.updateTopology', 'topology.getDatacenterEndpoints', 'assertNotNull', 'assertTrue', 'allEndpoints.size', 'assertTrue', 'allEndpoints.containsKey', 'assertTrue', 'allEndpoints.get', '.', 'assertTrue', 'allEndpoints.get', '.', 'topology.getDatacenterRacks', 'assertNotNull', 'assertTrue', 'racks.size', 'assertTrue', 'racks.containsKey', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', 'assertTrue', 'racks.get', '.', '.', 'assertTrue', 'racks.get', '.', '.']
[None]
[None]
[None]
['endpoint.equals']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['.']
['.']
['.']
[None]
[None]
[None]
[None]
[None]
['unsetStart_token', 'setStart_token', 'unsetEnd_token', 'setEnd_token', 'unsetEndpoints', 'setEndpoints', 'unsetRpc_endpoints', 'setRpc_endpoints', 'unsetEndpoint_details', 'setEndpoint_details']
['getStart_token', 'getEnd_token', 'getEndpoints', 'getRpc_endpoints', 'getEndpoint_details']
['isSetStart_token', 'isSetEnd_token', 'isSetEndpoints', 'isSetRpc_endpoints', 'isSetEndpoint_details']
['.']
['.', 'that.isSetStart_token', '.', '.', 'that.isSetEnd_token', '.', '.', 'that.isSetEndpoints', '.', '.', 'that.isSetRpc_endpoints', '.', '.', 'that.isSetEndpoint_details', '.']
['isSetStart_token', 'builder.append', 'builder.append', 'isSetEnd_token', 'builder.append', 'builder.append', 'isSetEndpoints', 'builder.append', 'builder.append', 'isSetRpc_endpoints', 'builder.append', 'builder.append', 'isSetEndpoint_details', 'builder.append', 'builder.append', 'builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.', 'Boolean.valueOf', '.', 'other.isSetStart_token', 'isSetStart_token', 'isSetStart_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetEnd_token', 'isSetEnd_token', 'isSetEnd_token', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetEndpoints', 'isSetEndpoints', 'isSetEndpoints', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetRpc_endpoints', 'isSetRpc_endpoints', 'isSetRpc_endpoints', 'org.apache.thrift.TBaseHelper.compareTo', 'Boolean.valueOf', '.', 'other.isSetEndpoint_details', 'isSetEndpoint_details', 'isSetEndpoint_details', 'org.apache.thrift.TBaseHelper.compareTo']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetRpc_endpoints', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'isSetEndpoint_details', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.append', 'sb.toString']
['toString', 'toString', 'toString']
['write']
['read']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeString', 'oprot.writeFieldEnd', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.endpoints.size', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'struct.isSetRpc_endpoints', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.rpc_endpoints.size', 'oprot.writeString', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'struct.isSetEndpoint_details', 'oprot.writeFieldBegin', 'oprot.writeListBegin', 'struct.endpoint_details.size', '_iter67.write', 'oprot.writeListEnd', 'oprot.writeFieldEnd', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
['oprot.writeString', 'oprot.writeString', 'oprot.writeI32', 'struct.endpoints.size', 'oprot.writeString', 'struct.isSetRpc_endpoints', 'optionals.set', 'struct.isSetEndpoint_details', 'optionals.set', 'oprot.writeBitSet', 'struct.isSetRpc_endpoints', 'oprot.writeI32', 'struct.rpc_endpoints.size', 'oprot.writeString', 'struct.isSetEndpoint_details', 'oprot.writeI32', 'struct.endpoint_details.size', '_iter70.write']
['iprot.readString', 'struct.setStart_tokenIsSet', 'iprot.readString', 'struct.setEnd_tokenIsSet', 'iprot.readI32', 'iprot.readString', 'struct.endpoints.add', 'struct.setEndpointsIsSet', 'iprot.readBitSet', 'incoming.get', 'iprot.readI32', 'iprot.readString', 'struct.rpc_endpoints.add', 'struct.setRpc_endpointsIsSet', 'incoming.get', 'iprot.readI32', '_elem79.read', 'struct.endpoint_details.add', 'struct.setEndpoint_detailsIsSet']
[None]
[None]
['columnDefs.get']
['columnDefs.get', 'columnDefs.size']
[None]
[None]
[None]
[None]
[None]
['Joiner.on', '.', 'ColumnDefinition.toIdentifiers']
['otherRestriction.isOnToken', 'toPrimaryKeyRestriction', 'doMergeWith']
[None]
['.']
[None]
['value.getFunctions']
['invalidRequest', 'Joiner.on', '.', 'ColumnDefinition.toIdentifiers']
['Collections.singletonList', 'value.bindAndGet']
[None]
[None]
['slice.hasBound']
['Collections.singletonList', 'slice.bound', '.']
['slice.getFunctions']
['slice.isInclusive']
['String.format']
['DatabaseDescriptor.setTombstoneFailureThreshold']
['DatabaseDescriptor.setTombstoneFailureThreshold']
['createTable', 'execute', 'execute', 'fail']
['createTable', 'execute', 'execute', 'fail', 'System.lineSeparator', 'Throwables.getStackTraceAsString', 'assertTrue']
['createTable', 'execute', 'execute', 'execute', 'fail']
['createTable', 'execute', 'execute', 'execute', 'fail']
['createTable', 'execute', 'execute', 'fail', 'assertTrue', 'TimeUnit.SECONDS.sleep', 'execute', 'fail']
['sampler.beginSampling', 'insert', 'waitForEmpty', 'sampler.finishSampling', 'sampler2.beginSampling', 'sampler2.addSample', 'MurmurHash.hash64', 'waitForEmpty', 'Assert.assertEquals', 'countMap', 'countMap', 'sampler2.finishSampling', 'Assert.assertEquals', 'sampler2.hll.cardinality', 'Assert.assertEquals', 'sampler.hll.cardinality', 'sampler2.hll.cardinality']
['sampler.beginSampling', 'insert', 'waitForEmpty', 'sampler.finishSampling', 'sampler.finishSampling']
['.', 'running.get', 'insert', 'latch.countDown', 'sampler.beginSampling', 'sampler.finishSampling', 'sampler.beginSampling', 'Thread.sleep', 'sampler.finishSampling', 'running.set', 'latch.await', 'waitForEmpty', 'sampler.beginSampling', 'Thread.sleep', 'sampler.finishSampling', 'running.set']
['running.get', 'insert', 'latch.countDown']
['sampler.addSample', 'MurmurHash.hash64']
['TopKSampler.samplerExecutor.getQueue', '.', 'Uninterruptibles.sleepUninterruptibly']
['Maps.newHashMap', 'counts.put', 'counter.getItem', 'counter.getCount']
['System.out.printf', 'probe.getThreadPools', 'threadPools.entries', 'System.out.printf', 'tpool.getValue', 'probe.getThreadPoolMetric', 'tpool.getKey', 'tpool.getValue', 'probe.getThreadPoolMetric', 'tpool.getKey', 'tpool.getValue', 'probe.getThreadPoolMetric', 'tpool.getKey', 'tpool.getValue', 'probe.getThreadPoolMetric', 'tpool.getKey', 'tpool.getValue', 'probe.getThreadPoolMetric', 'tpool.getKey', 'tpool.getValue', 'System.out.printf', 'probe.getDroppedMessages', '.', 'System.out.printf', 'entry.getKey', 'entry.getValue']
['CFMetaData.compile', '.', 'String.format']
['KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of']
['.', '.', '.', 'FBUtilities.getBroadcastAddress', '.', '.', '.', 'FBUtilities.timestampMicros', 'parameters.entrySet', 'adder.addMapEntry', 'entry.getKey', 'entry.getValue', 'adder.build']
['.', '.', '.', 'FBUtilities.timestampMicros']
['.', 'UUIDGen.getTimeUUID', 'FBUtilities.timestampMicros', 'adder.add', 'adder.add', 'FBUtilities.getBroadcastAddress', 'adder.add', 'adder.add', 'adder.build']
[None]
['value.ordinal']
['ordinal']
['isTracing', 'state.get']
['isTracing', 'state.get']
['isTracing', 'state.get']
['instance.state.get']
['newSession']
['newSession', 'TimeUUIDType.instance.compose', 'ByteBuffer.wrap', 'UUIDGen.getTimeUUIDBytes']
['newSession']
['state.get', 'state.set', 'sessions.put']
['state.releaseReference', 'sessions.remove']
['state.get']
['sessions.get']
['state.set']
['begin']
['isTracing', '.', 'System.currentTimeMillis', 'state.traceType.toString', 'TraceState.executeMutation', 'TraceKeyspace.makeStartSessionMutation']
['message.parameters.get', 'UUIDGen.getUUID', 'ByteBuffer.wrap', 'sessions.get', 'ts.acquireReference', 'message.parameters.get', 'TraceType.deserialize', 'sessions.put']
['instance.get', 'state.trace']
['instance.get', 'state.trace']
['instance.get', 'state.trace']
['instance.get', 'state.trace']
['instance.get', 'state.trace']
['received.add', 'senders.add']
['MockSchema.cleanup']
['MockSchema.newCFS', 'ImmutableList.of', 'MockSchema.sstable', 'MockSchema.sstable', 'MockSchema.sstable', 'tracker.addInitialSSTables', 'copyOf', 'Assert.assertNull', 'tracker.tryModify', 'ImmutableList.of', 'MockSchema.sstable', 'tracker.tryModify', 'readers.get', 'Assert.assertNotNull', 'Assert.assertNull', 'tracker.tryModify', 'readers.get', 'Assert.assertEquals', 'txn.originals', '.', 'Assert.assertTrue', 'txn.originals', '.', 'readers.get', 'tracker.tryModify', 'Collections.<', 'Assert.assertNotNull', 'Assert.assertEquals', 'txn.originals', '.', 'readers.get', '.', '.']
['MockSchema.newCFS', 'ViewTest.fakeView', 'tracker.apply', 'count.incrementAndGet', 'tracker.view.set', 'ViewTest.fakeView', 'Assert.assertEquals', 'count.get', 'Assert.assertEquals', 'tracker.getView', 'count.set', 'Assert.assertNull', 'tracker.apply', 'count.incrementAndGet', 'Assert.assertEquals', 'count.get', 'Assert.assertEquals', 'tracker.getView']
['count.incrementAndGet', 'tracker.view.set', 'ViewTest.fakeView']
[None]
['count.incrementAndGet']
['MockSchema.newCFS', 'ImmutableList.of', 'MockSchema.sstable', 'MockSchema.sstable', 'MockSchema.sstable', 'tracker.addInitialSSTables', 'copyOf', 'Assert.assertEquals', 'tracker.view.get', '.', 'Assert.assertTrue', 'reader.isKeyCacheSetup', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount']
['DatabaseDescriptor.isIncrementalBackupsEnabled', 'DatabaseDescriptor.setIncrementalBackupsEnabled', 'MockSchema.newCFS', 'tracker.subscribe', 'ImmutableList.of', 'MockSchema.sstable', 'MockSchema.sstable', 'MockSchema.sstable', 'tracker.addSSTables', 'copyOf', 'Assert.assertEquals', 'tracker.view.get', '.', 'Assert.assertTrue', 'reader.isKeyCacheSetup', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'Assert.assertEquals', 'listener.senders.size', 'Assert.assertEquals', 'listener.senders.get', 'Assert.assertTrue', 'listener.received.get', 'DatabaseDescriptor.setIncrementalBackupsEnabled']
['testDropSSTables', 'LogTransaction.waitForDeletions', 'testDropSSTables', 'LogTransaction.waitForDeletions']
['MockSchema.newCFS', 'cfs.getTracker', 'tracker.subscribe', 'ImmutableList.of', 'MockSchema.sstable', 'MockSchema.sstable', 'MockSchema.sstable', 'tracker.addInitialSSTables', 'copyOf', 'tracker.tryModify', 'readers.get', 'cfs.invalidate', 'tracker.dropSSTables', 'LogTransaction.waitForDeletions', 'Assert.assertEquals', 'cfs.metric.totalDiskSpaceUsed.getCount', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'readers.get', 'Iterables.getFirst', 'tracker.getView', 'Assert.assertEquals', 'readers.get', '.', '.', 'Assert.assertFalse', 'readers.get', '.', 'readers.subList', 'Assert.assertEquals', 'reader.selfRef', '.', 'Assert.assertTrue', 'reader.isMarkedCompacted', 'Assert.assertNull', 'tracker.dropSSTables', 'readers.get', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'listener.received.size', 'Assert.assertEquals', 'listener.senders.get', 'Assert.assertTrue', 'listener.received.get', 'Assert.assertTrue', 'listener.received.get', 'Assert.assertTrue', 'listener.received.get', 'Assert.assertEquals', 'readers.get', 'listener.received.get', 'Assert.assertEquals', 'readers.get', 'listener.received.get', 'Assert.assertEquals', 'listener.received.get', 'Assert.assertEquals', 'listener.received.get', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'readers.get', '.', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'Assert.assertTrue', 'reader.isMarkedCompacted']
['DatabaseDescriptor.isIncrementalBackupsEnabled', 'DatabaseDescriptor.setIncrementalBackupsEnabled', 'MockSchema.newCFS', 'cfs.getTracker', 'tracker.subscribe', 'tracker.switchMemtable', 'cfs.keyspace.writeOrder.getCurrent', 'cfs.keyspace.writeOrder.newBarrier', 'prev1.setDiscarding', 'barrier1.issue', 'tracker.switchMemtable', 'cfs.keyspace.writeOrder.getCurrent', 'cfs.keyspace.writeOrder.newBarrier', 'prev2.setDiscarding', 'barrier2.issue', 'tracker.getView', '.', 'cfs.keyspace.writeOrder.getCurrent', 'Assert.assertEquals', 'tracker.getMemtableFor', 'Assert.assertEquals', 'tracker.getMemtableFor', 'Assert.assertEquals', 'tracker.getMemtableFor', 'Assert.assertEquals', 'listener.received.size', 'Assert.assertTrue', 'listener.received.get', 'listener.received.clear', 'tracker.markFlushing', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertTrue', 'tracker.getView', '.', 'tracker.markFlushing', 'Assert.assertTrue', 'tracker.getView', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'tracker.replaceFlushed', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertTrue', 'tracker.getView', '.', 'MockSchema.sstable', 'tracker.replaceFlushed', 'Collections.singleton', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'listener.received.size', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear', 'Assert.assertTrue', 'reader.isKeyCacheSetup', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'MockSchema.newCFS', 'cfs.getTracker', 'tracker.subscribe', 'tracker.switchMemtable', 'tracker.markFlushing', 'MockSchema.sstable', 'cfs.invalidate', 'tracker.replaceFlushed', 'Collections.singleton', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'tracker.getView', '.', 'Assert.assertEquals', 'cfs.metric.liveDiskSpaceUsed.getCount', 'Assert.assertEquals', 'listener.received.size', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'Assert.assertTrue', 'listener.received.get', 'Assert.assertEquals', 'listener.received.get', 'DatabaseDescriptor.setIncrementalBackupsEnabled']
['MockSchema.newCFS', 'MockSchema.sstable', 'MockSchema.sstable', 'tracker.subscribe', 'tracker.notifyAdded', 'singleton', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear', 'tracker.notifyDeleting', 'Assert.assertEquals', 'listener.received.get', 'listener.received.clear', 'Assert.assertNull', 'tracker.notifySSTablesChanged', 'singleton', 'singleton', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear', 'tracker.notifySSTableRepairedStatusChanged', 'singleton', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear', 'MockSchema.memtable', 'tracker.notifyRenewed', 'Assert.assertEquals', 'listener.received.get', 'listener.received.clear', 'tracker.unsubscribe', 'tracker.subscribe', 'tracker.subscribe', 'Assert.assertNotNull', 'tracker.notifyAdded', 'singleton', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear', 'Assert.assertNotNull', 'tracker.notifySSTablesChanged', 'singleton', 'singleton', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'Assert.assertEquals', 'singleton', 'listener.received.get', 'listener.received.clear']
['current.reset', 'updateF.abortEarly', 'rootBuilder.clear', 'current.update', 'current.finish', 'current.isRoot', 'current.toNode', 'current.clear']
['current.ensureChild', 'current.reset', 'current.addNewKey', 'current.ascendToRoot', 'current.toNode', 'current.clear']
['root', 'root', 'root', 'getKeyEnd', 'root']
['cur.isLeaf', 'cur.advanceLeafNode', 'cur.globalLeafIndex', 'moveOutOfLeaf', 'root', 'cur.globalIndex', 'cur.descend', 'cur.descendToFirstChild', 'cur.globalLeafIndex']
['cur.isLeaf', 'cur.advanceLeafNode', 'moveOutOfLeaf', 'root', 'cur.value', 'root', 'cur.boundIterator', 'cur.safeAdvanceIntoBranchFromChild', 'cur.seekInNode', 'cur.isLeaf', 'cur.descend', 'getKeyEnd', 'ensureValidLocation']
['cur.isLeaf', 'getLeafKeyEnd', 'moveOutOfLeaf', 'root']
['root', 'cur.advanceIntoBranchFromChild']
['BTree.size', 'rootNode', 'BTree.size', 'rootNode', 'BTree.size', 'rootNode', 'reset', 'root', 'cur.isLeaf', 'getLeafKeyEnd', 'getSizeMap', 'Arrays.binarySearch', 'cur.descend']
[None]
[None]
['cur.value']
[None]
['builder', '.']
['triggers.values', '.']
['triggers.size']
['triggers.isEmpty']
['Optional.ofNullable', 'triggers.get']
['get', '.', 'String.format', 'builder', '.', '.', '.']
['get', '.', 'String.format', 'builder', '.', 'filter', '.']
['triggers.equals']
['triggers.hashCode']
['triggers.values', '.']
[None]
['triggers.put']
['triggers.forEach']
['SchemaLoader.loadSchema']
['TriggerMetadata.create', 'CFMetaData.compile', 'String.format', 'cfm1.triggers', 'cfm1.getTriggers', '.', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'MigrationManager.announceNewKeyspace', 'Schema.instance.getCFMetaData', 'assertFalse', 'cfm2.getTriggers', '.', 'assertEquals', 'cfm2.getTriggers', '.', 'assertEquals', 'cfm2.getTriggers', '.', '.']
['KeyspaceMetadata.create', 'KeyspaceParams.simple', 'MigrationManager.announceNewKeyspace', 'CFMetaData.compile', 'String.format', 'TriggerMetadata.create', 'cfm1.triggers', 'cfm1.getTriggers', '.', 'MigrationManager.announceNewColumnFamily', 'Schema.instance.getCFMetaData', 'assertFalse', 'cfm2.getTriggers', '.', 'assertEquals', 'cfm2.getTriggers', '.', 'assertEquals', 'cfm2.getTriggers', '.', '.']
['CFMetaData.compile', 'String.format', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'MigrationManager.announceNewKeyspace', 'Schema.instance.getCFMetaData', '.', 'TriggerMetadata.create', 'cfm2.triggers', 'cfm2.getTriggers', '.', 'MigrationManager.announceColumnFamilyUpdate', 'Schema.instance.getCFMetaData', 'assertFalse', 'cfm3.getTriggers', '.', 'assertEquals', 'cfm3.getTriggers', '.', 'assertEquals', 'cfm3.getTriggers', '.', '.']
['TriggerMetadata.create', 'CFMetaData.compile', 'String.format', 'cfm1.triggers', 'cfm1.getTriggers', '.', 'KeyspaceMetadata.create', 'KeyspaceParams.simple', 'Tables.of', 'MigrationManager.announceNewKeyspace', 'Schema.instance.getCFMetaData', '.', 'cfm2.triggers', 'cfm2.getTriggers', '.', 'MigrationManager.announceColumnFamilyUpdate', 'Schema.instance.getCFMetaData', '.', 'assertTrue', 'cfm3.getTriggers', '.']
[None]
['out.writeUTF', 'out.writeUTF', 'out.writeBoolean']
['in.readUTF', 'in.readUTF', 'in.readBoolean']
['TypeSizes.sizeof', 'TypeSizes.sizeof', 'TypeSizes.sizeof']
['TimeUnit.MILLISECONDS.toNanos', 'DatabaseDescriptor.getTruncateRpcTimeout', 'System.nanoTime', 'responses.get']
['responses.incrementAndGet', 'responses.get', 'condition.signalAll']
[None]
[None]
[None]
['out.writeUTF', 'out.writeUTF']
['in.readUTF', 'in.readUTF']
['TypeSizes.sizeof', 'TypeSizes.sizeof']
['cache.get', 'skipBlank', 'isEOS', 'isIdentifierChar', 'str.charAt', 'str.substring', 'skipBlank', 'isEOS', 'str.charAt', 'getAbstractType', 'getAbstractType', 'cache.put']
['parse', 'compareWith.toString']
['skipBlank', 'readNextIdentifier', 'skipBlank', 'isEOS', 'str.charAt', 'getAbstractType', 'getAbstractType']
['isEOS', 'Collections.emptyMap', 'str.charAt', 'skipBlankAndComma', 'str.charAt', 'readNextIdentifier', 'skipBlank', 'str.charAt', 'skipBlank', 'readNextIdentifier', 'str.charAt', 'str.charAt', 'throwSyntaxError', 'str.charAt', 'map.put', 'String.format']
['isEOS', 'str.charAt', 'skipBlankAndComma', 'str.charAt', 'list.add', 'parse', 'String.format', 'ex.initCause', 'String.format']
['isEOS', 'str.charAt', 'skipBlankAndComma', 'str.charAt', 'readNextIdentifier', 'alias.length', 'throwSyntaxError', 'alias.charAt', 'throwSyntaxError', 'skipBlank', 'str.charAt', 'str.charAt', 'throwSyntaxError', 'skipBlank', 'map.put', 'parse', 'String.format', 'ex.initCause', 'String.format']
['isEOS', 'str.charAt', 'skipBlankAndComma', 'str.charAt', 'fromHex', 'readNextIdentifier', 'skipBlank', 'str.charAt', 'throwSyntaxError', 'skipBlank', 'parse', 'map.put', 'String.format', 'ex.initCause', 'String.format']
['ByteBufferUtil.hexToBytes', 'throwSyntaxError', 'e.getMessage']
['isEOS', 'str.charAt', 'skipBlankAndComma', 'readNextIdentifier', 'skipBlankAndComma', 'fromHex', 'readNextIdentifier', 'skipBlankAndComma', 'str.charAt', 'Pair.create', 'Pair.create', 'fromHex', 'readNextIdentifier', 'skipBlank', 'str.charAt', 'throwSyntaxError', 'skipBlank', 'parse', 'defs.add', 'Pair.create', 'String.format', 'ex.initCause', 'String.format']
['compareWith.contains', 'FBUtilities.<', 'typeClass.getDeclaredField', 'field.get', 'getRawAbstractType']
['compareWith.contains', 'FBUtilities.<', 'typeClass.getDeclaredMethod', 'method.invoke', 'getRawAbstractType', 'AbstractType.parseDefaultParameters', 'typeClass.getName', 'ex.initCause', 'e.getTargetException']
['typeClass.getDeclaredField', 'field.get', 'typeClass.getName']
['typeClass.getDeclaredMethod', 'method.invoke', 'typeClass.getName', 'typeClass.getName', 'ex.initCause', 'e.getTargetException']
['String.format']
['isEOS']
['str.length']
[None]
['skipBlank']
['isEOS', 'isBlank', 'str.charAt']
['isEOS', 'str.charAt', 'isBlank']
[None]
['isEOS', 'isIdentifierChar', 'str.charAt', 'str.substring']
['sb.append', 'aliases.entrySet', '.', 'iter.hasNext', 'iter.next', 'sb.append', '.', '.', 'entry.getValue', 'entry.getKey', 'iter.hasNext', 'iter.next', 'sb.append', '.', 'entry.getKey', '.', '.', 'entry.getValue', 'sb.append', 'sb.toString']
['stringifyTypeParameters']
['types.size', 'sb.append', 'sb.append', 'types.get', '.', 'sb.append', '.']
['sb.append', 'collections.entrySet', 'sb.append', 'sb.append', '.', 'ByteBufferUtil.bytesToHex', 'entry.getKey', 'sb.append', 'entry.getValue', 'sb.append', 'sb.toString']
['sb.append', '.', '.', '.', 'ByteBufferUtil.bytesToHex', 'columnNames.size', 'sb.append', 'sb.append', '.', 'ByteBufferUtil.bytesToHex', 'columnNames.get', 'sb.append', 'columnTypes.get', '.', 'sb.append', 'sb.toString']
['AsciiType.instance.validate', 'ByteBuffer.wrap']
['UUID.randomUUID', 'TimeUUIDType.instance.validate', 'ByteBuffer.wrap', 'UUIDGen.decompose']
['TimeUUIDType.instance.validate', 'ByteBuffer.wrap', 'UUIDGen.getTimeUUIDBytes']
['LongType.instance.validate', 'Util.getBytes', 'LongType.instance.validate', 'Util.getBytes']
['Int32Type.instance.validate', 'Util.getBytes', 'Int32Type.instance.validate', 'Util.getBytes']
['CharBuffer.allocate', 'Character.toChars', 'cb.append', 'cb.array', 's.getBytes', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'UTF8Type.instance.validate', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'ByteBuffer.wrap', 'UTF8Type.instance.validate', 'ByteBuffer.wrap']
['UTF8Type.instance.validate', 'ByteBuffer.wrap']
['UTF8Type.instance.validate', 'ByteBuffer.wrap']
['UTF8Type.instance.validate', 'ByteBuffer.wrap']
['UTF8Type.instance.validate', 'ByteBuffer.wrap']
['String.format', 'reason.getMessage']
['String.format', 'reason.getMessage']
[None]
['Collections.emptySet', 'ImmutableSet.of', 'ImmutableSet.of']
[None]
[None]
[None]
[None]
[None]
[None]
['reset', 'System.nanoTime', 'values.size', 'fArgs.add', 'fArgs.addAll', 'udf.isCallableWrtNullable', 'udf.execute', 'stateFunction.execute', 'System.nanoTime', 'Tracing.trace', 'name', 'stateFunction.name', 'Collections.singletonList', 'finalFunction.execute', 'initcond.duplicate']
['System.nanoTime', 'values.size', 'fArgs.add', 'fArgs.addAll', 'udf.isCallableWrtNullable', 'udf.execute', 'stateFunction.execute', 'System.nanoTime']
['Tracing.trace', 'name', 'stateFunction.name', 'Collections.singletonList', 'finalFunction.execute']
['initcond.duplicate']
['functions.find', 'fun.isPresent', 'String.format', 'Arrays.toString', 'UDHelper.driverTypes', 'fun.get', 'String.format', 'Arrays.toString', 'UDHelper.driverTypes', 'fun.get']
['Objects.equal', 'Functions.typesMatch', 'Functions.typesMatch', 'Objects.equal', 'Objects.equal', 'Objects.equal', 'Objects.equal']
['Objects.hashCode', 'Functions.typeHashCode', 'Functions.typeHashCode']
['resource.startsWith', 'resource.substring', 'resource.startsWith', 'resource.startsWith', 'logger.trace', 'logger.trace']
['UDFunction.assertUdfsEnabled']
['Executors.newSingleThreadExecutor', 'String.format', 'reason.getMessage']
['Executors.newSingleThreadExecutor']
['String.format', 'reason.getMessage']
['assertUdfsEnabled', 'isCallableWrtNullable', 'System.nanoTime', 'makeEmptyParametersNull', 'DatabaseDescriptor.enableUserDefinedFunctionsThreads', 'executeAsync', 'executeUserDefined', 'Tracing.trace', 'name', 'System.nanoTime', 'logger.trace', 'FunctionExecutionException.create']
['DatabaseDescriptor.enableUserDefinedFunctions', 'STR_.equalsIgnoreCase', 'DatabaseDescriptor.enableScriptedUserDefinedFunctions']
['UDHelper.codecFor', '.', 'InetAddress.getLoopbackAddress', 'DataType.inet', 'UDHelper.codecFor', '.', 'DataType.ascii']
['Thread.currentThread', '.', 'threadMXBean.getCurrentThreadCpuTime', 'complete']
['executor', '.', 'threadIdAndCpuTime.setup', 'executeUserDefined', 'DatabaseDescriptor.getUserDefinedFunctionWarnTimeout', 'future.get', 'DatabaseDescriptor.getUserDefinedFunctionWarnTimeout', 'String.format', 'DatabaseDescriptor.getUserDefinedFunctionWarnTimeout', 'logger.warn', 'ClientWarn.warn', 'future.get', 'DatabaseDescriptor.getUserDefinedFunctionFailTimeout', 'DatabaseDescriptor.getUserDefinedFunctionWarnTimeout', 'Thread.currentThread', '.', 'e.getCause', 'threadIdAndCpuTime.get', 'threadMXBean.getThreadCpuTime', 'future.get', 'Math.max', 'DatabaseDescriptor.getUserDefinedFunctionFailTimeout', 'Thread.currentThread', '.', 'e.getCause', 'String.format', 'DatabaseDescriptor.getUserDefinedFunctionFailTimeout', 'DatabaseDescriptor.getUserFunctionTimeoutPolicy', 'FunctionExecutionException.create', 'JVMStabilityInspector.userFunctionTimeout']
['parameters.size', 'parameters.size', 'parameters.get', 'r.add', 'UDHelper.isNullOrEmpty', 'argTypes.get']
[None]
['parameters.size', 'UDHelper.isNullOrEmpty', 'argTypes.get', 'parameters.get']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['compose']
['UDHelper.deserialize']
['decompose']
['UDHelper.serialize']
['Objects.equal', 'Objects.equal', 'Functions.typesMatch', 'Functions.typesMatch', 'Objects.equal', 'Objects.equal']
['Objects.hashCode', 'Functions.typeHashCode', 'Functions.typeHashCode']
['userType.getKeyspace', '.', 'userType.getTypeName', '.', 'Schema.instance.getKSMetaData', 'ksm.types.get', '.', 'ByteBufferUtil.bytes', 'UDHelper.driverType', 'argTypes.set', 'MigrationManager.announceNewFunction']
['secureResource', 'insecureClassLoader.getResource']
['getResource']
['Collections.emptyEnumeration']
['secureResource', 'name.replace', 'insecureClassLoader.loadClass']
['secureResource', 'name.replace']
['createTable', 'createFunction', 'createFunction', 'createFunction', 'createFunction', 'createFunction', 'Arrays.asList', 'Arrays.asList', 'map.put', 'map.put', 'map.put', 'tuple', 'execute', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'tupleTypeOf', 'DataType.cdouble', 'DataType.list', 'DataType.cdouble', 'DataType.set', 'DataType.text', 'DataType.map', 'DataType.cint', 'DataType.cboolean', 'tType.newValue', 'assertRowsNet', 'executeNet', 'row', 'assertRowsNet', 'executeNet', 'row', 'assertRowsNet', 'executeNet', 'row', 'assertRowsNet', 'executeNet', 'row', 'assertRowsNet', 'executeNet', 'row']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['.']
[None]
['builder.toHashCode']
['getClass', '.', 'other.getClass', 'getClass', '.', '.', 'other.getClass', '.']
['_Fields.findByThriftId']
['schemes.get', '.', '.', 'iprot.getScheme']
['schemes.get', '.', '.', 'oprot.getScheme']
['sb.append', 'sb.toString']
[None]
['write']
['read']
['iprot.readStructBegin', 'iprot.readFieldBegin', 'org.apache.thrift.protocol.TProtocolUtil.skip', 'iprot.readFieldEnd', 'iprot.readStructEnd', 'struct.validate']
['struct.validate', 'oprot.writeStructBegin', 'oprot.writeFieldStop', 'oprot.writeStructEnd']
[None]
[None]
['latch.await']
['Math.sqrt', 'Math.sqrt', 'waiter.latch.countDown', 'waiting.remove']
['waiting.add', 'wait.await']
[None]
['waiting.latch.countDown', '.']
['add.applyToDeletion']
[None]
['input.stats']
['staticRow', '.', 'partitionLevelDeletion', '.', 'hasNext']
['UTF8Type.instance.getString', 'ByteBufferUtil.bytesToHex']
[None]
[None]
[None]
[None]
[None]
[None]
['parseOptionalKeyspace', 'parseOptionalTables', 'probe.upgradeSSTables']
['parser.getUserTypeParameters', 'params.right.size', 'params.right.size', 'columnNames.add', 'columnTypes.add', 'p.right.freeze']
['type']
[None]
['fieldNames.get']
['stringFieldNames.get']
[None]
['UTF8Type.instance.compose']
['bytes.duplicate', 'size', 'input.hasRemaining', 'input.remaining', 'String.format', 'fieldName', 'input.getInt', 'input.remaining', 'String.format', 'fieldName', 'ByteBufferUtil.readBytes', 'types.get', '.', 'input.hasRemaining']
['Json.decodeJson', 'String.format', 'parsed.getClass', '.', 'Json.handleCaseSensitivity', 'types.size', 'map.keySet', 'keys.isEmpty', 'keys.iterator', '.', 'types.size', 'map.get', 'stringFieldNames.get', 'terms.add', 'terms.add', 'types.get', '.', 'map.size', 'stringFieldNames.contains', 'String.format', 'getNameAsString']
['split', 'types.size', 'sb.append', 'stringFieldNames.get', 'name.equals', 'name.toLowerCase', 'sb.append', 'sb.append', 'Json.JSON_STRING_ENCODER.quoteAsString', 'sb.append', 'sb.append', 'sb.append', 'types.get', '.', 'sb.append', '.']
['Objects.hashCode']
['keyspace.equals', 'name.equals', 'fieldNames.equals', 'types.equals']
['CQL3Type.UserDefined.create']
['getClass', '.', 'TypeParser.stringifyUserTypeParameters']
['UTF8Type.instance.compose', 'ut.fieldName', 'ut.fieldType']
['validateAssignableTo', 'entries.size', 'ut.size', 'ut.fieldName', 'entries.get', 'raw.prepare', 'fieldSpecOf', 'values.add', 'entries.size', 'entries.keySet', 'ut.fieldNames', '.', 'String.format', 'ut.getNameAsString', 'value.bind']
['String.format', 'receiver.type.asCQL3Type', 'ut.size', 'ut.fieldName', 'entries.get', 'fieldSpecOf', 'value.testAssignment', '.', 'String.format', 'fieldSpec.type.asCQL3Type']
['validateAssignableTo']
['sb.append', 'entries.entrySet', '.', 'iter.hasNext', 'iter.next', 'sb.append', '.', '.', 'entry.getValue', '.', 'entry.getKey', 'iter.hasNext', 'sb.append', 'sb.append', 'sb.toString']
['Terms.getFunctions']
['t.containsBindMarker']
['type.size', 'values.get', '.']
['values.size', 'type.size', 'values.get', '.', 'String.format', 'type.fieldNameAsString', 'type.getNameAsString']
['bindAndGet']
['UserType.buildValue', 'bindInternal']
['StorageService.instance.setPartitionerUnsafe']
['createType', 'createTable', 'assertInvalid']
['createType', 'createType', 'createTable', 'execute', 'createType', 'createType', 'createTable', 'execute', 'createType', 'createType', 'createTable', 'execute']
['createType', 'createTable', 'execute', 'execute', 'assertRows', 'execute', 'row', 'flush', 'assertRows', 'execute', 'row']
['createType', 'assertInvalidMessage', 'assertInvalidMessage', 'assertInvalidMessage']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'flush', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'flush', 'assertRows', 'execute', 'row', 'row']
['createType', 'createType', 'createTable', 'assertInvalidMessage', 'unset', 'assertInvalidMessage', 'unset']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'map', 'userType', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'map', 'userType', 'row', 'map', 'userType', 'row', 'map', 'userType', 'row', 'map', 'userType', 'flush', 'assertRows', 'execute', 'row', 'map', 'userType', 'row', 'map', 'userType', 'row', 'map', 'userType', 'row', 'map', 'userType']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'set', 'userType', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'set', 'userType', 'row', 'set', 'userType', 'row', 'set', 'userType', 'row', 'set', 'userType', 'flush', 'assertRows', 'execute', 'row', 'set', 'userType', 'row', 'set', 'userType', 'row', 'set', 'userType', 'row', 'set', 'userType']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'list', 'userType', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'list', 'userType', 'row', 'list', 'userType', 'row', 'list', 'userType', 'row', 'list', 'userType', 'flush', 'assertRows', 'execute', 'row', 'list', 'userType', 'row', 'list', 'userType', 'row', 'list', 'userType', 'row', 'list', 'userType']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'tuple', 'userType', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType', 'flush', 'assertRows', 'execute', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType', 'row', 'tuple', 'userType']
['createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'tuple', 'tuple', 'userType', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType', 'flush', 'assertRows', 'execute', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType', 'row', 'tuple', 'tuple', 'userType']
['createType', 'createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'flush', 'execute', 'execute', 'execute', 'execute', 'assertRows', 'execute', 'row', 'row', 'row', 'row', 'flush', 'assertRows', 'execute', 'row', 'row', 'row', 'row']
['UUID.fromString', 'createType', 'createType', 'createTable', 'execute', 'assertRows', 'execute', 'row', 'execute', 'execute']
['createType', 'createType', 'createTable', 'execute', 'execute']
['createType', 'createTable', 'execute', 'execute', 'keyspace', 'execute']
['createType', 'createType', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'typeWithKs', 'createType', 'keyspace', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'keyspace', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'keyspace', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'keyspace', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'createType', 'keyspace', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs', 'assertInvalidMessage', 'typeWithKs', 'typeWithKs']
['keyspace']
[None]
[None]
['state.validateLogin']
[None]
['state.getClientState', '.']
['execute']
['assertInvalidSyntaxMessage']
['UTF8Validator.validate']
['buf.slice', 'buf.remaining', 'buf.get']
['DatabaseDescriptor.getPartitioner']
['testPartitioner', '.', 'ByteBufferUtil.bytes']
['testPartitioner', '.', 'type.fromString']
['testPartitioner', '.']
['rp', 'testPartitioner']
['PartitionPosition.ForKey.get', 'ByteBufferUtil.bytes']
['metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'row.getCell']
['comparator.make']
['testPartitioner', '.', 'ByteBufferUtil.bytes']
['rp', 'rp']
['rp', 'rp']
['Preconditions.checkState', 'exhausted.getAndSet']
['Preconditions.checkState', 'exhausted.getAndSet']
['ByteBuffer.wrap', 'bb.putLong', 'bb.rewind']
['ByteBuffer.wrap', 'bb.putInt', 'bb.rewind']
['mutations.get', 'first.getKeyspaceName', 'first.getColumnFamilyIds', '.', '.', 'rm.applyUnsafe', 'Keyspace.open', '.', 'store.forceBlockingFlush']
['CounterId.wrap', '.', 'context.position']
['cfs.getLiveSSTables', 'descriptors.add', 'CompactionManager.instance.submitUserDefined']
['cfs.gcBefore', 'FBUtilities.nowInSeconds', 'cfs.getCompactionStrategyManager', '.', 'task.execute']
['expectException']
['callable.call', 'e.getClass', '.', 'e.getClass', '.', 'exception.getName', 'exception.getName']
['makeKey']
[None]
['CFMetaData.serializePartitionKey', 'metadata.getKeyValidatorAsClusteringComparator', '.', 'metadata.decorateKey']
['command.executionController', 'command.executeLocally', 'iterator.hasNext', 'iterator.next', 'command.toCQLString', 'command.metadata', '.', '.', 'partition.partitionKey', '.']
['command.executionController', 'command.executeInternal', 'iterator.hasNext', 'iterator.next', 'command.toCQLString', 'command.metadata', '.', '.', 'partition.partitionKey', '.']
['command.executionController', 'command.executeLocally', 'iterator.hasNext', 'iterator.next', 'results.add', 'ImmutableBTreePartition.create']
['command.executionController', 'command.executeInternal', 'iterator.hasNext', 'iterator.next', 'results.add', 'FilteredPartition.create']
['cmd.executionController', 'cmd.executeLocally', 'iterator.hasNext', 'iterator.next', 'iterator.hasNext', 'partition.hasNext', 'partition.next', 'partition.hasNext']
['cmd.executionController', 'cmd.executeInternal', 'iterator.hasNext', 'iterator.next', 'iterator.hasNext', 'partition.hasNext', 'partition.next', 'partition.hasNext']
['cmd.executionController', 'cmd.executeLocally', 'iterator.hasNext', 'iterator.next', 'iterator.hasNext', 'ImmutableBTreePartition.create']
['cmd.executionController', 'cmd.executeInternal', 'iterator.hasNext', 'iterator.next', 'iterator.hasNext', 'FilteredPartition.create']
['mutation.apply', 'mutation.getPartitionUpdates', '.', 'mutation.getPartitionUpdates', '.', '.', '.']
['cfs.metadata.getColumnDefinition', 'ByteBufferUtil.bytes', 'row.getCell']
['partition.getRow', 'partition.metadata', '.']
['cell', 'row.toString', 'assertEquals', 'cell.column', '.', 'cell.value']
['iter.hasNext', 'iter.next']
['iter.hasNext', 'iter.next', '.']
['cfm.clusteringColumns', 'clusteringColumns.size', 'types.add', 'CBuilder.create']
['Objects.equals', 'a.columns', 'b.columns', 'Objects.equals', 'a.metadata', 'b.metadata', 'Objects.equals', 'a.isReverseOrder', 'b.isReverseOrder', 'Objects.equals', 'a.partitionKey', 'b.partitionKey', 'Objects.equals', 'a.partitionLevelDeletion', 'b.partitionLevelDeletion', 'Objects.equals', 'a.staticRow', 'b.staticRow', 'Objects.equals', 'a.stats', 'b.stats', 'Iterators.elementsEqual']
['Iterators.<', 'row.cells', '.', 'Iterators.toArray', 'Iterators.transform', 'cell.column', '.', 'Arrays.equals', 'String.format', 'row.columns', '.', 'StringUtils.join']
['cell.column', '.']
['row.getCell', 'cfm.getColumnDefinition', 'assertColumn']
['assertNotNull', 'assertEquals', 'ByteBufferUtil.compareUnsigned', 'cell.value', 'ByteBufferUtil.bytes', 'assertEquals', 'cell.timestamp']
['assertEquals', 'row.clustering', '.', 'assertEquals', 'cfm.comparator.compare', 'row.clustering', 'cfm.comparator.make']
[None]
['StorageService.instance.setPartitionerUnsafe']
['System.currentTimeMillis', 'System.currentTimeMillis', 's.get', '.', 'Thread.yield', 'assertEquals', 's.get']
['thread.join']
[None]
['content.hasNext', 'content.next', 'endOfData']
[None]
[None]
[None]
[None]
['utName.toString']
['hasKeyspace']
['Collections.singleton']
['UUIDSerializer.instance.serialize', 'UUID.randomUUID']
['instance.createTimeSafe']
['createTime', 'fromUnixTimestamp']
['getTimeUUID']
['createTime', 'fromUnixTimestamp']
['createTime', 'fromUnixTimestamp']
['raw.getLong', 'raw.position', 'raw.getLong', 'raw.position']
['ByteBuffer.allocate', 'buffer.putLong', 'uuid.getMostSignificantBits', 'buffer.putLong', 'uuid.getLeastSignificantBits', 'buffer.flip']
['uuid.getMostSignificantBits', 'uuid.getLeastSignificantBits']
['createTimeUUIDBytes', 'instance.createTimeSafe']
['createTime', 'fromUnixTimestamp']
['fromUnixTimestamp', 'createTime']
['uuid.timestamp']
['uuid.timestamp']
[None]
['createTimeUUIDBytes', 'instance.createTimeUnsafe']
[None]
['uuid.version', 'uuid.version', 'uuid.timestamp']
['.', 'System.currentTimeMillis']
['System.currentTimeMillis', 'createTime']
['createTime']
[None]
['FBUtilities.getAllLocalAddresses', 'localAddresses.isEmpty', 'hash', 'Math.min']
['MessageDigest.getInstance', 'messageDigest.update', 'addr.getAddress', 'messageDigest.digest']
['identityDistribution.next', 'identityDistribution.next']
['UUIDGen.getTimeUUID', 'uuid.version']
['UUIDGen.getTimeUUID', 'UUIDGen.getTimeUUID', 'one.timestamp', 'two.timestamp']
['UUIDGen.getTimeUUID', 'UUIDGen.decompose', 'UUIDGen.getUUID', 'ByteBuffer.wrap', 'a.equals']
['UUIDGen.getTimeUUID', 'UUIDGen.toByteBuffer', 'UUIDGen.getUUID', 'a.equals']
['ByteBuffer.wrap', 'UUIDGen.getTimeUUIDBytes', 'ByteBuffer.wrap', 'UUIDGen.getTimeUUIDBytes', 'comp.compare', 'comp.compare', 'ByteBuffer.wrap', 'UUIDGen.decompose', 'UUIDGen.getUUID', 'comp.compare']
['System.currentTimeMillis', 'UUIDGen.getTimeUUID', 'UUIDGen.getAdjustedTimestamp']
[None]
['b1.position', 'b2.position', 'b1.limit', 'b2.limit', 'b1.getLong', 'b2.getLong', 'TimeUUIDType.reorderTimestampBytes', 'TimeUUIDType.reorderTimestampBytes', 'Long.compare', 'UnsignedLongs.compare', 'UnsignedLongs.compare', 'b1.getLong', 'b2.getLong']
[None]
['parse', 'String.format']
[None]
[None]
['source.isEmpty', 'regexPattern.matcher', '.', 'UUIDGen.toByteBuffer', 'UUID.fromString', 'String.format']
['fromString', 'String.format', 'parsed.getClass', '.']
['uuid.get']
[None]
[None]
['getClass', 'o.getClass', 'Double.compare', 'partitioner.equals']
['partitioner.hashCode', 'Double.doubleToLongBits']
['TypeSizes.sizeof']
['out.writeUTF', 'out.writeDouble']
['in.readUTF', 'in.readDouble']
['outputHandler.output', 'String.format', 'dataFile.length', 'outputHandler.output', 'String.format', '.', 'sstable.descriptor.filenameFor', 'DataIntegrityMetadata.fileDigestValidator', 'validator.validate', 'outputHandler.output', 'outputHandler.debug', 'e.getMessage', 'markAndThrow', 'FileUtils.closeQuietly', 'outputHandler.output', 'ByteBufferUtil.readWithShortLength', 'rowIndexEntrySerializer.deserialize', 'markAndThrow', 'dataFile.isEOF', 'verifyInfo.isStopRequested', 'verifyInfo.getCompactionInfo', 'dataFile.getFilePointer', 'outputHandler.debug', 'sstable.decorateKey', 'ByteBufferUtil.readWithShortLength', 'throwIfFatal', 'indexFile.isEOF', 'ByteBufferUtil.readWithShortLength', 'indexFile.isEOF', 'dataFile.length', 'rowIndexEntrySerializer.deserialize', 'markAndThrow', 'dataFile.getFilePointer', 'currentIndexKey.remaining', 'ByteBufferUtil.bytesToHex', 'key.getKey', 'outputHandler.debug', 'String.format', 'indexFile.isEOF', 'dataFile.length', 'markAndThrow', 'prevKey.compareTo', 'key.getKey', '.', 'markAndThrow', 'outputHandler.debug', 'String.format', 'dataFile.seek', 'markAndThrow', 'Throwables.propagate', 'controller.close', 'outputHandler.output']
['FileUtils.closeQuietly', 'FileUtils.closeQuietly']
[None]
['sstable.descriptor.getMetadataSerializer', '.', 'String.format', 'sstable.getFilename', 'sstable.getFilename']
[None]
['dataFile.getFilePointer', 'dataFile.length']
[None]
['CompressionParams.snappy', 'SchemaLoader.loadSchema', 'SchemaLoader.createKeyspace', 'KeyspaceParams.simple', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.standardCFMD', '.', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.standardCFMD', 'SchemaLoader.counterCFMD', '.', 'SchemaLoader.counterCFMD', '.', 'SchemaLoader.counterCFMD', 'SchemaLoader.counterCFMD', 'SchemaLoader.counterCFMD', 'SchemaLoader.counterCFMD', 'SchemaLoader.standardCFMD']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCounterCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCounterCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCounterCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCounterCF', 'cfs.getLiveSSTables', '.', '.', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'Util.getAll', 'Util.cmd', '.', 'cfs.getLiveSSTables', '.', '.', 'sstable.descriptor.filenameFor', 'Long.parseLong', 'file.readLine', 'file.close', 'writeChecksum', 'sstable.descriptor.filenameFor', 'verifier.verify', 'fail']
['CompactionManager.instance.disableAutoCompaction', 'Keyspace.open', 'keyspace.getColumnFamilyStore', 'fillCF', 'Util.getAll', 'Util.cmd', '.', 'cfs.getLiveSSTables', '.', '.', 'sstable.getPosition', 'PartitionPosition.ForKey.get', 'ByteBufferUtil.bytes', 'cfs.getPartitioner', 'sstable.getPosition', 'PartitionPosition.ForKey.get', 'ByteBufferUtil.bytes', 'cfs.getPartitioner', 'sstable.getFilename', 'file.seek', 'file.writeBytes', 'StringUtils.repeat', 'file.close', 'writeChecksum', 'simpleFullChecksum', 'sstable.getFilename', 'sstable.descriptor.filenameFor', 'verifier.verify', 'fail', 'verifier.verify', 'fail']
['UpdateBuilder.create', '.', '.', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush']
['UpdateBuilder.create', '.', '.', '.', 'String.valueOf', 'cfs.forceBlockingFlush']
['cinStream.read', 'cinStream.getChecksum', '.']
['Files.newBufferedWriter', 'outFile.toPath', 'out.write', 'String.valueOf', 'out.flush', 'out.close', 'FileUtils.closeQuietly']
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
[None]
['VALIDATION.matcher', '.']
[None]
[None]
[None]
['getClass', 'o.getClass', 'version.equals']
['version.hashCode']
['requireNetwork']
['views.clear']
['executeNet']
['executeNet', 'String.format', 'views.add']
['createTable', 'executeNet', 'keyspace', 'createView', 'semaphore.await', 'executeNet', 'failedWrites.put', 't.start', '.', 'executeNet', '.', '.', 'BatchlogManager.instance.startBatchlogReplay', '.', 'executeNet', '.', '.', 'executeNet', '.', 'keyspace', 'row.getInt', 'others.length', 'others.append', 'others.append', 'failedWrites.containsKey', 'overlappingFailedWrites.length', 'overlappingFailedWrites.append', 'overlappingFailedWrites.append', '.', '.', 'failedWrites.get', '.', 'rows.size', 'String.format', 'rows.size', 'rows.isEmpty', 'String.format', 'rows.size', 'String.format', 'rows.get', '.']
['semaphore.await', 'executeNet', 'failedWrites.put']
['viewsByName.values']
['allViews', 'viewColumnFamilies.add', 'keyspace.getColumnFamilyStore', 'view.getDefinition']
['allViewsCfs', 'viewCfs.forceBlockingFlush']
['allViewsCfs', 'viewCfs.dumpMemtable']
['allViewsCfs', 'viewCfs.discardSSTables', 'SystemKeyspace.saveTruncationRecord']
['viewsByName.put']
['viewsByName.remove']
['viewsByName.entrySet', 'view.getValue', '.', 'view.getValue', '.', 'view.getValue', '.', 'viewMutations.isEmpty', 'Lists.newLinkedList', 'mutations.addAll', 'StorageProxy.mutateMV', 'update.partitionKey', '.']
['mutation.getPartitionUpdates', 'keyspace.getName', '.', 'cf.metadata', 'keyspace.getReplicationStrategy', '.', 'allViews', 'view.updateAffectsView']
['viewsByName.values']
['viewsByName.get', 'view.build', 'keyspace.getMetadata', '.', 'viewDefinition.isPresent', 'view.updateDefinition', 'viewDefinition.get']
['keyspace.getMetadata', 'newViewsByName.put', 'viewsByName.keySet', 'newViewsByName.containsKey', 'removeView', 'newViewsByName.entrySet', 'viewsByName.containsKey', 'entry.getKey', 'addView', 'entry.getValue', 'allViews', 'view.build', 'view.updateDefinition', 'newViewsByName.get']
['keyspace.getColumnFamilyStore', 'forTable', '.', 'view.getDefinition', 'viewsByName.put']
['viewsByName.remove', 'forTable', '.', 'view.getDefinition', 'SystemKeyspace.setViewRemoved', 'keyspace.getName']
['allViews', 'view.build']
['viewManagersByStore.get', 'viewManagersByStore.put']
['LOCKS.get', 'lock.tryLock']
['requireNetwork']
['views.clear']
['executeNet']
['executeNet', 'String.format', 'views.add']
['executeNet', 'StageManager.getStage', 'StageManager.getStage', 'Thread.sleep']
['assertInvalidMessage', 'assertInvalidMessage', 'execute', 'execute']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'Assert.fail', 'createView', 'Assert.fail', 'dropTable', 'createTable', 'createView', 'Assert.fail', 'createView']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'Assert.fail', 'createView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'assertRows', 'execute', 'row', 'row', 'Assert.assertEquals', 'execute', '.', 'assertInvalid']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'Keyspace.open', '.', 'currentTable', '.', 'keyspace', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'row', 'assertRows', 'execute', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'Assert.fail']
['complexTimestampUpdateTest']
['complexTimestampUpdateTest']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'Keyspace.open', 'keyspace', 'createView', 'ks.getColumnFamilyStore', '.', 'executeNet', 'assertRows', 'execute', 'row', 'FBUtilities.waitOnFutures', 'ks.flush', 'executeNet', 'assertRows', 'execute', 'row', 'FBUtilities.waitOnFutures', 'ks.flush', 'executeNet', 'assertRows', 'execute', 'ks.getColumnFamilyStore', '.', 'FBUtilities.waitOnFutures', 'ks.flush', 'executeNet', 'ks.getColumnFamilyStore', '.', 'FBUtilities.waitOnFutures', 'ks.flush', 'assertRows', 'execute', 'row', 'executeNet', 'assertRows', 'execute', 'row', 'FBUtilities.waitOnFutures', 'ks.flush', 'executeNet', 'assertRows', 'execute', 'row', 'FBUtilities.waitOnFutures', 'ks.flush', 'executeNet', 'assertRows', 'execute', 'row', 'executeNet', 'assertRows', 'execute', 'executeNet', 'assertRows', 'execute', 'row', 'executeNet', 'executeNet', 'executeNet', 'assertRows', 'execute', 'row', 'executeNet', 'executeNet', 'assertRows', 'execute', 'row', 'executeNet', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'execute', 'createView', 'SystemKeyspace.isViewBuilt', 'keyspace', 'Thread.sleep', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'createView', 'SystemKeyspace.isViewBuilt', 'keyspace', 'Thread.sleep', 'Assert.assertEquals', 'execute', '.', 'createView', 'SystemKeyspace.isViewBuilt', 'keyspace', 'Thread.sleep', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'updateView', 'Assert.assertEquals', 'execute', '.']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.', 'updateView', 'Assert.assertEquals', 'execute', '.', 'Assert.assertEquals', 'execute', '.']
['createTable', 'currentTableMetadata', 'execute', 'keyspace', 'executeNet', 'keyspace', 'metadata.allColumns', 'def.name.toString', '.', 'def.name.toString', '.', 'createView', 'def.type.isMultiCell', 'Assert.fail', 'def.type.isMultiCell', 'def.isPartitionKey', 'Assert.fail', 'def.name.toString', '.', 'def.name.toString', '.', 'createView', 'def.type.isMultiCell', 'Assert.fail', 'def.type.isMultiCell', 'def.isPartitionKey', 'Assert.fail', 'def.name.toString', '.', 'createView', 'def.type.isMultiCell', 'Assert.fail', 'def.type.isMultiCell', 'def.isPartitionKey', 'Assert.fail', 'def.name.toString', '.', 'createView', 'Assert.fail', 'def.name.toString', '.', 'createView', 'Assert.fail', 'updateView', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute', 'row', 'updateView', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute', 'assertRows', 'execute']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'assertRows', 'execute', 'row', 'list', 'assertRows', 'execute', 'row', 'list', 'updateView', 'updateView', 'assertRows', 'execute', 'row', 'list', 'assertRows', 'execute', 'row', 'list']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row', 'updateView', 'assertRows', 'execute', 'row', 'assertRows', 'execute', 'row']
['createTable', 'execute', 'keyspace', 'executeNet', 'keyspace', 'createView', 'updateView', 'assertRows', 'execute', 'row', 'updateView', 'assertRows', 'execute', 'row', 'currentTable', 'updateView', 'assertRows', 'execute', 'row', 'assertEmpty', 'execute', 'Keyspace.open', '.', 'keyspace', 'cfs.forceBlockingFlush', 'Assert.assertEquals', 'cfs.getLiveSSTables', '.']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'Thread.sleep', 'TimeUnit.SECONDS.toMillis', 'updateView', 'Thread.sleep', 'TimeUnit.SECONDS.toMillis', 'executeNet', '.', 'Assert.assertEquals', 'results.size', 'Assert.assertTrue', 'results.get', '.']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'executeNet', 'executeNet', '.', 'Assert.assertEquals', 'rows.size', 'rows.get', '.', 'assertRowsNet', 'row']
['createTable', 'executeNet', 'keyspace', 'createView', 'createView', 'createView', 'createView', 'updateView', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'row', 'executeNet', 'assertRowsNet', 'row', 'row', 'executeNet', 'assertRowsNet', 'row', 'row', 'executeNet', 'assertRowsNet', 'row', 'row']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'updateView', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'row', 'row', 'updateView', 'String.format', 'currentTable', 'currentTable', 'executeNet', 'assertRowsNet']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'executeNet', 'assertRowsNet', 'row']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'executeNet', 'assertRowsNet', 'row']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'updateView', 'executeNet', 'assertTrue', 'mvRows.isExhausted']
['createTable', 'executeNet', 'keyspace', 'createView', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'updateView', 'executeNet', 'assertRowsNet', 'row', 'updateView', 'executeNet', 'assertTrue', 'mvRows.isExhausted']
['input.readByte', 'numberOfExtraBytesToRead', 'firstByteValueMask', 'input.readByte']
['decodeZigZag64', 'readUnsignedVInt']
[None]
['firstByteValueMask']
['Integer.numberOfLeadingZeros']
[None]
['VIntCoding.computeUnsignedVIntSize', 'output.write', 'output.write', 'VIntCoding.encodeVInt']
['encodingBuffer.get', 'VIntCoding.encodeExtraBytesToRead']
['writeUnsignedVInt', 'encodeZigZag64']
['computeUnsignedVIntSize', 'encodeZigZag64']
[None]
['queue.add']
['queue.add']
['hasWaiters', 'queue.poll', 's.signal']
['hasWaiters', 'queue.iterator', 'iter.hasNext', 'iter.next', 'signal.signal', 'iter.remove']
['queue.iterator', 'iter.hasNext', 'iter.next', 's.isCancelled', 'iter.remove']
['queue.isEmpty']
['hasWaiters', 'queue.iterator', 'iter.hasNext', 'iter.next', 'next.isCancelled']
['isSignalled', 'Thread.interrupted', 'LockSupport.park', 'Thread.currentThread', '.', 'checkAndClear']
['isSignalled', 'checkInterrupted', 'LockSupport.park', 'checkAndClear']
['System.nanoTime', 'isSignalled', 'checkInterrupted', 'LockSupport.parkNanos', 'checkAndClear']
['Thread.interrupted', 'cancel']
[None]
[None]
[None]
['isSet', 'signalledUpdater.compareAndSet', 'LockSupport.unpark']
['isSet', 'signalledUpdater.compareAndSet', 'cleanUpCancelled']
['isCancelled', 'signalledUpdater.compareAndSet', '.', 'cleanUpCancelled']
['context.stop']
['isCancelled', 'context.stop']
['signal.isCancelled']
['signal.checkAndClear', 'isSignalled']
['signal.cancel']
['signal.isSignalled']
['signal.isSet']
['signal.isSignalled']
['signal.isSet']
[None]
[None]
['testSerial']
['queue.register', 'ready.incrementAndGet', 'wait.await', 'e.printStackTrace', 't.start', 'ThreadLocalRandom.current', 'ready.get', 'random.nextLong', 'queue.signal', 'Util.joinThread', 'assertFalse', 'queue.getClass', '.', 't.isAlive']
['queue.register', 'ready.incrementAndGet', 'wait.await', 'e.printStackTrace']
['testCondition']
['queue.register', 'condition.get', 'System.err.println', 'fail.set', 'ready.set', 'ready.set', 'wait.awaitUninterruptibly', 'condition.get', 'System.err.println', 'fail.set', 't.start', 'ThreadLocalRandom.current', 'ready.get', 'random.nextLong', 'condition.set', 'queue.signal', 'Util.joinThread', 'assertFalse', 'queue.getClass', '.', 't.isAlive', 'assertFalse', 'fail.get']
['queue.register', 'condition.get', 'System.err.println', 'fail.set', 'ready.set', 'ready.set', 'wait.awaitUninterruptibly', 'condition.get', 'System.err.println', 'fail.set']
['.', 'reader.readLine', 'FileUtils.isSubDirectory', 'System.getenv', 'DatabaseDescriptor.getAllDataFileLocations', 'FileUtils.isSubDirectory', 'logger.warn', 'f.exists', 'logger.warn', 'FileUtils.deleteRecursive', 'Files.delete', 'Paths.get', 'logger.warn', 'logger.warn', 'String.format']
['FileUtils.deleteRecursiveOnExit', '_failedSnapshotFile.println', 'dir.toString', '_failedSnapshotFile.flush']
['_failedSnapshotFile.close']
['ToolRunner.run', 'System.exit']
['logger.debug', 'context.getInputSplit', 'Long.valueOf', 'row.getString']
['context.write']
['logger.debug', 'toString', 'context.getInputSplit', 'Long.valueOf', 'ByteBufferUtil.string', 'columns.get']
['context.write']
['keys.values', 'ByteBufferUtil.string', 'logger.error']
['val.get', 'context.write']
['.', '.', 'getConf', 'job.setCombinerClass', 'job.setReducerClass', 'job.setJarByClass', 'ConfigHelper.setInputInitialAddress', 'job.getConfiguration', 'ConfigHelper.setInputPartitioner', 'job.getConfiguration', 'ConfigHelper.setInputColumnFamily', 'job.getConfiguration', 'CqlConfigHelper.setInputCQLPageRowSize', 'job.getConfiguration', 'STR_.equals', 'job.setMapperClass', 'job.setInputFormatClass', 'CqlConfigHelper.setInputCql', 'job.getConfiguration', 'job.setMapperClass', 'job.setInputFormatClass', 'ConfigHelper.setInputRpcPort', 'job.getConfiguration', 'job.setOutputKeyClass', 'job.setOutputValueClass', 'FileOutputFormat.setOutputPath', 'job.waitForCompletion']
['c.close', 'merge', 'maybeFail']
['Arrays.toString']
